; Copyright (c) Microsoft Corporation.
; Licensed under the MIT License.

;=======================================================================================================================
; QIR types
;
%Array = type opaque
%Callable = type opaque
%Qubit = type opaque
%Range = type { i64, i64, i64 }
%Result = type opaque
%String = type opaque
%Pauli = type i2

;=======================================================================================================================
; Native types
; NB: there is no overloading at IR level, so a call/invoke will be made even
; if the definition of the function mismatches the declaration of the arguments.
; It means we could declare here the bridge's C-functions using QIR types
; and avoid bitcasts. However, it seems prudent to be more explicit about
; what's going on and declare the true signatures, as generated by Clang.
;
%class.QUBIT = type opaque
%class.RESULT = type opaque
%struct.QirArray = type opaque
%struct.QirCallable = type opaque
%struct.QirRange = type { i64, i64, i64 }
%struct.QirString = type opaque
%PauliId = type i32

; The __quantum__qis__* definitions should be automatically generated by QIR, depending on the specific target.
; However, for simulator targets we provide an optional simple bridge that covers commonly used intrinsics. 

;===============================================================================
; declarations of the native methods this bridge delegates to
;
declare void @quantum__qis__h__body(%class.QUBIT*)
declare %class.RESULT* @quantum__qis__m__body(%class.QUBIT*)
declare void @quantum__qis__rx__body(double, %class.QUBIT*)
declare void @quantum__qis__ry__body(double, %class.QUBIT*)
declare void @quantum__qis__rz__body(double, %class.QUBIT*)
declare void @quantum__qis__s__body(%class.QUBIT*)
declare void @quantum__qis__s__adj(%class.QUBIT*)
declare void @quantum__qis__t__body(%class.QUBIT*)
declare void @quantum__qis__t__adj(%class.QUBIT*)
declare void @quantum__qis__x__body(%class.QUBIT*)
declare void @quantum__qis__x__ctl(%class.QUBIT*, %class.QUBIT*)
declare void @quantum__qis__y__body(%class.QUBIT*)
declare void @quantum__qis__z__body(%class.QUBIT*)
declare void @quantum__qis__z__ctl(%class.QUBIT*, %class.QUBIT*)
declare void @quantum__qis__reset__body(%class.QUBIT*)

;===============================================================================
; quantum.qis dump functions declarations
;
; Must be `const void* %location`, but `void *` is invalid (LLVM), and `const` is not supported.
declare void @quantum__qis__dumpmachine__body(i8* %location)  
declare void @quantum__qis__dumpregister__body(i8* %location, %struct.QirArray* %qubits)


;===============================================================================
; quantum.qis namespace implementations
;

define dllexport void @__quantum__qis__applyuncontrolledh__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__h__body(%class.QUBIT* %q)
  ret void
}

define dllexport %Result* @__quantum__qis__m__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  %r = call %class.RESULT* @quantum__qis__m__body(%class.QUBIT* %q)
  %.r = bitcast %class.RESULT* %r to %Result*
  ret %Result* %.r
}

define dllexport void @__quantum__qis__applyuncontrolledrx__body(double %theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__rx__body(double %theta, %class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledry__body(double %theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__ry__body(double %theta, %class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledrz__body(double %theta, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__rz__body(double %theta, %class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolleds__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__s__body(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolleds__adj(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__s__adj(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledt__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__t__body(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledt__adj(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__t__adj(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledx__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__x__body(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applycontrolledx__body(%Qubit* %.ctl, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  %ctl = bitcast %Qubit* %.ctl to %class.QUBIT*
  call void @quantum__qis__x__ctl(%class.QUBIT* %ctl, %class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledy__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__y__body(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applyuncontrolledz__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__z__body(%class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__applycontrolledz__body(%Qubit* %.ctl, %Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  %ctl = bitcast %Qubit* %.ctl to %class.QUBIT*
  call void @quantum__qis__z__ctl(%class.QUBIT* %ctl, %class.QUBIT* %q)
  ret void
}

define dllexport void @__quantum__qis__reset__body(%Qubit* %.q) {
  %q = bitcast %Qubit* %.q to %class.QUBIT*
  call void @quantum__qis__reset__body(%class.QUBIT* %q)
  ret void
}



;===============================================================================
; quantum.qis dump functions implementation
;
define dllexport void @__quantum__qis__dumpmachine__body(i8* %location) {
  call void @quantum__qis__dumpmachine__body(i8* %location)
  ret void
}

define dllexport void @__quantum__qis__dumpregister__body(i8* %location, %Array* %.qubits) {
  %qubits = bitcast %Array* %.qubits to %struct.QirArray*
  call void @quantum__qis__dumpregister__body(i8* %location, %struct.QirArray* %qubits)
  ret void
}
