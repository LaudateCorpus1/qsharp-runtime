// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Quantum.Qir.Runtime.Tools.Driver
{
    using System.IO;
    using Microsoft.Quantum.Qir.Runtime.Tools.Serialization;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class QirCppDriver : QirCppDriverBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//----------------------------------------------------------------------------------------------------------------------
// <auto-generated />
// This code was generated by the Microsoft.Quantum.Qir.Runtime.Tools package.
// The purpose of this source code file is to provide an entry-point for executing a QIR program.
// It handles parsing of command line arguments, and it invokes an entry-point function exposed by the QIR program.
//----------------------------------------------------------------------------------------------------------------------

#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include ""CLI11.hpp""

#include ""QirRuntime.hpp""
#include ""QirContext.hpp""

");
 foreach (var header in RuntimeInitializer.Headers) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(header));
            this.Write("\"\r\n");
 } 
            this.Write("\r\nusing namespace Microsoft::Quantum;\r\nusing namespace std;\r\n\r\nstruct InteropArra" +
                    "y\r\n{\r\n    int64_t Size;\r\n    void* Data;\r\n\r\n    InteropArray(int64_t size, void*" +
                    " data) :\r\n        Size(size),\r\n        Data(data){}\r\n};\r\n\r\ntemplate<typename T>\r" +
                    "\nunique_ptr<InteropArray> CreateInteropArray(vector<T>& v)\r\n{\r\n    unique_ptr<In" +
                    "teropArray> array(new InteropArray(v.size(), v.data()));\r\n    return array;\r\n}\r\n" +
                    "\r\ntemplate<typename S, typename D>\r\nvoid TranslateVector(vector<S>& sourceVector" +
                    ", vector<D>& destinationVector, function<D(S&)> translationFunction)\r\n{\r\n    des" +
                    "tinationVector.resize(sourceVector.size());\r\n    transform(sourceVector.begin()," +
                    " sourceVector.end(), destinationVector.begin(), translationFunction);\r\n}\r\n\r\nusin" +
                    "g RangeTuple = tuple<int64_t, int64_t, int64_t>;\r\nstruct InteropRange\r\n{\r\n    in" +
                    "t64_t Start;\r\n    int64_t Step;\r\n    int64_t End;\r\n\r\n    InteropRange() :\r\n     " +
                    "   Start(0),\r\n        Step(0),\r\n        End(0){}\r\n\r\n    InteropRange(RangeTuple " +
                    "rangeTuple) :\r\n        Start(get<0>(rangeTuple)),\r\n        Step(get<1>(rangeTupl" +
                    "e)),\r\n        End(get<2>(rangeTuple)){}\r\n};\r\n\r\nInteropRange* TranslateRangeTuple" +
                    "ToInteropRangePointer(RangeTuple& rangeTuple)\r\n{\r\n    return new InteropRange(ra" +
                    "ngeTuple);\r\n}\r\n\r\nconst char* TranslateStringToCharBuffer(string& s)\r\n{\r\n    retu" +
                    "rn s.c_str();\r\n}\r\n\r\nmap<string, uint8_t> EnumMap {\r\n    {\"0\", static_cast<uint8_" +
                    "t>(0)},\r\n    {\"1\", static_cast<uint8_t>(1)},\r\n    {\"2\", static_cast<uint8_t>(2)}" +
                    ",\r\n    {\"3\", static_cast<uint8_t>(3)},\r\n    {\"false\", static_cast<uint8_t>(0)},\r" +
                    "\n    {\"true\", static_cast<uint8_t>(1)},\r\n    {\"Zero\", static_cast<uint8_t>(0)},\r" +
                    "\n    {\"One\", static_cast<uint8_t>(1)},\r\n    {\"PauliI\", static_cast<uint8_t>(Paul" +
                    "iId::PauliId_I)},\r\n    {\"PauliX\", static_cast<uint8_t>(PauliId::PauliId_X)},\r\n  " +
                    "  {\"PauliY\", static_cast<uint8_t>(PauliId::PauliId_Y)},\r\n    {\"PauliZ\", static_c" +
                    "ast<uint8_t>(PauliId::PauliId_Z)}\r\n};\r\n\r\nextern \"C\" void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntryPoint.Name));
            this.Write("(\r\n");
 for (int i = 0; i < EntryPoint.Parameters.Count; i++) {
    var arg = EntryPoint.Parameters[i];
    var isLastArg = i == (EntryPoint.Parameters.Count-1); 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.InteropType()));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Name));
            this.Write(this.ToStringHelper.ToStringWithCulture((isLastArg) ? "" : ","));
            this.Write("\r\n");
 } 
            this.Write("); // QIR interop function.\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    CLI::App " +
                    "app(\"QIR Standalone Entry Point\");\r\n\r\n    // Initialize runtime.\r\n");
 var initializerReader = new StringReader(RuntimeInitializer.Generate());
   string line;
   while((line = initializerReader.ReadLine()) != null) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(line));
            this.Write("\r\n");
 } 
            this.Write(@"
    // Add the --simulation-output option.
    string simulationOutputFile;
    CLI::Option* simulationOutputFileOpt = app.add_option(
        ""--simulation-output"",
        simulationOutputFile,
        ""File where the output produced during the simulation is written"");

");
 if (EntryPoint.Parameters.Count > 0) { 
            this.Write("    // Add a command line option for each entry-point parameter.\r\n");
 } 
 foreach (var arg in EntryPoint.Parameters) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Type.CliOptionType(arg.ElementTypes)));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.CliOptionVariableName()));
            this.Write(";\r\n    app.add_option(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.CliOptionName()));
            this.Write("\", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.CliOptionVariableName()));
            this.Write(", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.CliOptionDescription()));
            this.Write("\")\r\n        ->required()");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.Type == DataType.Enum ? "" : ";"));
            this.Write("\r\n");
 if (arg.Type == DataType.Enum) { 
            this.Write("        ->transform(CLI::CheckedTransformer(EnumMap, CLI::ignore_case));\r\n");
 } 
            this.Write("\r\n");
 } 
            this.Write("    // After all the options have been added, parse arguments from the command li" +
                    "ne.\r\n    CLI11_PARSE(app, argc, argv);\r\n\r\n");
 if (EntryPoint.Parameters.Count > 0) { 
            this.Write("    // Cast parsed arguments to its interop types.\r\n");
 } 
 foreach (var arg in EntryPoint.Parameters) { 
 var interopTranslator = arg.CliOptionTypeToInteropTypeTranslator(); 
 if (interopTranslator == null) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.InteropType()));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.InteropVariableName()));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.CliOptionVariableName()));
            this.Write(";\r\n");
 } 
 else { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.InteropType()));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.InteropVariableName()));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(interopTranslator));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.CliOptionVariableName()));
            this.Write(");\r\n");
 } 
            this.Write("\r\n");
 } 
            this.Write(@"    // Redirect the simulator output from std::cout if the --simulation-output option is present.
    ostream* simulatorOutputStream = &cout;
    ofstream simulationOutputFileStream;
    if (!simulationOutputFileOpt->empty())
    {
        simulationOutputFileStream.open(simulationOutputFile);
        SetOutputStream(simulationOutputFileStream);
        simulatorOutputStream = &simulationOutputFileStream;
    }

    // Execute the entry point operation.
    ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntryPoint.Name));
            this.Write("(\r\n");
 for (int i = 0; i < EntryPoint.Parameters.Count; i++) {
    var arg = EntryPoint.Parameters[i];
    var isLastArg = i == (EntryPoint.Parameters.Count-1); 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(arg.InteropVariableName()));
            this.Write(this.ToStringHelper.ToStringWithCulture((isLastArg) ? "" : ","));
            this.Write("\r\n");
 } 
            this.Write("    );\r\n\r\n    // Flush the output of the simulation.\r\n    simulatorOutputStream->" +
                    "flush();\r\n    if (simulationOutputFileStream.is_open())\r\n    {\r\n        simulati" +
                    "onOutputFileStream.close();\r\n    }\r\n\r\n    return 0;\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class QirCppDriverBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
