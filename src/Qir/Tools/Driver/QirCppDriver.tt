<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.Quantum.Qir.Runtime.Tools.Serialization" #>
//----------------------------------------------------------------------------------------------------------------------
// <auto-generated />
// This code was generated by the Microsoft.Quantum.Qir.Runtime.Tools package.
// The purpose of this source code file is to provide an entry-point for executing a QIR program.
// It handles parsing of command line arguments, and it invokes an entry-point function exposed by the QIR program.
//----------------------------------------------------------------------------------------------------------------------

#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <vector>

#include "CLI11.hpp"

#include "QirRuntime.hpp"
#include "QirContext.hpp"

<# foreach (var header in RuntimeInitializer.Headers) { #>
#include "<#= header #>"
<# } #>

using namespace Microsoft::Quantum;
using namespace std;

struct InteropArray
{
    int64_t Size;
    void* Data;

    InteropArray(int64_t size, void* data) :
        Size(size),
        Data(data){}
};

template<typename T>
unique_ptr<InteropArray> CreateInteropArray(vector<T>& v)
{
    unique_ptr<InteropArray> array(new InteropArray(v.size(), v.data()));
    return array;
}

template<typename S, typename D>
void TranslateVector(vector<S>& sourceVector, vector<D>& destinationVector, function<D(S&)> translationFunction)
{
    destinationVector.resize(sourceVector.size());
    transform(sourceVector.begin(), sourceVector.end(), destinationVector.begin(), translationFunction);
}

using RangeTuple = tuple<int64_t, int64_t, int64_t>;
struct InteropRange
{
    int64_t Start;
    int64_t Step;
    int64_t End;

    InteropRange() :
        Start(0),
        Step(0),
        End(0){}

    InteropRange(RangeTuple rangeTuple) :
        Start(get<0>(rangeTuple)),
        Step(get<1>(rangeTuple)),
        End(get<2>(rangeTuple)){}
};

InteropRange* TranslateRangeTupleToInteropRangePointer(RangeTuple& rangeTuple)
{
    return new InteropRange(rangeTuple);
}

const char* TranslateStringToCharBuffer(string& s)
{
    return s.c_str();
}

map<string, uint8_t> EnumMap {
    {"0", static_cast<uint8_t>(0)},
    {"1", static_cast<uint8_t>(1)},
    {"2", static_cast<uint8_t>(2)},
    {"3", static_cast<uint8_t>(3)},
    {"false", static_cast<uint8_t>(0)},
    {"true", static_cast<uint8_t>(1)},
    {"Zero", static_cast<uint8_t>(0)},
    {"One", static_cast<uint8_t>(1)},
    {"PauliI", static_cast<uint8_t>(PauliId::PauliId_I)},
    {"PauliX", static_cast<uint8_t>(PauliId::PauliId_X)},
    {"PauliY", static_cast<uint8_t>(PauliId::PauliId_Y)},
    {"PauliZ", static_cast<uint8_t>(PauliId::PauliId_Z)}
};

extern "C" void <#= EntryPoint.Name #>(
<# for (int i = 0; i < EntryPoint.Parameters.Count; i++) {
    var arg = EntryPoint.Parameters[i];
    var isLastArg = i == (EntryPoint.Parameters.Count-1); #>
    <#= arg.InteropType() #> <#= arg.Name #><#= (isLastArg) ? "" : "," #>
<# } #>
); // QIR interop function.

int main(int argc, char* argv[])
{
    CLI::App app("QIR Standalone Entry Point");

    // Initialize runtime.
<# var initializerReader = new StringReader(RuntimeInitializer.Generate());
   string line;
   while((line = initializerReader.ReadLine()) != null) { #>
    <#= line #>
<# } #>

    // Add the --simulation-output option.
    string simulationOutputFile;
    CLI::Option* simulationOutputFileOpt = app.add_option(
        "--simulation-output",
        simulationOutputFile,
        "File where the output produced during the simulation is written");

<# if (EntryPoint.Parameters.Count > 0) { #>
    // Add a command line option for each entry-point parameter.
<# } #>
<# foreach (var arg in EntryPoint.Parameters) { #>
    <#= arg.Type.CliOptionType(arg.ElementTypes) #> <#= arg.CliOptionVariableName() #>;
    app.add_option("<#= arg.CliOptionName() #>", <#= arg.CliOptionVariableName() #>, "<#= arg.CliOptionDescription() #>")
        ->required()<#= arg.CliOptionRequiresCheckedTransformer() ? "" : ";" #>
<# if (arg.CliOptionRequiresCheckedTransformer()) { #>
        ->transform(CLI::CheckedTransformer(EnumMap, CLI::ignore_case));
<# } #>

<# } #>
    // After all the options have been added, parse arguments from the command line.
    CLI11_PARSE(app, argc, argv);

<# if (EntryPoint.Parameters.Count > 0) { #>
    // Cast parsed arguments to its interop types.
<# } #>
<# foreach (var arg in EntryPoint.Parameters) { #>

<# if (arg.Type == DataType.Collection && arg.ElementTypes.Count == 1) { #>
    unique_ptr<InteropArray> <#= arg.UniquePtrVariableName() #> = CreateInteropArray(<#= arg.CliOptionVariableName() #>);
    InteropArray* <#= arg.InteropVariableName() #> = <#= arg.UniquePtrVariableName() #>.get();
<# } #>
<# else { 
   var interopTranslator = arg.CliOptionTypeToInteropTypeTranslator(); #>
<# if (interopTranslator == null) { #>
    <#= arg.InteropType() #> <#= arg.InteropVariableName() #> = <#= arg.CliOptionVariableName() #>;
<# } #>
<# else { #>
    <#= arg.InteropType() #> <#= arg.InteropVariableName() #> = <#= interopTranslator #>(<#= arg.CliOptionVariableName() #>);
<# } #>
<# } #>

<# } #>
    // Redirect the simulator output from std::cout if the --simulation-output option is present.
    ostream* simulatorOutputStream = &cout;
    ofstream simulationOutputFileStream;
    if (!simulationOutputFileOpt->empty())
    {
        simulationOutputFileStream.open(simulationOutputFile);
        SetOutputStream(simulationOutputFileStream);
        simulatorOutputStream = &simulationOutputFileStream;
    }

    // Execute the entry point operation.
    <#= EntryPoint.Name #>(
<# for (int i = 0; i < EntryPoint.Parameters.Count; i++) {
    var arg = EntryPoint.Parameters[i];
    var isLastArg = i == (EntryPoint.Parameters.Count-1); #>
        <#= arg.InteropVariableName() #><#= (isLastArg) ? "" : "," #>
<# } #>
    );

    // Flush the output of the simulation.
    simulatorOutputStream->flush();
    if (simulationOutputFileStream.is_open())
    {
        simulationOutputFileStream.close();
    }

    return 0;
}
