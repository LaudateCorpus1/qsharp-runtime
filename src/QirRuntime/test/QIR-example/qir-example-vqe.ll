
%Result = type opaque
%Range = type { i64, i64, i64 }
%Tuple = type opaque
%Array = type opaque
%Qubit = type opaque
%Callable = type opaque
%String = type opaque

@ResultZero = external global %Result*
@ResultOne = external global %Result*
@PauliI = constant i2 0
@PauliX = constant i2 1
@PauliY = constant i2 -1
@PauliZ = constant i2 -2
@EmptyRange = internal constant %Range { i64 0, i64 1, i64 -1 }
@Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__1 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__1__RefCount, void (%Tuple*, i64)* @MemoryManagement__1__AliasCount]
@Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__2 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__2 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__2__RefCount, void (%Tuple*, i64)* @MemoryManagement__2__AliasCount]
@0 = internal constant [47 x i8] c"Completely invalid cluster operator specified.\00"
@1 = internal constant [86 x i8] c"ComputeJordanWignerString failed. `idxFermions` must contain an even number of terms.\00"
@2 = internal constant [46 x i8] c"ComputeJordanWignerString failed. fermionIdx \00"
@3 = internal constant [15 x i8] c" out of range.\00"
@PartialApplication__3 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@MemoryManagement__3 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__3__RefCount, void (%Tuple*, i64)* @MemoryManagement__3__AliasCount]
@4 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@5 = internal constant [3 x i8] c", \00"
@6 = internal constant [18 x i8] c" must be distinct\00"
@7 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@8 = internal constant [3 x i8] c", \00"
@9 = internal constant [18 x i8] c" must be distinct\00"
@10 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@11 = internal constant [3 x i8] c", \00"
@12 = internal constant [18 x i8] c" must be distinct\00"
@13 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@14 = internal constant [3 x i8] c", \00"
@15 = internal constant [18 x i8] c" must be distinct\00"
@Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__4 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__4 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__4__RefCount, void (%Tuple*, i64)* @MemoryManagement__4__AliasCount]
@Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj__wrapper]
@PartialApplication__5 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctladj__wrapper]
@MemoryManagement__5 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__5__RefCount, void (%Tuple*, i64)* @MemoryManagement__5__AliasCount]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper]
@PartialApplication__6 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctladj__wrapper]
@MemoryManagement__6 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__6__RefCount, void (%Tuple*, i64)* @MemoryManagement__6__AliasCount]
@Microsoft__Quantum__Intrinsic__X = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@16 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@17 = internal constant [3 x i8] c", \00"
@18 = internal constant [3 x i8] c", \00"
@19 = internal constant [3 x i8] c", \00"
@20 = internal constant [18 x i8] c" must be distinct\00"
@21 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@22 = internal constant [3 x i8] c", \00"
@23 = internal constant [3 x i8] c", \00"
@24 = internal constant [3 x i8] c", \00"
@25 = internal constant [18 x i8] c" must be distinct\00"
@26 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@27 = internal constant [3 x i8] c", \00"
@28 = internal constant [3 x i8] c", \00"
@29 = internal constant [3 x i8] c", \00"
@30 = internal constant [18 x i8] c" must be distinct\00"
@31 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@32 = internal constant [3 x i8] c", \00"
@33 = internal constant [3 x i8] c", \00"
@34 = internal constant [3 x i8] c", \00"
@35 = internal constant [18 x i8] c" must be distinct\00"
@36 = internal constant [33 x i8] c"`bits` must be between 0 and 63 \00"
@37 = internal constant [34 x i8] c"`number` must be between 0 and 2^\00"
@38 = internal constant [15 x i8] c" - 1, but was \00"
@39 = internal constant [2 x i8] c".\00"
@40 = internal constant [13 x i8] c"\0A\09Expected:\09\00"
@41 = internal constant [11 x i8] c"\0A\09Actual:\09\00"
@Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctladj__wrapper]
@PartialApplication__7 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__ctladj__wrapper]
@MemoryManagement__7 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__7__RefCount, void (%Tuple*, i64)* @MemoryManagement__7__AliasCount]
@Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctladj__wrapper]
@PartialApplication__8 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__ctladj__wrapper]
@Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj__wrapper]
@PartialApplication__9 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__ctladj__wrapper]
@MemoryManagement__8 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__8__RefCount, void (%Tuple*, i64)* @MemoryManagement__8__AliasCount]
@42 = internal constant [11 x i8] c"Odd order \00"
@43 = internal constant [20 x i8] c" not yet supported.\00"
@Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper]
@PartialApplication__10 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctladj__wrapper]
@MemoryManagement__9 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__9__RefCount, void (%Tuple*, i64)* @MemoryManagement__9__AliasCount]
@Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctladj__wrapper]
@PartialApplication__11 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctladj__wrapper]
@MemoryManagement__10 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__10__RefCount, void (%Tuple*, i64)* @MemoryManagement__10__AliasCount]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexZ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper]
@PartialApplication__12 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__ctladj__wrapper]
@MemoryManagement__11 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__11__RefCount, void (%Tuple*, i64)* @MemoryManagement__11__AliasCount]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper]
@PartialApplication__13 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__ctladj__wrapper]
@MemoryManagement__12 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__12__RefCount, void (%Tuple*, i64)* @MemoryManagement__12__AliasCount]
@Microsoft__Quantum__Intrinsic__H = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper]
@PartialApplication__14 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__S = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper]
@44 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@45 = internal constant [2 x i8] c".\00"
@PartialApplication__15 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__ctladj__wrapper]
@PartialApplication__16 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__ctladj__wrapper]
@PartialApplication__17 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__ctladj__wrapper]
@46 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@47 = internal constant [2 x i8] c".\00"
@PartialApplication__18 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__ctladj__wrapper]
@PartialApplication__19 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__ctladj__wrapper]
@PartialApplication__20 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctladj__wrapper]
@48 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@49 = internal constant [2 x i8] c".\00"
@PartialApplication__21 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctladj__wrapper]
@PartialApplication__22 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctladj__wrapper]
@PartialApplication__23 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctladj__wrapper]
@50 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@51 = internal constant [2 x i8] c".\00"
@52 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@53 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@54 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@55 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@56 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@57 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@58 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@59 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@60 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@61 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@62 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@63 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctladj__wrapper]
@PartialApplication__24 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctladj__wrapper]
@MemoryManagement__13 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__13__RefCount, void (%Tuple*, i64)* @MemoryManagement__13__AliasCount]
@Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctladj__wrapper]
@PartialApplication__25 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctladj__wrapper]
@MemoryManagement__14 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__14__RefCount, void (%Tuple*, i64)* @MemoryManagement__14__AliasCount]
@Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctladj__wrapper]
@PartialApplication__26 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctladj__wrapper]
@MemoryManagement__15 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__15__RefCount, void (%Tuple*, i64)* @MemoryManagement__15__AliasCount]
@Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctladj__wrapper]
@PartialApplication__27 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctladj__wrapper]
@MemoryManagement__16 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__16__RefCount, void (%Tuple*, i64)* @MemoryManagement__16__AliasCount]
@Microsoft__Quantum__Canon___318ca8f6570d4e08a137a15bcb135424___QsRef2__ComposedOutput__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___318ca8f6570d4e08a137a15bcb135424___QsRef2__ComposedOutput____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__28 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__17 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__17__RefCount, void (%Tuple*, i64)* @MemoryManagement__17__AliasCount]
@64 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@65 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@66 = internal constant [22 x i8] c"Index is out of bound\00"
@Microsoft__Quantum__Arrays___00faa319cec04c35b268acd7ae24be3c_ElementAt = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___00faa319cec04c35b268acd7ae24be3c_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__29 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__18 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__18__RefCount, void (%Tuple*, i64)* @MemoryManagement__18__AliasCount]
@Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj__wrapper]
@PartialApplication__30 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__ctladj__wrapper]
@MemoryManagement__19 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__19__RefCount, void (%Tuple*, i64)* @MemoryManagement__19__AliasCount]
@Microsoft__Quantum__Simulation__TrotterStepImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj__wrapper]
@PartialApplication__31 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__ctladj__wrapper]
@MemoryManagement__20 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__20__RefCount, void (%Tuple*, i64)* @MemoryManagement__20__AliasCount]
@PartialApplication__32 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__ctladj__wrapper]
@MemoryManagement__21 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__21__RefCount, void (%Tuple*, i64)* @MemoryManagement__21__AliasCount]
@Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctladj__wrapper]
@PartialApplication__33 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__ctladj__wrapper]
@MemoryManagement__22 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__22__RefCount, void (%Tuple*, i64)* @MemoryManagement__22__AliasCount]
@Microsoft__Quantum__Math__ComplexPolar = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__ComplexPolar__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__34 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__23 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__23__RefCount, void (%Tuple*, i64)* @MemoryManagement__23__AliasCount]
@Microsoft__Quantum__Math__AbsD = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__AbsD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__35 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__36 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__37 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctladj__wrapper]
@PartialApplication__38 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__ctladj__wrapper]
@MemoryManagement__24 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__24__RefCount, void (%Tuple*, i64)* @MemoryManagement__24__AliasCount]
@PartialApplication__39 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctladj__wrapper]
@PartialApplication__40 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__ctladj__wrapper]
@MemoryManagement__25 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__25__RefCount, void (%Tuple*, i64)* @MemoryManagement__25__AliasCount]
@Microsoft__Quantum__Preparation__PrepareArbitraryStateCP = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj__wrapper]
@PartialApplication__41 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__ctladj__wrapper]
@MemoryManagement__26 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__26__RefCount, void (%Tuple*, i64)* @MemoryManagement__26__AliasCount]
@Microsoft__Quantum__Preparation__PrepareArbitraryStateD = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj__wrapper]
@PartialApplication__42 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__ctladj__wrapper]
@MemoryManagement__27 = constant [2 x void (%Tuple*, i64)*] [void (%Tuple*, i64)* @MemoryManagement__27__RefCount, void (%Tuple*, i64)* @MemoryManagement__27__AliasCount]

@Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE = alias double (), double ()* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE__body

define %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__VQEMeasurementOperators__body(i64 %nQubits, %Array* %indices, i64 %termType) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 1)
  %nOps = alloca i64
  store i64 0, i64* %nOps
  %0 = icmp eq i64 %termType, 2
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  store i64 2, i64* %nOps
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = icmp eq i64 %termType, 3
  br i1 %1, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  store i64 8, i64* %nOps
  br label %continue__1

else__1:                                          ; preds = %test1__1
  store i64 1, i64* %nOps
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  %2 = load i64, i64* %nOps
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %4 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %5 = phi i64 [ 0, %continue__1 ], [ %10, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 0)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %5)
  %9 = bitcast i8* %8 to %Array**
  store %Array* %7, %Array** %9
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %ops = alloca %Array*
  store %Array* %3, %Array** %ops
  %11 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %17, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %12)
  %15 = bitcast i8* %14 to %Array**
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 1)
  %18 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %19 = phi i64 [ 0, %exit__2 ], [ %24, %exiting__3 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %19)
  %22 = bitcast i8* %21 to %Array**
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %24 = add i64 %19, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 1)
  %25 = icmp eq i64 %termType, 0
  %26 = icmp eq i64 %termType, 1
  %27 = or i1 %25, %26
  br i1 %27, label %then0__2, label %test1__2

then0__2:                                         ; preds = %exit__3
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %29 = sub i64 %nQubits, 1
  br label %header__4

test1__2:                                         ; preds = %exit__3
  %30 = icmp eq i64 %termType, 3
  br i1 %30, label %then1__2, label %test2__1

then1__2:                                         ; preds = %test1__2
  %compactOps = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 0)
  %32 = bitcast i8* %31 to %Array**
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 1)
  %34 = bitcast i8* %33 to %Array**
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 2)
  %36 = bitcast i8* %35 to %Array**
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 3)
  %38 = bitcast i8* %37 to %Array**
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 4)
  %40 = bitcast i8* %39 to %Array**
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 5)
  %42 = bitcast i8* %41 to %Array**
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 6)
  %44 = bitcast i8* %43 to %Array**
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 7)
  %46 = bitcast i8* %45 to %Array**
  %47 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 0)
  %49 = bitcast i8* %48 to i2*
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 1)
  %51 = bitcast i8* %50 to i2*
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 2)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 3)
  %55 = bitcast i8* %54 to i2*
  %56 = load i2, i2* @PauliX
  %57 = load i2, i2* @PauliX
  %58 = load i2, i2* @PauliX
  %59 = load i2, i2* @PauliX
  store i2 %56, i2* %49
  store i2 %57, i2* %51
  store i2 %58, i2* %53
  store i2 %59, i2* %55
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i2*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 2)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 3)
  %68 = bitcast i8* %67 to i2*
  %69 = load i2, i2* @PauliY
  %70 = load i2, i2* @PauliY
  %71 = load i2, i2* @PauliY
  %72 = load i2, i2* @PauliY
  store i2 %69, i2* %62
  store i2 %70, i2* %64
  store i2 %71, i2* %66
  store i2 %72, i2* %68
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 1)
  %77 = bitcast i8* %76 to i2*
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 2)
  %79 = bitcast i8* %78 to i2*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 3)
  %81 = bitcast i8* %80 to i2*
  %82 = load i2, i2* @PauliX
  %83 = load i2, i2* @PauliX
  %84 = load i2, i2* @PauliY
  %85 = load i2, i2* @PauliY
  store i2 %82, i2* %75
  store i2 %83, i2* %77
  store i2 %84, i2* %79
  store i2 %85, i2* %81
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i2*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i2*
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 2)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 3)
  %94 = bitcast i8* %93 to i2*
  %95 = load i2, i2* @PauliY
  %96 = load i2, i2* @PauliY
  %97 = load i2, i2* @PauliX
  %98 = load i2, i2* @PauliX
  store i2 %95, i2* %88
  store i2 %96, i2* %90
  store i2 %97, i2* %92
  store i2 %98, i2* %94
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  %108 = load i2, i2* @PauliX
  %109 = load i2, i2* @PauliY
  %110 = load i2, i2* @PauliX
  %111 = load i2, i2* @PauliY
  store i2 %108, i2* %101
  store i2 %109, i2* %103
  store i2 %110, i2* %105
  store i2 %111, i2* %107
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 2)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 3)
  %120 = bitcast i8* %119 to i2*
  %121 = load i2, i2* @PauliY
  %122 = load i2, i2* @PauliX
  %123 = load i2, i2* @PauliY
  %124 = load i2, i2* @PauliX
  store i2 %121, i2* %114
  store i2 %122, i2* %116
  store i2 %123, i2* %118
  store i2 %124, i2* %120
  %125 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 0)
  %127 = bitcast i8* %126 to i2*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 1)
  %129 = bitcast i8* %128 to i2*
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 2)
  %131 = bitcast i8* %130 to i2*
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 3)
  %133 = bitcast i8* %132 to i2*
  %134 = load i2, i2* @PauliY
  %135 = load i2, i2* @PauliX
  %136 = load i2, i2* @PauliX
  %137 = load i2, i2* @PauliY
  store i2 %134, i2* %127
  store i2 %135, i2* %129
  store i2 %136, i2* %131
  store i2 %137, i2* %133
  %138 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %138, i64 0)
  %140 = bitcast i8* %139 to i2*
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %138, i64 1)
  %142 = bitcast i8* %141 to i2*
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %138, i64 2)
  %144 = bitcast i8* %143 to i2*
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %138, i64 3)
  %146 = bitcast i8* %145 to i2*
  %147 = load i2, i2* @PauliX
  %148 = load i2, i2* @PauliY
  %149 = load i2, i2* @PauliY
  %150 = load i2, i2* @PauliX
  store i2 %147, i2* %140
  store i2 %148, i2* %142
  store i2 %149, i2* %144
  store i2 %150, i2* %146
  store %Array* %47, %Array** %32
  store %Array* %60, %Array** %34
  store %Array* %73, %Array** %36
  store %Array* %86, %Array** %38
  store %Array* %99, %Array** %40
  store %Array* %112, %Array** %42
  store %Array* %125, %Array** %44
  store %Array* %138, %Array** %46
  br label %header__6

test2__1:                                         ; preds = %test1__2
  %151 = icmp eq i64 %termType, 2
  br i1 %151, label %then2__1, label %continue__2

then2__1:                                         ; preds = %test2__1
  %compactOps__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps__1, i64 0)
  %153 = bitcast i8* %152 to %Array**
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps__1, i64 1)
  %155 = bitcast i8* %154 to %Array**
  %156 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 0)
  %158 = bitcast i8* %157 to i2*
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 1)
  %160 = bitcast i8* %159 to i2*
  %161 = load i2, i2* @PauliX
  %162 = load i2, i2* @PauliX
  store i2 %161, i2* %158
  store i2 %162, i2* %160
  %163 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %164 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %163, i64 0)
  %165 = bitcast i8* %164 to i2*
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %163, i64 1)
  %167 = bitcast i8* %166 to i2*
  %168 = load i2, i2* @PauliY
  %169 = load i2, i2* @PauliY
  store i2 %168, i2* %165
  store i2 %169, i2* %167
  store %Array* %156, %Array** %153
  store %Array* %163, %Array** %155
  br label %header__14

continue__2:                                      ; preds = %exit__19, %test2__1, %exit__13, %condContinue__1
  %170 = load %Array*, %Array** %ops
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 -1)
  %171 = call i64 @__quantum__rt__array_get_size_1d(%Array* %170)
  %172 = sub i64 %171, 1
  br label %header__20

header__4:                                        ; preds = %exiting__4, %then0__2
  %173 = phi i64 [ 0, %then0__2 ], [ %178, %exiting__4 ]
  %174 = icmp sle i64 %173, %29
  br i1 %174, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %175 = load i2, i2* @PauliI
  %176 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %173)
  %177 = bitcast i8* %176 to i2*
  store i2 %175, i2* %177
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %178 = add i64 %173, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %op = alloca %Array*
  store %Array* %28, %Array** %op
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i64 1)
  %179 = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %180 = sub i64 %179, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %181 = phi i64 [ 0, %exit__4 ], [ %191, %exiting__5 ]
  %182 = icmp sle i64 %181, %180
  br i1 %182, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %181)
  %184 = bitcast i8* %183 to i64*
  %idx = load i64, i64* %184
  %185 = load %Array*, %Array** %op
  call void @__quantum__rt__array_update_alias_count(%Array* %185, i64 -1)
  %186 = call %Array* @__quantum__rt__array_copy(%Array* %185, i1 false)
  %187 = icmp ne %Array* %185, %186
  %188 = load i2, i2* @PauliZ
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %186, i64 %idx)
  %190 = bitcast i8* %189 to i2*
  store i2 %188, i2* %190
  call void @__quantum__rt__array_update_reference_count(%Array* %186, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %186, i64 1)
  store %Array* %186, %Array** %op
  call void @__quantum__rt__array_update_reference_count(%Array* %185, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %186, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %191 = add i64 %181, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 -1)
  %192 = call %Array* @__quantum__rt__array_copy(%Array* %3, i1 false)
  %193 = icmp ne %Array* %3, %192
  %194 = load %Array*, %Array** %op
  %195 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %192, i64 0)
  %196 = bitcast i8* %195 to %Array**
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i64 1)
  %197 = load %Array*, %Array** %196
  call void @__quantum__rt__array_update_alias_count(%Array* %197, i64 -1)
  br i1 %193, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %exit__5
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %197, i64 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %exit__5
  store %Array* %194, %Array** %196
  call void @__quantum__rt__array_update_reference_count(%Array* %192, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %192, i64 1)
  store %Array* %192, %Array** %ops
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %197, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %192, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i64 -1)
  br label %continue__2

header__6:                                        ; preds = %exiting__6, %then1__2
  %198 = phi i64 [ 0, %then1__2 ], [ %203, %exiting__6 ]
  %199 = icmp sle i64 %198, 7
  br i1 %199, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %200 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %198)
  %201 = bitcast i8* %200 to %Array**
  %202 = load %Array*, %Array** %201
  call void @__quantum__rt__array_update_alias_count(%Array* %202, i64 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %203 = add i64 %198, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %compactOps, i64 1)
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %iOp = phi i64 [ 0, %exit__6 ], [ %210, %exiting__7 ]
  %204 = icmp sle i64 %iOp, 7
  br i1 %204, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %iOp)
  %206 = bitcast i8* %205 to %Array**
  %207 = load %Array*, %Array** %206
  %compactOp = alloca %Array*
  store %Array* %207, %Array** %compactOp
  call void @__quantum__rt__array_update_alias_count(%Array* %207, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %207, i64 1)
  %208 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %209 = sub i64 %nQubits, 1
  br label %header__8

exiting__7:                                       ; preds = %condContinue__2
  %210 = add i64 %iOp, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  br label %header__12

header__8:                                        ; preds = %exiting__8, %body__7
  %211 = phi i64 [ 0, %body__7 ], [ %216, %exiting__8 ]
  %212 = icmp sle i64 %211, %209
  br i1 %212, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %213 = load i2, i2* @PauliI
  %214 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %208, i64 %211)
  %215 = bitcast i8* %214 to i2*
  store i2 %213, i2* %215
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %216 = add i64 %211, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  %op__1 = alloca %Array*
  store %Array* %208, %Array** %op__1
  call void @__quantum__rt__array_update_alias_count(%Array* %208, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i64 1)
  %217 = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %218 = sub i64 %217, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %i = phi i64 [ 0, %exit__8 ], [ %230, %exiting__9 ]
  %219 = icmp sle i64 %i, %218
  br i1 %219, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %220 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %i)
  %221 = bitcast i8* %220 to i64*
  %idx__1 = load i64, i64* %221
  %222 = load %Array*, %Array** %compactOp
  %223 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %222, i64 %i)
  %224 = bitcast i8* %223 to i2*
  %pauli = load i2, i2* %224
  %225 = load %Array*, %Array** %op__1
  call void @__quantum__rt__array_update_alias_count(%Array* %225, i64 -1)
  %226 = call %Array* @__quantum__rt__array_copy(%Array* %225, i1 false)
  %227 = icmp ne %Array* %225, %226
  %228 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %226, i64 %idx__1)
  %229 = bitcast i8* %228 to i2*
  store i2 %pauli, i2* %229
  call void @__quantum__rt__array_update_reference_count(%Array* %226, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %226, i64 1)
  store %Array* %226, %Array** %op__1
  call void @__quantum__rt__array_update_reference_count(%Array* %225, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %226, i64 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %230 = add i64 %i, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  %231 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %232 = bitcast i8* %231 to i64*
  %233 = load i64, i64* %232
  %234 = add i64 %233, 1
  %235 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %236 = bitcast i8* %235 to i64*
  %237 = load i64, i64* %236
  %238 = sub i64 %237, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %i__1 = phi i64 [ %234, %exit__9 ], [ %246, %exiting__10 ]
  %239 = icmp sle i64 %i__1, %238
  br i1 %239, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %240 = load %Array*, %Array** %op__1
  call void @__quantum__rt__array_update_alias_count(%Array* %240, i64 -1)
  %241 = call %Array* @__quantum__rt__array_copy(%Array* %240, i1 false)
  %242 = icmp ne %Array* %240, %241
  %243 = load i2, i2* @PauliZ
  %244 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %241, i64 %i__1)
  %245 = bitcast i8* %244 to i2*
  store i2 %243, i2* %245
  call void @__quantum__rt__array_update_reference_count(%Array* %241, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %241, i64 1)
  store %Array* %241, %Array** %op__1
  call void @__quantum__rt__array_update_reference_count(%Array* %240, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %241, i64 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %246 = add i64 %i__1, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  %247 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 2)
  %248 = bitcast i8* %247 to i64*
  %249 = load i64, i64* %248
  %250 = add i64 %249, 1
  %251 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %252 = bitcast i8* %251 to i64*
  %253 = load i64, i64* %252
  %254 = sub i64 %253, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %i__2 = phi i64 [ %250, %exit__10 ], [ %262, %exiting__11 ]
  %255 = icmp sle i64 %i__2, %254
  br i1 %255, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %256 = load %Array*, %Array** %op__1
  call void @__quantum__rt__array_update_alias_count(%Array* %256, i64 -1)
  %257 = call %Array* @__quantum__rt__array_copy(%Array* %256, i1 false)
  %258 = icmp ne %Array* %256, %257
  %259 = load i2, i2* @PauliZ
  %260 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %257, i64 %i__2)
  %261 = bitcast i8* %260 to i2*
  store i2 %259, i2* %261
  call void @__quantum__rt__array_update_reference_count(%Array* %257, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %257, i64 1)
  store %Array* %257, %Array** %op__1
  call void @__quantum__rt__array_update_reference_count(%Array* %256, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %257, i64 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %262 = add i64 %i__2, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  %263 = load %Array*, %Array** %ops
  call void @__quantum__rt__array_update_alias_count(%Array* %263, i64 -1)
  %264 = call %Array* @__quantum__rt__array_copy(%Array* %263, i1 false)
  %265 = icmp ne %Array* %263, %264
  %266 = load %Array*, %Array** %op__1
  %267 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %264, i64 %iOp)
  %268 = bitcast i8* %267 to %Array**
  call void @__quantum__rt__array_update_reference_count(%Array* %266, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %266, i64 1)
  %269 = load %Array*, %Array** %268
  call void @__quantum__rt__array_update_alias_count(%Array* %269, i64 -1)
  br i1 %265, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %exit__11
  call void @__quantum__rt__array_update_reference_count(%Array* %266, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %269, i64 -1)
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %exit__11
  store %Array* %266, %Array** %268
  call void @__quantum__rt__array_update_reference_count(%Array* %264, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %264, i64 1)
  store %Array* %264, %Array** %ops
  %270 = load %Array*, %Array** %compactOp
  call void @__quantum__rt__array_update_alias_count(%Array* %270, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %266, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %263, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %269, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %264, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %270, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %266, i64 -1)
  br label %exiting__7

header__12:                                       ; preds = %exiting__12, %exit__7
  %271 = phi i64 [ 0, %exit__7 ], [ %276, %exiting__12 ]
  %272 = icmp sle i64 %271, 7
  br i1 %272, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %273 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %271)
  %274 = bitcast i8* %273 to %Array**
  %275 = load %Array*, %Array** %274
  call void @__quantum__rt__array_update_alias_count(%Array* %275, i64 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %276 = add i64 %271, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %compactOps, i64 -1)
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %277 = phi i64 [ 0, %exit__12 ], [ %282, %exiting__13 ]
  %278 = icmp sle i64 %277, 7
  br i1 %278, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %279 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %277)
  %280 = bitcast i8* %279 to %Array**
  %281 = load %Array*, %Array** %280
  call void @__quantum__rt__array_update_reference_count(%Array* %281, i64 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %282 = add i64 %277, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %compactOps, i64 -1)
  br label %continue__2

header__14:                                       ; preds = %exiting__14, %then2__1
  %283 = phi i64 [ 0, %then2__1 ], [ %288, %exiting__14 ]
  %284 = icmp sle i64 %283, 1
  br i1 %284, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %285 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps__1, i64 %283)
  %286 = bitcast i8* %285 to %Array**
  %287 = load %Array*, %Array** %286
  call void @__quantum__rt__array_update_alias_count(%Array* %287, i64 1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %288 = add i64 %283, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %compactOps__1, i64 1)
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %iOp__1 = phi i64 [ 0, %exit__14 ], [ %295, %exiting__15 ]
  %289 = icmp sle i64 %iOp__1, 1
  br i1 %289, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %290 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps__1, i64 %iOp__1)
  %291 = bitcast i8* %290 to %Array**
  %292 = load %Array*, %Array** %291
  %compactOp__1 = alloca %Array*
  store %Array* %292, %Array** %compactOp__1
  call void @__quantum__rt__array_update_alias_count(%Array* %292, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %292, i64 1)
  %293 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %294 = sub i64 %nQubits, 1
  br label %header__16

exiting__15:                                      ; preds = %condContinue__3
  %295 = add i64 %iOp__1, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  br label %header__18

header__16:                                       ; preds = %exiting__16, %body__15
  %296 = phi i64 [ 0, %body__15 ], [ %301, %exiting__16 ]
  %297 = icmp sle i64 %296, %294
  br i1 %297, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %298 = load i2, i2* @PauliI
  %299 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %293, i64 %296)
  %300 = bitcast i8* %299 to i2*
  store i2 %298, i2* %300
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %301 = add i64 %296, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  %op__2 = alloca %Array*
  store %Array* %293, %Array** %op__2
  call void @__quantum__rt__array_update_alias_count(%Array* %293, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %293, i64 1)
  %nIndices = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  call void @__quantum__rt__array_update_alias_count(%Array* %293, i64 -1)
  %302 = call %Array* @__quantum__rt__array_copy(%Array* %293, i1 false)
  %303 = icmp ne %Array* %293, %302
  %304 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %292, i64 0)
  %305 = bitcast i8* %304 to i2*
  %306 = load i2, i2* %305
  %307 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %308 = bitcast i8* %307 to i64*
  %309 = load i64, i64* %308
  %310 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %302, i64 %309)
  %311 = bitcast i8* %310 to i2*
  store i2 %306, i2* %311
  call void @__quantum__rt__array_update_reference_count(%Array* %302, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %302, i64 1)
  store %Array* %302, %Array** %op__2
  call void @__quantum__rt__array_update_alias_count(%Array* %302, i64 -1)
  %312 = call %Array* @__quantum__rt__array_copy(%Array* %302, i1 false)
  %313 = icmp ne %Array* %302, %312
  %314 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %292, i64 1)
  %315 = bitcast i8* %314 to i2*
  %316 = load i2, i2* %315
  %317 = sub i64 %nIndices, 1
  %318 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %317)
  %319 = bitcast i8* %318 to i64*
  %320 = load i64, i64* %319
  %321 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %312, i64 %320)
  %322 = bitcast i8* %321 to i2*
  store i2 %316, i2* %322
  call void @__quantum__rt__array_update_reference_count(%Array* %312, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %312, i64 1)
  store %Array* %312, %Array** %op__2
  %323 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %324 = bitcast i8* %323 to i64*
  %325 = load i64, i64* %324
  %326 = add i64 %325, 1
  %327 = sub i64 %nIndices, 1
  %328 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %327)
  %329 = bitcast i8* %328 to i64*
  %330 = load i64, i64* %329
  %331 = sub i64 %330, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %i__3 = phi i64 [ %326, %exit__16 ], [ %339, %exiting__17 ]
  %332 = icmp sle i64 %i__3, %331
  br i1 %332, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %333 = load %Array*, %Array** %op__2
  call void @__quantum__rt__array_update_alias_count(%Array* %333, i64 -1)
  %334 = call %Array* @__quantum__rt__array_copy(%Array* %333, i1 false)
  %335 = icmp ne %Array* %333, %334
  %336 = load i2, i2* @PauliZ
  %337 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %334, i64 %i__3)
  %338 = bitcast i8* %337 to i2*
  store i2 %336, i2* %338
  call void @__quantum__rt__array_update_reference_count(%Array* %334, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %334, i64 1)
  store %Array* %334, %Array** %op__2
  call void @__quantum__rt__array_update_reference_count(%Array* %333, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %334, i64 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %339 = add i64 %i__3, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  %340 = icmp eq i64 %nIndices, 4
  br i1 %340, label %then0__3, label %continue__3

then0__3:                                         ; preds = %exit__17
  %341 = load %Array*, %Array** %op__2
  call void @__quantum__rt__array_update_alias_count(%Array* %341, i64 -1)
  %342 = call %Array* @__quantum__rt__array_copy(%Array* %341, i1 false)
  %343 = icmp ne %Array* %341, %342
  %344 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %345 = bitcast i8* %344 to i64*
  %346 = load i64, i64* %345
  %347 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %348 = bitcast i8* %347 to i64*
  %349 = load i64, i64* %348
  %350 = icmp slt i64 %346, %349
  %351 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %352 = bitcast i8* %351 to i64*
  %353 = load i64, i64* %352
  %354 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %355 = bitcast i8* %354 to i64*
  %356 = load i64, i64* %355
  %357 = icmp slt i64 %353, %356
  %358 = and i1 %350, %357
  %359 = load i2, i2* @PauliI
  %360 = load i2, i2* @PauliZ
  %361 = select i1 %358, i2 %359, i2 %360
  %362 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %363 = bitcast i8* %362 to i64*
  %364 = load i64, i64* %363
  %365 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %342, i64 %364)
  %366 = bitcast i8* %365 to i2*
  store i2 %361, i2* %366
  call void @__quantum__rt__array_update_reference_count(%Array* %342, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %342, i64 1)
  store %Array* %342, %Array** %op__2
  call void @__quantum__rt__array_update_reference_count(%Array* %341, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %342, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %exit__17
  %367 = load %Array*, %Array** %ops
  call void @__quantum__rt__array_update_alias_count(%Array* %367, i64 -1)
  %368 = call %Array* @__quantum__rt__array_copy(%Array* %367, i1 false)
  %369 = icmp ne %Array* %367, %368
  %370 = load %Array*, %Array** %op__2
  %371 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %368, i64 %iOp__1)
  %372 = bitcast i8* %371 to %Array**
  call void @__quantum__rt__array_update_reference_count(%Array* %370, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %370, i64 1)
  %373 = load %Array*, %Array** %372
  call void @__quantum__rt__array_update_alias_count(%Array* %373, i64 -1)
  br i1 %369, label %condContinue__3, label %condFalse__3

condFalse__3:                                     ; preds = %continue__3
  call void @__quantum__rt__array_update_reference_count(%Array* %370, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %373, i64 -1)
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %continue__3
  store %Array* %370, %Array** %372
  call void @__quantum__rt__array_update_reference_count(%Array* %368, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %368, i64 1)
  store %Array* %368, %Array** %ops
  call void @__quantum__rt__array_update_alias_count(%Array* %292, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %370, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %293, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %293, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %302, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %302, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %312, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %367, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %373, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %368, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %292, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %370, i64 -1)
  br label %exiting__15

header__18:                                       ; preds = %exiting__18, %exit__15
  %374 = phi i64 [ 0, %exit__15 ], [ %379, %exiting__18 ]
  %375 = icmp sle i64 %374, 1
  br i1 %375, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %376 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps__1, i64 %374)
  %377 = bitcast i8* %376 to %Array**
  %378 = load %Array*, %Array** %377
  call void @__quantum__rt__array_update_alias_count(%Array* %378, i64 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %379 = add i64 %374, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %compactOps__1, i64 -1)
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %380 = phi i64 [ 0, %exit__18 ], [ %385, %exiting__19 ]
  %381 = icmp sle i64 %380, 1
  br i1 %381, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %382 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps__1, i64 %380)
  %383 = bitcast i8* %382 to %Array**
  %384 = load %Array*, %Array** %383
  call void @__quantum__rt__array_update_reference_count(%Array* %384, i64 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %385 = add i64 %380, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_reference_count(%Array* %compactOps__1, i64 -1)
  br label %continue__2

header__20:                                       ; preds = %exiting__20, %continue__2
  %386 = phi i64 [ 0, %continue__2 ], [ %391, %exiting__20 ]
  %387 = icmp sle i64 %386, %172
  br i1 %387, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %388 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %170, i64 %386)
  %389 = bitcast i8* %388 to %Array**
  %390 = load %Array*, %Array** %389
  call void @__quantum__rt__array_update_alias_count(%Array* %390, i64 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %391 = add i64 %386, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %170, i64 -1)
  %392 = sub i64 %2, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %393 = phi i64 [ 0, %exit__20 ], [ %398, %exiting__21 ]
  %394 = icmp sle i64 %393, %392
  br i1 %394, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %395 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %393)
  %396 = bitcast i8* %395 to %Array**
  %397 = load %Array*, %Array** %396
  call void @__quantum__rt__array_update_reference_count(%Array* %397, i64 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %398 = add i64 %393, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  ret %Array* %170
}

declare void @__quantum__rt__array_update_alias_count(%Array*, i64)

declare %Array* @__quantum__rt__array_create_1d(i32, i64)

declare i8* @__quantum__rt__array_get_element_ptr_1d(%Array*, i64)

declare void @__quantum__rt__array_update_reference_count(%Array*, i64)

declare i64 @__quantum__rt__array_get_size_1d(%Array*)

declare %Array* @__quantum__rt__array_copy(%Array*, i1)

define %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__ExpandedCoefficients__body(%Array* %coeff, i64 %termType) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  %nCoeffs = alloca i64
  store i64 0, i64* %nCoeffs
  %0 = icmp eq i64 %termType, 2
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  store i64 2, i64* %nCoeffs
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = icmp eq i64 %termType, 3
  br i1 %1, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  store i64 8, i64* %nCoeffs
  br label %continue__1

else__1:                                          ; preds = %test1__1
  store i64 1, i64* %nCoeffs
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  %2 = load i64, i64* %nCoeffs
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %4 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %5 = phi i64 [ 0, %continue__1 ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %5)
  %8 = bitcast i8* %7 to double*
  store double 0.000000e+00, double* %8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %coeffs = alloca %Array*
  store %Array* %3, %Array** %coeffs
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 1)
  %10 = icmp eq i64 %termType, 0
  %11 = icmp eq i64 %termType, 1
  %12 = or i1 %10, %11
  br i1 %12, label %then0__2, label %test1__2

then0__2:                                         ; preds = %exit__1
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 -1)
  %13 = call %Array* @__quantum__rt__array_copy(%Array* %3, i1 false)
  %14 = icmp ne %Array* %3, %13
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %19 = bitcast i8* %18 to double*
  store double %17, double* %19
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  store %Array* %13, %Array** %coeffs
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 -1)
  br label %continue__2

test1__2:                                         ; preds = %exit__1
  %20 = icmp eq i64 %termType, 2
  %21 = icmp eq i64 %termType, 3
  %22 = or i1 %20, %21
  br i1 %22, label %then1__2, label %continue__2

then1__2:                                         ; preds = %test1__2
  %23 = sub i64 %2, 1
  br label %header__2

continue__2:                                      ; preds = %exit__2, %test1__2, %then0__2
  %24 = load %Array*, %Array** %coeffs
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  ret %Array* %24

header__2:                                        ; preds = %exiting__2, %then1__2
  %i = phi i64 [ 0, %then1__2 ], [ %35, %exiting__2 ]
  %25 = icmp sle i64 %i, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = load %Array*, %Array** %coeffs
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i64 -1)
  %27 = call %Array* @__quantum__rt__array_copy(%Array* %26, i1 false)
  %28 = icmp ne %Array* %26, %27
  %29 = udiv i64 %i, 2
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 %29)
  %31 = bitcast i8* %30 to double*
  %32 = load double, double* %31
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %i)
  %34 = bitcast i8* %33 to double*
  store double %32, double* %34
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i64 1)
  store %Array* %27, %Array** %coeffs
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %35 = add i64 %i, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  br label %continue__2
}

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__SumTermExpectation__body({ i64, %Array* }* %inputState, %Array* %ops, %Array* %coeffs, i64 %nQubits, i64 %nSamples) {
entry:
  %0 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %1 = load %Array*, %Array** %0
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { double, double }*, %Array* }**
  %8 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %7
  %9 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 0
  %10 = load { double, double }*, { double, double }** %9
  %11 = bitcast { double, double }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  %14 = bitcast { { double, double }*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %16 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i64 1)
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ops)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %19)
  %22 = bitcast i8* %21 to %Array**
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeffs, i64 1)
  %jwTermEnergy = alloca double
  store double 0.000000e+00, double* %jwTermEnergy
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coeffs)
  %26 = sub i64 %25, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %i = phi i64 [ 0, %exit__2 ], [ %40, %exiting__3 ]
  %27 = icmp sle i64 %i, %26
  br i1 %27, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeffs, i64 %i)
  %29 = bitcast i8* %28 to double*
  %coeff = load double, double* %29
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %i)
  %31 = bitcast i8* %30 to %Array**
  %op = load %Array*, %Array** %31
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 1)
  %32 = fcmp oge double %coeff, 1.000000e-10
  %33 = fcmp ole double %coeff, -1.000000e-10
  %34 = or i1 %32, %33
  br i1 %34, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %termExpectation = call double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__TermExpectation__body({ i64, %Array* }* %inputState, %Array* %op, i64 %nQubits, i64 %nSamples)
  %35 = load double, double* %jwTermEnergy
  %36 = fmul double 2.000000e+00, %termExpectation
  %37 = fsub double %36, 1.000000e+00
  %38 = fmul double %37, %coeff
  %39 = fadd double %35, %38
  store double %39, double* %jwTermEnergy
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__3
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %40 = add i64 %i, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %41 = load double, double* %jwTermEnergy
  %42 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %43 = phi i64 [ 0, %exit__3 ], [ %54, %exiting__4 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %43)
  %46 = bitcast i8* %45 to { { double, double }*, %Array* }**
  %47 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %46
  %48 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %47, i64 0, i32 0
  %49 = load { double, double }*, { double, double }** %48
  %50 = bitcast { double, double }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i64 -1)
  %51 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %47, i64 0, i32 1
  %52 = load %Array*, %Array** %51
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i64 -1)
  %53 = bitcast { { double, double }*, %Array* }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %54 = add i64 %43, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i64 -1)
  %55 = sub i64 %17, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %56 = phi i64 [ 0, %exit__4 ], [ %61, %exiting__5 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %60 = load %Array*, %Array** %59
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %61 = add i64 %56, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeffs, i64 -1)
  ret double %41
}

declare void @__quantum__rt__tuple_update_alias_count(%Tuple*, i64)

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__TermExpectation__body({ i64, %Array* }* %inputState, %Array* %measOp, i64 %nQubits, i64 %nSamples) {
entry:
  %0 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %1 = load %Array*, %Array** %0
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { double, double }*, %Array* }**
  %8 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %7
  %9 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 0
  %10 = load { double, double }*, { double, double }** %9
  %11 = bitcast { double, double }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  %14 = bitcast { { double, double }*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %16 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %measOp, i64 1)
  %nUp = alloca i64
  store i64 0, i64* %nUp
  %17 = sub i64 %nSamples, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxMeasurement = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %18 = icmp sle i64 %idxMeasurement, %17
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %register = call %Array* @__quantum__rt__qubit_allocate_array(i64 %nQubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %inputState, %Array* %register)
  %result = call %Result* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__JointMeasure__body(%Array* %measOp, %Array* %register)
  %19 = load %Result*, %Result** @ResultZero
  %20 = call i1 @__quantum__rt__result_equal(%Result* %result, %Result* %19)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %21 = load i64, i64* %nUp
  %22 = add i64 %21, 1
  store i64 %22, i64* %nUp
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  %23 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %24 = sub i64 %23, 1
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %25 = add i64 %idxMeasurement, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %26 = load i64, i64* %nUp
  %27 = sitofp i64 %26 to double
  %28 = sitofp i64 %nSamples to double
  %29 = fdiv double %27, %28
  %30 = sub i64 %2, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %continue__1
  %31 = phi i64 [ 0, %continue__1 ], [ %35, %exiting__3 ]
  %32 = icmp sle i64 %31, %24
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %31)
  %34 = bitcast i8* %33 to %Qubit**
  %q = load %Qubit*, %Qubit** %34
  %r = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %q)
  call void @__quantum__rt__result_update_reference_count(%Result* %r, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__qubit_release_array(%Array* %register)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %register, i64 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i64 -1)
  br label %exiting__2

header__4:                                        ; preds = %exiting__4, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %47, %exiting__4 ]
  %37 = icmp sle i64 %36, %30
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %36)
  %39 = bitcast i8* %38 to { { double, double }*, %Array* }**
  %40 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %39
  %41 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %40, i64 0, i32 0
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i64 -1)
  %44 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %40, i64 0, i32 1
  %45 = load %Array*, %Array** %44
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i64 -1)
  %46 = bitcast { { double, double }*, %Array* }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %47 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %measOp, i64 -1)
  ret double %29
}

declare %Qubit* @__quantum__rt__qubit_allocate()

declare %Array* @__quantum__rt__qubit_allocate_array(i64)

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %stateData, %Array* %qubits) {
entry:
  %0 = getelementptr { i64, %Array* }, { i64, %Array* }* %stateData, i64 0, i32 1
  %terms = load %Array*, %Array** %0
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %terms)
  %1 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i64 1)
  %14 = bitcast { i64, %Array* }* %stateData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %15 = getelementptr { i64, %Array* }, { i64, %Array* }* %stateData, i64 0, i32 0
  %stateType = load i64, i64* %15
  %16 = sub i64 %nTerms, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %17)
  %20 = bitcast i8* %19 to { { double, double }*, %Array* }**
  %21 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %20
  %22 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i64 0, i32 0
  %23 = load { double, double }*, { double, double }** %22
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 1)
  %25 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i64 0, i32 1
  %26 = load %Array*, %Array** %25
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i64 1)
  %27 = bitcast { { double, double }*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i64 1)
  %29 = icmp eq i64 %stateType, 2
  br i1 %29, label %then0__1, label %test1__1

then0__1:                                         ; preds = %exit__2
  %30 = icmp eq i64 %nTerms, 0
  br i1 %30, label %then0__2, label %test1__2

then0__2:                                         ; preds = %then0__1
  br label %continue__2

test1__2:                                         ; preds = %then0__1
  %31 = icmp eq i64 %nTerms, 1
  br i1 %31, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 0)
  %33 = bitcast i8* %32 to { { double, double }*, %Array* }**
  %34 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %33
  %35 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i64 0, i32 0
  %complex = load { double, double }*, { double, double }** %35
  %36 = bitcast { double, double }* %complex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i64 1)
  %37 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i64 0, i32 1
  %qubitIndices = load %Array*, %Array** %37
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  br label %continue__2

else__1:                                          ; preds = %test1__2
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %38, %Array* %terms, %Array* %qubits)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %38, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then1__1, %then0__2
  br label %continue__1

test1__1:                                         ; preds = %exit__2
  %39 = icmp eq i64 %stateType, 3
  br i1 %39, label %then1__2, label %continue__1

then1__2:                                         ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { %Callable*, i64, %Array* }*
  %42 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i64 0, i32 0
  %43 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i64 0, i32 1
  %44 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i64 0, i32 2
  %45 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = sub i64 %nTerms, 1
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %49)
  %51 = bitcast i8* %50 to { { double, double }*, %Array* }**
  %52 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %51
  store { { double, double }*, %Array* }* %52, { { double, double }*, %Array* }** %48
  %53 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %52, i64 0, i32 0
  %54 = load { double, double }*, { double, double }** %53
  %55 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %52, i64 0, i32 1
  %56 = load %Array*, %Array** %55
  %57 = bitcast { double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i64 1)
  %58 = bitcast { { double, double }*, %Array* }* %52 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i64 1)
  store %Callable* %45, %Callable** %42
  store i64 2, i64* %43
  store %Array* %46, %Array** %44
  %referenceState = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2, [2 x void (%Tuple*, i64)*]* @MemoryManagement__2, %Tuple* %40)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %referenceState, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %referenceState, i64 1)
  %59 = sub i64 %nTerms, 2
  %60 = load %Range, %Range* @EmptyRange
  %61 = insertvalue %Range %60, i64 0, 0
  %62 = insertvalue %Range %61, i64 1, 1
  %63 = insertvalue %Range %62, i64 %59, 2
  %64 = call %Array* @__quantum__rt__array_slice_1d(%Array* %terms, %Range %63, i1 false)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %referenceState, %Array* %64, double 1.000000e+00, %Array* %qubits)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %referenceState, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %referenceState, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %referenceState, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %referenceState, i64 -1)
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__3

continue__1:                                      ; preds = %exit__3, %test1__1, %continue__2
  %67 = sub i64 %nTerms, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then1__2
  %68 = phi i64 [ 0, %then1__2 ], [ %79, %exiting__3 ]
  %69 = icmp sle i64 %68, %66
  br i1 %69, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %68)
  %71 = bitcast i8* %70 to { { double, double }*, %Array* }**
  %72 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %71
  %73 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %72, i64 0, i32 0
  %74 = load { double, double }*, { double, double }** %73
  %75 = bitcast { double, double }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %75, i64 -1)
  %76 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %72, i64 0, i32 1
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i64 -1)
  %78 = bitcast { { double, double }*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %79 = add i64 %68, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i64 -1)
  br label %continue__1

header__4:                                        ; preds = %exiting__4, %continue__1
  %80 = phi i64 [ 0, %continue__1 ], [ %91, %exiting__4 ]
  %81 = icmp sle i64 %80, %67
  br i1 %81, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %80)
  %83 = bitcast i8* %82 to { { double, double }*, %Array* }**
  %84 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %83
  %85 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %84, i64 0, i32 0
  %86 = load { double, double }*, { double, double }** %85
  %87 = bitcast { double, double }* %86 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %87, i64 -1)
  %88 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %84, i64 0, i32 1
  %89 = load %Array*, %Array** %88
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i64 -1)
  %90 = bitcast { { double, double }*, %Array* }* %84 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %90, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %91 = add i64 %80, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  %92 = sub i64 %nTerms, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %93 = phi i64 [ 0, %exit__4 ], [ %104, %exiting__5 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %93)
  %96 = bitcast i8* %95 to { { double, double }*, %Array* }**
  %97 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %96
  %98 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %97, i64 0, i32 0
  %99 = load { double, double }*, { double, double }** %98
  %100 = bitcast { double, double }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %100, i64 -1)
  %101 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %97, i64 0, i32 1
  %102 = load %Array*, %Array** %101
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i64 -1)
  %103 = bitcast { { double, double }*, %Array* }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %104 = add i64 %93, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i64 -1)
  ret void
}

define %Result* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__JointMeasure__body(%Array* %ops, %Array* %qbs) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qbs, i64 1)
  %aux = call %Qubit* @__quantum__rt__qubit_allocate()
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qbs)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %i = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %2 = icmp sle i64 %i, %1
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %i)
  %4 = bitcast i8* %3 to i2*
  %op = load i2, i2* %4
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qbs, i64 %i)
  %6 = bitcast i8* %5 to %Qubit**
  %qb = load %Qubit*, %Qubit** %6
  %7 = load i2, i2* @PauliX
  %8 = icmp eq i2 %op, %7
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__qis__h__body(%Qubit* %qb)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %qb, %Qubit* %aux)
  call void @__quantum__qis__h__body(%Qubit* %qb)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %9 = load i2, i2* @PauliY
  %10 = icmp eq i2 %op, %9
  br i1 %10, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__s__body(%Qubit* %qb)
  call void @__quantum__qis__h__body(%Qubit* %qb)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %qb, %Qubit* %aux)
  call void @__quantum__qis__h__body(%Qubit* %qb)
  call void @__quantum__qis__s__body(%Qubit* %qb)
  call void @__quantum__qis__z__body(%Qubit* %qb)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %11 = load i2, i2* @PauliZ
  %12 = icmp eq i2 %op, %11
  br i1 %12, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %qb, %Qubit* %aux)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %i, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %aux)
  call void @__quantum__rt__qubit_release(%Qubit* %aux)
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qbs, i64 -1)
  ret %Result* %14
}

declare i1 @__quantum__rt__result_equal(%Result*, %Result*)

define %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit) {
entry:
  %bases = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = load i2, i2* @PauliZ
  store i2 %2, i2* %1
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i64 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  store %Qubit* %qubit, %Qubit** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %5 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  ret %Result* %5
}

declare void @__quantum__rt__result_update_reference_count(%Result*, i64)

declare void @__quantum__rt__qubit_release_array(%Array*)

declare void @__quantum__qis__h__body(%Qubit*)

define void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target) {
entry:
  %__controlQubits__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__controlQubits__, i64 0)
  %1 = bitcast i8* %0 to %Qubit**
  store %Qubit* %control, %Qubit** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

declare void @__quantum__qis__s__body(%Qubit*)

declare void @__quantum__qis__z__body(%Qubit*)

declare void @__quantum__rt__qubit_release(%Qubit*)

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE__body() #0 {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to { %Array*, %Array* }**
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 1)
  %4 = bitcast i8* %3 to { %Array*, %Array* }**
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 2)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 3)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %11 = bitcast i8* %10 to i64*
  store i64 0, i64* %11
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 0)
  %14 = bitcast i8* %13 to double*
  store double 0x3FC5E9EC780DD8B0, double* %14
  %15 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %9, %Array* %12)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i64 -1)
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to i64*
  store i64 1, i64* %18
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to double*
  store double 0x3FC5E9EC780DD8B0, double* %21
  %22 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %16, %Array* %19)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i64 -1)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 0)
  %25 = bitcast i8* %24 to i64*
  store i64 2, i64* %25
  %26 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 0)
  %28 = bitcast i8* %27 to double*
  store double 0xBFCC8498CDE41B6A, double* %28
  %29 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %23, %Array* %26)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i64 -1)
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i64*
  store i64 3, i64* %32
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to double*
  store double 0xBFCC8498CDE41B6A, double* %35
  %36 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %30, %Array* %33)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i64 -1)
  store { %Array*, %Array* }* %15, { %Array*, %Array* }** %2
  store { %Array*, %Array* }* %22, { %Array*, %Array* }** %4
  store { %Array*, %Array* }* %29, { %Array*, %Array* }** %6
  store { %Array*, %Array* }* %36, { %Array*, %Array* }** %8
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 6)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to { %Array*, %Array* }**
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 1)
  %41 = bitcast i8* %40 to { %Array*, %Array* }**
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 2)
  %43 = bitcast i8* %42 to { %Array*, %Array* }**
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 3)
  %45 = bitcast i8* %44 to { %Array*, %Array* }**
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 4)
  %47 = bitcast i8* %46 to { %Array*, %Array* }**
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 5)
  %49 = bitcast i8* %48 to { %Array*, %Array* }**
  %50 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 0)
  %52 = bitcast i8* %51 to i64*
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 1)
  %54 = bitcast i8* %53 to i64*
  store i64 0, i64* %52
  store i64 1, i64* %54
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to double*
  store double 0x3FC59572B12B0E54, double* %57
  %58 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %50, %Array* %55)
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i64 -1)
  %59 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 0)
  %61 = bitcast i8* %60 to i64*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 1)
  %63 = bitcast i8* %62 to i64*
  store i64 0, i64* %61
  store i64 2, i64* %63
  %64 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 0)
  %66 = bitcast i8* %65 to double*
  store double 0x3FBEDC1CB9A7B498, double* %66
  %67 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %59, %Array* %64)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i64 -1)
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 0)
  %70 = bitcast i8* %69 to i64*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 1)
  %72 = bitcast i8* %71 to i64*
  store i64 0, i64* %70
  store i64 3, i64* %72
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to double*
  store double 0x3FC53B29D7F34F20, double* %75
  %76 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %68, %Array* %73)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i64 -1)
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i64*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 1)
  %81 = bitcast i8* %80 to i64*
  store i64 1, i64* %79
  store i64 2, i64* %81
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to double*
  store double 0x3FC53B29D7F34F20, double* %84
  %85 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %77, %Array* %82)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %82, i64 -1)
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i64*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i64*
  store i64 1, i64* %88
  store i64 3, i64* %90
  %91 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 0)
  %93 = bitcast i8* %92 to double*
  store double 0x3FBEDC1CB9A7B498, double* %93
  %94 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %86, %Array* %91)
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i64 -1)
  %95 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 0)
  %97 = bitcast i8* %96 to i64*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 1)
  %99 = bitcast i8* %98 to i64*
  store i64 2, i64* %97
  store i64 3, i64* %99
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to double*
  store double 0x3FC65115A1A7DAFB, double* %102
  %103 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %95, %Array* %100)
  call void @__quantum__rt__array_update_reference_count(%Array* %95, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i64 -1)
  store { %Array*, %Array* }* %58, { %Array*, %Array* }** %39
  store { %Array*, %Array* }* %67, { %Array*, %Array* }** %41
  store { %Array*, %Array* }* %76, { %Array*, %Array* }** %43
  store { %Array*, %Array* }* %85, { %Array*, %Array* }** %45
  store { %Array*, %Array* }* %94, { %Array*, %Array* }** %47
  store { %Array*, %Array* }* %103, { %Array*, %Array* }** %49
  %104 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to { %Array*, %Array* }**
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i64*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i64*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i64*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i64*
  store i64 0, i64* %110
  store i64 1, i64* %112
  store i64 2, i64* %114
  store i64 3, i64* %116
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to double*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to double*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to double*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to double*
  store double 0.000000e+00, double* %119
  store double 0xBFA7346DEC7DD351, double* %121
  store double 0.000000e+00, double* %123
  store double 0x3FA7346DEC7DD351, double* %125
  %126 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %108, %Array* %117)
  call void @__quantum__rt__array_update_reference_count(%Array* %108, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %117, i64 -1)
  store { %Array*, %Array* }* %126, { %Array*, %Array* }** %107
  %hamiltonian = call { %Array*, %Array*, %Array*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JWOptimizedHTerms__body(%Array* %0, %Array* %37, %Array* %104, %Array* %105)
  %127 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 0
  %128 = load %Array*, %Array** %127
  %129 = call i64 @__quantum__rt__array_get_size_1d(%Array* %128)
  %130 = sub i64 %129, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %131 = phi i64 [ 0, %entry ], [ %141, %exiting__1 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %131)
  %134 = bitcast i8* %133 to { %Array*, %Array* }**
  %135 = load { %Array*, %Array* }*, { %Array*, %Array* }** %134
  %136 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %135, i64 0, i32 0
  %137 = load %Array*, %Array** %136
  call void @__quantum__rt__array_update_alias_count(%Array* %137, i64 1)
  %138 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %135, i64 0, i32 1
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_update_alias_count(%Array* %139, i64 1)
  %140 = bitcast { %Array*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %140, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %141 = add i64 %131, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %128, i64 1)
  %142 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 1
  %143 = load %Array*, %Array** %142
  %144 = call i64 @__quantum__rt__array_get_size_1d(%Array* %143)
  %145 = sub i64 %144, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %146 = phi i64 [ 0, %exit__1 ], [ %156, %exiting__2 ]
  %147 = icmp sle i64 %146, %145
  br i1 %147, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 %146)
  %149 = bitcast i8* %148 to { %Array*, %Array* }**
  %150 = load { %Array*, %Array* }*, { %Array*, %Array* }** %149
  %151 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %150, i64 0, i32 0
  %152 = load %Array*, %Array** %151
  call void @__quantum__rt__array_update_alias_count(%Array* %152, i64 1)
  %153 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %150, i64 0, i32 1
  %154 = load %Array*, %Array** %153
  call void @__quantum__rt__array_update_alias_count(%Array* %154, i64 1)
  %155 = bitcast { %Array*, %Array* }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %155, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %156 = add i64 %146, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i64 1)
  %157 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 2
  %158 = load %Array*, %Array** %157
  %159 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %160 = sub i64 %159, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %161 = phi i64 [ 0, %exit__2 ], [ %171, %exiting__3 ]
  %162 = icmp sle i64 %161, %160
  br i1 %162, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %161)
  %164 = bitcast i8* %163 to { %Array*, %Array* }**
  %165 = load { %Array*, %Array* }*, { %Array*, %Array* }** %164
  %166 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %165, i64 0, i32 0
  %167 = load %Array*, %Array** %166
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i64 1)
  %168 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %165, i64 0, i32 1
  %169 = load %Array*, %Array** %168
  call void @__quantum__rt__array_update_alias_count(%Array* %169, i64 1)
  %170 = bitcast { %Array*, %Array* }* %165 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %170, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %171 = add i64 %161, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %158, i64 1)
  %172 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 3
  %173 = load %Array*, %Array** %172
  %174 = call i64 @__quantum__rt__array_get_size_1d(%Array* %173)
  %175 = sub i64 %174, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %176 = phi i64 [ 0, %exit__3 ], [ %186, %exiting__4 ]
  %177 = icmp sle i64 %176, %175
  br i1 %177, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %173, i64 %176)
  %179 = bitcast i8* %178 to { %Array*, %Array* }**
  %180 = load { %Array*, %Array* }*, { %Array*, %Array* }** %179
  %181 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %180, i64 0, i32 0
  %182 = load %Array*, %Array** %181
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i64 1)
  %183 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %180, i64 0, i32 1
  %184 = load %Array*, %Array** %183
  call void @__quantum__rt__array_update_alias_count(%Array* %184, i64 1)
  %185 = bitcast { %Array*, %Array* }* %180 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %185, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %186 = add i64 %176, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %173, i64 1)
  %187 = bitcast { %Array*, %Array*, %Array*, %Array* }* %hamiltonian to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %187, i64 1)
  %188 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %inputState = bitcast %Tuple* %188 to { i64, %Array* }*
  %189 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 0
  %190 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %191 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 0)
  %193 = bitcast i8* %192 to { { double, double }*, %Array* }**
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 1)
  %195 = bitcast i8* %194 to { { double, double }*, %Array* }**
  %196 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 2)
  %197 = bitcast i8* %196 to { { double, double }*, %Array* }**
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 3)
  %199 = bitcast i8* %198 to { { double, double }*, %Array* }**
  %200 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %201 = bitcast %Tuple* %200 to { double, double }*
  %202 = getelementptr { double, double }, { double, double }* %201, i64 0, i32 0
  %203 = getelementptr { double, double }, { double, double }* %201, i64 0, i32 1
  store double 1.000000e-03, double* %202
  store double 0.000000e+00, double* %203
  %204 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %204, i64 0)
  %206 = bitcast i8* %205 to i64*
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %204, i64 1)
  %208 = bitcast i8* %207 to i64*
  store i64 2, i64* %206
  store i64 0, i64* %208
  %209 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %201, %Array* %204)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %200, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %204, i64 -1)
  %210 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %211 = bitcast %Tuple* %210 to { double, double }*
  %212 = getelementptr { double, double }, { double, double }* %211, i64 0, i32 0
  %213 = getelementptr { double, double }, { double, double }* %211, i64 0, i32 1
  store double -1.000000e-03, double* %212
  store double 0.000000e+00, double* %213
  %214 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %214, i64 0)
  %216 = bitcast i8* %215 to i64*
  %217 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %214, i64 1)
  %218 = bitcast i8* %217 to i64*
  store i64 3, i64* %216
  store i64 1, i64* %218
  %219 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %211, %Array* %214)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %210, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %214, i64 -1)
  %220 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %221 = bitcast %Tuple* %220 to { double, double }*
  %222 = getelementptr { double, double }, { double, double }* %221, i64 0, i32 0
  %223 = getelementptr { double, double }, { double, double }* %221, i64 0, i32 1
  store double 1.000000e-03, double* %222
  store double 0.000000e+00, double* %223
  %224 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %225 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 0)
  %226 = bitcast i8* %225 to i64*
  %227 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 1)
  %228 = bitcast i8* %227 to i64*
  %229 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 2)
  %230 = bitcast i8* %229 to i64*
  %231 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 3)
  %232 = bitcast i8* %231 to i64*
  store i64 2, i64* %226
  store i64 3, i64* %228
  store i64 1, i64* %230
  store i64 0, i64* %232
  %233 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %221, %Array* %224)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %220, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %224, i64 -1)
  %234 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %235 = bitcast %Tuple* %234 to { double, double }*
  %236 = getelementptr { double, double }, { double, double }* %235, i64 0, i32 0
  %237 = getelementptr { double, double }, { double, double }* %235, i64 0, i32 1
  store double 1.000000e+00, double* %236
  store double 0.000000e+00, double* %237
  %238 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %238, i64 0)
  %240 = bitcast i8* %239 to i64*
  %241 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %238, i64 1)
  %242 = bitcast i8* %241 to i64*
  store i64 0, i64* %240
  store i64 1, i64* %242
  %243 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %235, %Array* %238)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %234, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %238, i64 -1)
  store { { double, double }*, %Array* }* %209, { { double, double }*, %Array* }** %193
  store { { double, double }*, %Array* }* %219, { { double, double }*, %Array* }** %195
  store { { double, double }*, %Array* }* %233, { { double, double }*, %Array* }** %197
  store { { double, double }*, %Array* }* %243, { { double, double }*, %Array* }** %199
  store i64 3, i64* %189
  store %Array* %191, %Array** %190
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %244 = phi i64 [ 0, %exit__4 ], [ %255, %exiting__5 ]
  %245 = icmp sle i64 %244, 3
  br i1 %245, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %246 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 %244)
  %247 = bitcast i8* %246 to { { double, double }*, %Array* }**
  %248 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %247
  %249 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %248, i64 0, i32 0
  %250 = load { double, double }*, { double, double }** %249
  %251 = bitcast { double, double }* %250 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %251, i64 1)
  %252 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %248, i64 0, i32 1
  %253 = load %Array*, %Array** %252
  call void @__quantum__rt__array_update_alias_count(%Array* %253, i64 1)
  %254 = bitcast { { double, double }*, %Array* }* %248 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %254, i64 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %255 = add i64 %244, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %191, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %188, i64 1)
  %JWEncodedData = call { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerEncodingData__body(i64 4, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, { i64, %Array* }* %inputState, double 0xBFB94D36D949CC98)
  %256 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %JWEncodedData, i64 0, i32 1
  %257 = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %256
  %258 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 0
  %259 = load %Array*, %Array** %258
  %260 = call i64 @__quantum__rt__array_get_size_1d(%Array* %259)
  %261 = sub i64 %260, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %262 = phi i64 [ 0, %exit__5 ], [ %272, %exiting__6 ]
  %263 = icmp sle i64 %262, %261
  br i1 %263, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %264 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %259, i64 %262)
  %265 = bitcast i8* %264 to { %Array*, %Array* }**
  %266 = load { %Array*, %Array* }*, { %Array*, %Array* }** %265
  %267 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %266, i64 0, i32 0
  %268 = load %Array*, %Array** %267
  call void @__quantum__rt__array_update_alias_count(%Array* %268, i64 1)
  %269 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %266, i64 0, i32 1
  %270 = load %Array*, %Array** %269
  call void @__quantum__rt__array_update_alias_count(%Array* %270, i64 1)
  %271 = bitcast { %Array*, %Array* }* %266 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %271, i64 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %272 = add i64 %262, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %259, i64 1)
  %273 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 1
  %274 = load %Array*, %Array** %273
  %275 = call i64 @__quantum__rt__array_get_size_1d(%Array* %274)
  %276 = sub i64 %275, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %277 = phi i64 [ 0, %exit__6 ], [ %287, %exiting__7 ]
  %278 = icmp sle i64 %277, %276
  br i1 %278, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %279 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %274, i64 %277)
  %280 = bitcast i8* %279 to { %Array*, %Array* }**
  %281 = load { %Array*, %Array* }*, { %Array*, %Array* }** %280
  %282 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %281, i64 0, i32 0
  %283 = load %Array*, %Array** %282
  call void @__quantum__rt__array_update_alias_count(%Array* %283, i64 1)
  %284 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %281, i64 0, i32 1
  %285 = load %Array*, %Array** %284
  call void @__quantum__rt__array_update_alias_count(%Array* %285, i64 1)
  %286 = bitcast { %Array*, %Array* }* %281 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %286, i64 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %287 = add i64 %277, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %274, i64 1)
  %288 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 2
  %289 = load %Array*, %Array** %288
  %290 = call i64 @__quantum__rt__array_get_size_1d(%Array* %289)
  %291 = sub i64 %290, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %292 = phi i64 [ 0, %exit__7 ], [ %302, %exiting__8 ]
  %293 = icmp sle i64 %292, %291
  br i1 %293, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %294 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %289, i64 %292)
  %295 = bitcast i8* %294 to { %Array*, %Array* }**
  %296 = load { %Array*, %Array* }*, { %Array*, %Array* }** %295
  %297 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %296, i64 0, i32 0
  %298 = load %Array*, %Array** %297
  call void @__quantum__rt__array_update_alias_count(%Array* %298, i64 1)
  %299 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %296, i64 0, i32 1
  %300 = load %Array*, %Array** %299
  call void @__quantum__rt__array_update_alias_count(%Array* %300, i64 1)
  %301 = bitcast { %Array*, %Array* }* %296 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %301, i64 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %302 = add i64 %292, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %289, i64 1)
  %303 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 3
  %304 = load %Array*, %Array** %303
  %305 = call i64 @__quantum__rt__array_get_size_1d(%Array* %304)
  %306 = sub i64 %305, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %307 = phi i64 [ 0, %exit__8 ], [ %317, %exiting__9 ]
  %308 = icmp sle i64 %307, %306
  br i1 %308, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %309 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %304, i64 %307)
  %310 = bitcast i8* %309 to { %Array*, %Array* }**
  %311 = load { %Array*, %Array* }*, { %Array*, %Array* }** %310
  %312 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %311, i64 0, i32 0
  %313 = load %Array*, %Array** %312
  call void @__quantum__rt__array_update_alias_count(%Array* %313, i64 1)
  %314 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %311, i64 0, i32 1
  %315 = load %Array*, %Array** %314
  call void @__quantum__rt__array_update_alias_count(%Array* %315, i64 1)
  %316 = bitcast { %Array*, %Array* }* %311 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %316, i64 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %317 = add i64 %307, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %304, i64 1)
  %318 = bitcast { %Array*, %Array*, %Array*, %Array* }* %257 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %318, i64 1)
  %319 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %JWEncodedData, i64 0, i32 2
  %320 = load { i64, %Array* }*, { i64, %Array* }** %319
  %321 = getelementptr { i64, %Array* }, { i64, %Array* }* %320, i64 0, i32 1
  %322 = load %Array*, %Array** %321
  %323 = call i64 @__quantum__rt__array_get_size_1d(%Array* %322)
  %324 = sub i64 %323, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %325 = phi i64 [ 0, %exit__9 ], [ %336, %exiting__10 ]
  %326 = icmp sle i64 %325, %324
  br i1 %326, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %327 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %322, i64 %325)
  %328 = bitcast i8* %327 to { { double, double }*, %Array* }**
  %329 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %328
  %330 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %329, i64 0, i32 0
  %331 = load { double, double }*, { double, double }** %330
  %332 = bitcast { double, double }* %331 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %332, i64 1)
  %333 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %329, i64 0, i32 1
  %334 = load %Array*, %Array** %333
  call void @__quantum__rt__array_update_alias_count(%Array* %334, i64 1)
  %335 = bitcast { { double, double }*, %Array* }* %329 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %335, i64 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %336 = add i64 %325, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %322, i64 1)
  %337 = bitcast { i64, %Array* }* %320 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %337, i64 1)
  %338 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %JWEncodedData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %338, i64 1)
  %339 = call double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__VariationalQuantumEigensolver__EstimateEnergy__body(i64 5, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, { i64, %Array* }* %inputState, double 0xBFB94D36D949CC98, i64 1)
  %340 = sub i64 %129, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %341 = phi i64 [ 0, %exit__10 ], [ %351, %exiting__11 ]
  %342 = icmp sle i64 %341, %340
  br i1 %342, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %343 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %341)
  %344 = bitcast i8* %343 to { %Array*, %Array* }**
  %345 = load { %Array*, %Array* }*, { %Array*, %Array* }** %344
  %346 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %345, i64 0, i32 0
  %347 = load %Array*, %Array** %346
  call void @__quantum__rt__array_update_alias_count(%Array* %347, i64 -1)
  %348 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %345, i64 0, i32 1
  %349 = load %Array*, %Array** %348
  call void @__quantum__rt__array_update_alias_count(%Array* %349, i64 -1)
  %350 = bitcast { %Array*, %Array* }* %345 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %350, i64 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %351 = add i64 %341, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %128, i64 -1)
  %352 = sub i64 %144, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %353 = phi i64 [ 0, %exit__11 ], [ %363, %exiting__12 ]
  %354 = icmp sle i64 %353, %352
  br i1 %354, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %355 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 %353)
  %356 = bitcast i8* %355 to { %Array*, %Array* }**
  %357 = load { %Array*, %Array* }*, { %Array*, %Array* }** %356
  %358 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %357, i64 0, i32 0
  %359 = load %Array*, %Array** %358
  call void @__quantum__rt__array_update_alias_count(%Array* %359, i64 -1)
  %360 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %357, i64 0, i32 1
  %361 = load %Array*, %Array** %360
  call void @__quantum__rt__array_update_alias_count(%Array* %361, i64 -1)
  %362 = bitcast { %Array*, %Array* }* %357 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %362, i64 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %363 = add i64 %353, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i64 -1)
  %364 = sub i64 %159, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %365 = phi i64 [ 0, %exit__12 ], [ %375, %exiting__13 ]
  %366 = icmp sle i64 %365, %364
  br i1 %366, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %367 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %365)
  %368 = bitcast i8* %367 to { %Array*, %Array* }**
  %369 = load { %Array*, %Array* }*, { %Array*, %Array* }** %368
  %370 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %369, i64 0, i32 0
  %371 = load %Array*, %Array** %370
  call void @__quantum__rt__array_update_alias_count(%Array* %371, i64 -1)
  %372 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %369, i64 0, i32 1
  %373 = load %Array*, %Array** %372
  call void @__quantum__rt__array_update_alias_count(%Array* %373, i64 -1)
  %374 = bitcast { %Array*, %Array* }* %369 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %374, i64 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %375 = add i64 %365, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %158, i64 -1)
  %376 = sub i64 %174, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %377 = phi i64 [ 0, %exit__13 ], [ %387, %exiting__14 ]
  %378 = icmp sle i64 %377, %376
  br i1 %378, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %379 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %173, i64 %377)
  %380 = bitcast i8* %379 to { %Array*, %Array* }**
  %381 = load { %Array*, %Array* }*, { %Array*, %Array* }** %380
  %382 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %381, i64 0, i32 0
  %383 = load %Array*, %Array** %382
  call void @__quantum__rt__array_update_alias_count(%Array* %383, i64 -1)
  %384 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %381, i64 0, i32 1
  %385 = load %Array*, %Array** %384
  call void @__quantum__rt__array_update_alias_count(%Array* %385, i64 -1)
  %386 = bitcast { %Array*, %Array* }* %381 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %386, i64 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %387 = add i64 %377, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %173, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %187, i64 -1)
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %388 = phi i64 [ 0, %exit__14 ], [ %399, %exiting__15 ]
  %389 = icmp sle i64 %388, 3
  br i1 %389, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %390 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 %388)
  %391 = bitcast i8* %390 to { { double, double }*, %Array* }**
  %392 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %391
  %393 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %392, i64 0, i32 0
  %394 = load { double, double }*, { double, double }** %393
  %395 = bitcast { double, double }* %394 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %395, i64 -1)
  %396 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %392, i64 0, i32 1
  %397 = load %Array*, %Array** %396
  call void @__quantum__rt__array_update_alias_count(%Array* %397, i64 -1)
  %398 = bitcast { { double, double }*, %Array* }* %392 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %398, i64 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %399 = add i64 %388, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %191, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %188, i64 -1)
  %400 = sub i64 %260, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %401 = phi i64 [ 0, %exit__15 ], [ %411, %exiting__16 ]
  %402 = icmp sle i64 %401, %400
  br i1 %402, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %403 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %259, i64 %401)
  %404 = bitcast i8* %403 to { %Array*, %Array* }**
  %405 = load { %Array*, %Array* }*, { %Array*, %Array* }** %404
  %406 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 0
  %407 = load %Array*, %Array** %406
  call void @__quantum__rt__array_update_alias_count(%Array* %407, i64 -1)
  %408 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 1
  %409 = load %Array*, %Array** %408
  call void @__quantum__rt__array_update_alias_count(%Array* %409, i64 -1)
  %410 = bitcast { %Array*, %Array* }* %405 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %410, i64 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %411 = add i64 %401, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %259, i64 -1)
  %412 = sub i64 %275, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %413 = phi i64 [ 0, %exit__16 ], [ %423, %exiting__17 ]
  %414 = icmp sle i64 %413, %412
  br i1 %414, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %415 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %274, i64 %413)
  %416 = bitcast i8* %415 to { %Array*, %Array* }**
  %417 = load { %Array*, %Array* }*, { %Array*, %Array* }** %416
  %418 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %417, i64 0, i32 0
  %419 = load %Array*, %Array** %418
  call void @__quantum__rt__array_update_alias_count(%Array* %419, i64 -1)
  %420 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %417, i64 0, i32 1
  %421 = load %Array*, %Array** %420
  call void @__quantum__rt__array_update_alias_count(%Array* %421, i64 -1)
  %422 = bitcast { %Array*, %Array* }* %417 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %422, i64 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %423 = add i64 %413, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %274, i64 -1)
  %424 = sub i64 %290, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %425 = phi i64 [ 0, %exit__17 ], [ %435, %exiting__18 ]
  %426 = icmp sle i64 %425, %424
  br i1 %426, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %427 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %289, i64 %425)
  %428 = bitcast i8* %427 to { %Array*, %Array* }**
  %429 = load { %Array*, %Array* }*, { %Array*, %Array* }** %428
  %430 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %429, i64 0, i32 0
  %431 = load %Array*, %Array** %430
  call void @__quantum__rt__array_update_alias_count(%Array* %431, i64 -1)
  %432 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %429, i64 0, i32 1
  %433 = load %Array*, %Array** %432
  call void @__quantum__rt__array_update_alias_count(%Array* %433, i64 -1)
  %434 = bitcast { %Array*, %Array* }* %429 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %434, i64 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %435 = add i64 %425, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %289, i64 -1)
  %436 = sub i64 %305, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %437 = phi i64 [ 0, %exit__18 ], [ %447, %exiting__19 ]
  %438 = icmp sle i64 %437, %436
  br i1 %438, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %439 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %304, i64 %437)
  %440 = bitcast i8* %439 to { %Array*, %Array* }**
  %441 = load { %Array*, %Array* }*, { %Array*, %Array* }** %440
  %442 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %441, i64 0, i32 0
  %443 = load %Array*, %Array** %442
  call void @__quantum__rt__array_update_alias_count(%Array* %443, i64 -1)
  %444 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %441, i64 0, i32 1
  %445 = load %Array*, %Array** %444
  call void @__quantum__rt__array_update_alias_count(%Array* %445, i64 -1)
  %446 = bitcast { %Array*, %Array* }* %441 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %446, i64 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %447 = add i64 %437, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %304, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %318, i64 -1)
  %448 = sub i64 %323, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %449 = phi i64 [ 0, %exit__19 ], [ %460, %exiting__20 ]
  %450 = icmp sle i64 %449, %448
  br i1 %450, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %451 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %322, i64 %449)
  %452 = bitcast i8* %451 to { { double, double }*, %Array* }**
  %453 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %452
  %454 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %453, i64 0, i32 0
  %455 = load { double, double }*, { double, double }** %454
  %456 = bitcast { double, double }* %455 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %456, i64 -1)
  %457 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %453, i64 0, i32 1
  %458 = load %Array*, %Array** %457
  call void @__quantum__rt__array_update_alias_count(%Array* %458, i64 -1)
  %459 = bitcast { { double, double }*, %Array* }* %453 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %459, i64 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %460 = add i64 %449, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %322, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %337, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %338, i64 -1)
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %461 = phi i64 [ 0, %exit__20 ], [ %471, %exiting__21 ]
  %462 = icmp sle i64 %461, 3
  br i1 %462, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %463 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %461)
  %464 = bitcast i8* %463 to { %Array*, %Array* }**
  %465 = load { %Array*, %Array* }*, { %Array*, %Array* }** %464
  %466 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %465, i64 0, i32 0
  %467 = load %Array*, %Array** %466
  call void @__quantum__rt__array_update_reference_count(%Array* %467, i64 -1)
  %468 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %465, i64 0, i32 1
  %469 = load %Array*, %Array** %468
  call void @__quantum__rt__array_update_reference_count(%Array* %469, i64 -1)
  %470 = bitcast { %Array*, %Array* }* %465 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %470, i64 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %471 = add i64 %461, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 -1)
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %472 = phi i64 [ 0, %exit__21 ], [ %482, %exiting__22 ]
  %473 = icmp sle i64 %472, 5
  br i1 %473, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %474 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 %472)
  %475 = bitcast i8* %474 to { %Array*, %Array* }**
  %476 = load { %Array*, %Array* }*, { %Array*, %Array* }** %475
  %477 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %476, i64 0, i32 0
  %478 = load %Array*, %Array** %477
  call void @__quantum__rt__array_update_reference_count(%Array* %478, i64 -1)
  %479 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %476, i64 0, i32 1
  %480 = load %Array*, %Array** %479
  call void @__quantum__rt__array_update_reference_count(%Array* %480, i64 -1)
  %481 = bitcast { %Array*, %Array* }* %476 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %481, i64 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %482 = add i64 %472, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %104, i64 -1)
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %483 = phi i64 [ 0, %exit__22 ], [ %493, %exiting__23 ]
  %484 = icmp sle i64 %483, 0
  br i1 %484, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %485 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %483)
  %486 = bitcast i8* %485 to { %Array*, %Array* }**
  %487 = load { %Array*, %Array* }*, { %Array*, %Array* }** %486
  %488 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %487, i64 0, i32 0
  %489 = load %Array*, %Array** %488
  call void @__quantum__rt__array_update_reference_count(%Array* %489, i64 -1)
  %490 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %487, i64 0, i32 1
  %491 = load %Array*, %Array** %490
  call void @__quantum__rt__array_update_reference_count(%Array* %491, i64 -1)
  %492 = bitcast { %Array*, %Array* }* %487 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %492, i64 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %493 = add i64 %483, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i64 -1)
  %494 = sub i64 %129, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %495 = phi i64 [ 0, %exit__23 ], [ %505, %exiting__24 ]
  %496 = icmp sle i64 %495, %494
  br i1 %496, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %497 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %495)
  %498 = bitcast i8* %497 to { %Array*, %Array* }**
  %499 = load { %Array*, %Array* }*, { %Array*, %Array* }** %498
  %500 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %499, i64 0, i32 0
  %501 = load %Array*, %Array** %500
  call void @__quantum__rt__array_update_reference_count(%Array* %501, i64 -1)
  %502 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %499, i64 0, i32 1
  %503 = load %Array*, %Array** %502
  call void @__quantum__rt__array_update_reference_count(%Array* %503, i64 -1)
  %504 = bitcast { %Array*, %Array* }* %499 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %504, i64 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %505 = add i64 %495, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_reference_count(%Array* %128, i64 -1)
  %506 = sub i64 %144, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %507 = phi i64 [ 0, %exit__24 ], [ %517, %exiting__25 ]
  %508 = icmp sle i64 %507, %506
  br i1 %508, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %509 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 %507)
  %510 = bitcast i8* %509 to { %Array*, %Array* }**
  %511 = load { %Array*, %Array* }*, { %Array*, %Array* }** %510
  %512 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %511, i64 0, i32 0
  %513 = load %Array*, %Array** %512
  call void @__quantum__rt__array_update_reference_count(%Array* %513, i64 -1)
  %514 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %511, i64 0, i32 1
  %515 = load %Array*, %Array** %514
  call void @__quantum__rt__array_update_reference_count(%Array* %515, i64 -1)
  %516 = bitcast { %Array*, %Array* }* %511 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %516, i64 -1)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %517 = add i64 %507, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i64 -1)
  %518 = sub i64 %159, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %519 = phi i64 [ 0, %exit__25 ], [ %529, %exiting__26 ]
  %520 = icmp sle i64 %519, %518
  br i1 %520, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %521 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %519)
  %522 = bitcast i8* %521 to { %Array*, %Array* }**
  %523 = load { %Array*, %Array* }*, { %Array*, %Array* }** %522
  %524 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %523, i64 0, i32 0
  %525 = load %Array*, %Array** %524
  call void @__quantum__rt__array_update_reference_count(%Array* %525, i64 -1)
  %526 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %523, i64 0, i32 1
  %527 = load %Array*, %Array** %526
  call void @__quantum__rt__array_update_reference_count(%Array* %527, i64 -1)
  %528 = bitcast { %Array*, %Array* }* %523 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %528, i64 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %529 = add i64 %519, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_reference_count(%Array* %158, i64 -1)
  %530 = sub i64 %174, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %531 = phi i64 [ 0, %exit__26 ], [ %541, %exiting__27 ]
  %532 = icmp sle i64 %531, %530
  br i1 %532, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %533 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %173, i64 %531)
  %534 = bitcast i8* %533 to { %Array*, %Array* }**
  %535 = load { %Array*, %Array* }*, { %Array*, %Array* }** %534
  %536 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %535, i64 0, i32 0
  %537 = load %Array*, %Array** %536
  call void @__quantum__rt__array_update_reference_count(%Array* %537, i64 -1)
  %538 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %535, i64 0, i32 1
  %539 = load %Array*, %Array** %538
  call void @__quantum__rt__array_update_reference_count(%Array* %539, i64 -1)
  %540 = bitcast { %Array*, %Array* }* %535 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %540, i64 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %541 = add i64 %531, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_reference_count(%Array* %173, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %187, i64 -1)
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %542 = phi i64 [ 0, %exit__27 ], [ %553, %exiting__28 ]
  %543 = icmp sle i64 %542, 3
  br i1 %543, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %544 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 %542)
  %545 = bitcast i8* %544 to { { double, double }*, %Array* }**
  %546 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %545
  %547 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %546, i64 0, i32 0
  %548 = load { double, double }*, { double, double }** %547
  %549 = bitcast { double, double }* %548 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %549, i64 -1)
  %550 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %546, i64 0, i32 1
  %551 = load %Array*, %Array** %550
  call void @__quantum__rt__array_update_reference_count(%Array* %551, i64 -1)
  %552 = bitcast { { double, double }*, %Array* }* %546 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %552, i64 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %553 = add i64 %542, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_reference_count(%Array* %191, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i64 -1)
  %554 = sub i64 %260, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %555 = phi i64 [ 0, %exit__28 ], [ %565, %exiting__29 ]
  %556 = icmp sle i64 %555, %554
  br i1 %556, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %557 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %259, i64 %555)
  %558 = bitcast i8* %557 to { %Array*, %Array* }**
  %559 = load { %Array*, %Array* }*, { %Array*, %Array* }** %558
  %560 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %559, i64 0, i32 0
  %561 = load %Array*, %Array** %560
  call void @__quantum__rt__array_update_reference_count(%Array* %561, i64 -1)
  %562 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %559, i64 0, i32 1
  %563 = load %Array*, %Array** %562
  call void @__quantum__rt__array_update_reference_count(%Array* %563, i64 -1)
  %564 = bitcast { %Array*, %Array* }* %559 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %564, i64 -1)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %565 = add i64 %555, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_update_reference_count(%Array* %259, i64 -1)
  %566 = sub i64 %275, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %567 = phi i64 [ 0, %exit__29 ], [ %577, %exiting__30 ]
  %568 = icmp sle i64 %567, %566
  br i1 %568, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %569 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %274, i64 %567)
  %570 = bitcast i8* %569 to { %Array*, %Array* }**
  %571 = load { %Array*, %Array* }*, { %Array*, %Array* }** %570
  %572 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %571, i64 0, i32 0
  %573 = load %Array*, %Array** %572
  call void @__quantum__rt__array_update_reference_count(%Array* %573, i64 -1)
  %574 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %571, i64 0, i32 1
  %575 = load %Array*, %Array** %574
  call void @__quantum__rt__array_update_reference_count(%Array* %575, i64 -1)
  %576 = bitcast { %Array*, %Array* }* %571 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %576, i64 -1)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %577 = add i64 %567, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_update_reference_count(%Array* %274, i64 -1)
  %578 = sub i64 %290, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %579 = phi i64 [ 0, %exit__30 ], [ %589, %exiting__31 ]
  %580 = icmp sle i64 %579, %578
  br i1 %580, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %581 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %289, i64 %579)
  %582 = bitcast i8* %581 to { %Array*, %Array* }**
  %583 = load { %Array*, %Array* }*, { %Array*, %Array* }** %582
  %584 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %583, i64 0, i32 0
  %585 = load %Array*, %Array** %584
  call void @__quantum__rt__array_update_reference_count(%Array* %585, i64 -1)
  %586 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %583, i64 0, i32 1
  %587 = load %Array*, %Array** %586
  call void @__quantum__rt__array_update_reference_count(%Array* %587, i64 -1)
  %588 = bitcast { %Array*, %Array* }* %583 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %588, i64 -1)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %589 = add i64 %579, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_update_reference_count(%Array* %289, i64 -1)
  %590 = sub i64 %305, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %591 = phi i64 [ 0, %exit__31 ], [ %601, %exiting__32 ]
  %592 = icmp sle i64 %591, %590
  br i1 %592, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %593 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %304, i64 %591)
  %594 = bitcast i8* %593 to { %Array*, %Array* }**
  %595 = load { %Array*, %Array* }*, { %Array*, %Array* }** %594
  %596 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %595, i64 0, i32 0
  %597 = load %Array*, %Array** %596
  call void @__quantum__rt__array_update_reference_count(%Array* %597, i64 -1)
  %598 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %595, i64 0, i32 1
  %599 = load %Array*, %Array** %598
  call void @__quantum__rt__array_update_reference_count(%Array* %599, i64 -1)
  %600 = bitcast { %Array*, %Array* }* %595 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %600, i64 -1)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %601 = add i64 %591, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_update_reference_count(%Array* %304, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %318, i64 -1)
  %602 = sub i64 %323, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %603 = phi i64 [ 0, %exit__32 ], [ %614, %exiting__33 ]
  %604 = icmp sle i64 %603, %602
  br i1 %604, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %605 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %322, i64 %603)
  %606 = bitcast i8* %605 to { { double, double }*, %Array* }**
  %607 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %606
  %608 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %607, i64 0, i32 0
  %609 = load { double, double }*, { double, double }** %608
  %610 = bitcast { double, double }* %609 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %610, i64 -1)
  %611 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %607, i64 0, i32 1
  %612 = load %Array*, %Array** %611
  call void @__quantum__rt__array_update_reference_count(%Array* %612, i64 -1)
  %613 = bitcast { { double, double }*, %Array* }* %607 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %613, i64 -1)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %614 = add i64 %603, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_update_reference_count(%Array* %322, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %337, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %338, i64 -1)
  ret double %339
}

define { %Array*, %Array*, %Array*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JWOptimizedHTerms__body(%Array* %__Item1__, %Array* %__Item2__, %Array* %__Item3__, %Array* %__Item4__) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 1)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i64 1)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item2__)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %15)
  %18 = bitcast i8* %17 to { %Array*, %Array* }**
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i64 1)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i64 1)
  %26 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item3__)
  %27 = sub i64 %26, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %28 = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %29 = icmp sle i64 %28, %27
  br i1 %29, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %28)
  %31 = bitcast i8* %30 to { %Array*, %Array* }**
  %32 = load { %Array*, %Array* }*, { %Array*, %Array* }** %31
  %33 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %32, i64 0, i32 0
  %34 = load %Array*, %Array** %33
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i64 1)
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %32, i64 0, i32 1
  %36 = load %Array*, %Array** %35
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i64 1)
  %37 = bitcast { %Array*, %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %28, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i64 1)
  %39 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item4__)
  %40 = sub i64 %39, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %41 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %41)
  %44 = bitcast i8* %43 to { %Array*, %Array* }**
  %45 = load { %Array*, %Array* }*, { %Array*, %Array* }** %44
  %46 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %45, i64 0, i32 0
  %47 = load %Array*, %Array** %46
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i64 1)
  %48 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %45, i64 0, i32 1
  %49 = load %Array*, %Array** %48
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i64 1)
  %50 = bitcast { %Array*, %Array* }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %41, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item4__, i64 1)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %53 = bitcast %Tuple* %52 to { %Array*, %Array*, %Array*, %Array* }*
  %54 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 0
  %55 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 1
  %56 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 2
  %57 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 3
  store %Array* %__Item1__, %Array** %54
  store %Array* %__Item2__, %Array** %55
  store %Array* %__Item3__, %Array** %56
  store %Array* %__Item4__, %Array** %57
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %59 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %70, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %60)
  %63 = bitcast i8* %62 to { %Array*, %Array* }**
  %64 = load { %Array*, %Array* }*, { %Array*, %Array* }** %63
  %65 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %64, i64 0, i32 0
  %66 = load %Array*, %Array** %65
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i64 1)
  %67 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %64, i64 0, i32 1
  %68 = load %Array*, %Array** %67
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i64 1)
  %69 = bitcast { %Array*, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %69, i64 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %70 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i64 1)
  %71 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item2__)
  %72 = sub i64 %71, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %73 = phi i64 [ 0, %exit__5 ], [ %83, %exiting__6 ]
  %74 = icmp sle i64 %73, %72
  br i1 %74, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %73)
  %76 = bitcast i8* %75 to { %Array*, %Array* }**
  %77 = load { %Array*, %Array* }*, { %Array*, %Array* }** %76
  %78 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %77, i64 0, i32 0
  %79 = load %Array*, %Array** %78
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i64 1)
  %80 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %77, i64 0, i32 1
  %81 = load %Array*, %Array** %80
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i64 1)
  %82 = bitcast { %Array*, %Array* }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %82, i64 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %83 = add i64 %73, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item2__, i64 1)
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item3__)
  %85 = sub i64 %84, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %86 = phi i64 [ 0, %exit__6 ], [ %96, %exiting__7 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %86)
  %89 = bitcast i8* %88 to { %Array*, %Array* }**
  %90 = load { %Array*, %Array* }*, { %Array*, %Array* }** %89
  %91 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %90, i64 0, i32 0
  %92 = load %Array*, %Array** %91
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i64 1)
  %93 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %90, i64 0, i32 1
  %94 = load %Array*, %Array** %93
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i64 1)
  %95 = bitcast { %Array*, %Array* }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i64 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %96 = add i64 %86, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i64 1)
  %97 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item4__)
  %98 = sub i64 %97, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %99 = phi i64 [ 0, %exit__7 ], [ %109, %exiting__8 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %99)
  %102 = bitcast i8* %101 to { %Array*, %Array* }**
  %103 = load { %Array*, %Array* }*, { %Array*, %Array* }** %102
  %104 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %103, i64 0, i32 0
  %105 = load %Array*, %Array** %104
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i64 1)
  %106 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %103, i64 0, i32 1
  %107 = load %Array*, %Array** %106
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i64 1)
  %108 = bitcast { %Array*, %Array* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %108, i64 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %109 = add i64 %99, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item4__, i64 1)
  %110 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %111 = phi i64 [ 0, %exit__8 ], [ %121, %exiting__9 ]
  %112 = icmp sle i64 %111, %110
  br i1 %112, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %111)
  %114 = bitcast i8* %113 to { %Array*, %Array* }**
  %115 = load { %Array*, %Array* }*, { %Array*, %Array* }** %114
  %116 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %115, i64 0, i32 0
  %117 = load %Array*, %Array** %116
  call void @__quantum__rt__array_update_alias_count(%Array* %117, i64 -1)
  %118 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %115, i64 0, i32 1
  %119 = load %Array*, %Array** %118
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i64 -1)
  %120 = bitcast { %Array*, %Array* }* %115 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i64 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %121 = add i64 %111, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i64 -1)
  %122 = sub i64 %13, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %123 = phi i64 [ 0, %exit__9 ], [ %133, %exiting__10 ]
  %124 = icmp sle i64 %123, %122
  br i1 %124, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %123)
  %126 = bitcast i8* %125 to { %Array*, %Array* }**
  %127 = load { %Array*, %Array* }*, { %Array*, %Array* }** %126
  %128 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %127, i64 0, i32 0
  %129 = load %Array*, %Array** %128
  call void @__quantum__rt__array_update_alias_count(%Array* %129, i64 -1)
  %130 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %127, i64 0, i32 1
  %131 = load %Array*, %Array** %130
  call void @__quantum__rt__array_update_alias_count(%Array* %131, i64 -1)
  %132 = bitcast { %Array*, %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %132, i64 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %133 = add i64 %123, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i64 -1)
  %134 = sub i64 %26, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %135 = phi i64 [ 0, %exit__10 ], [ %145, %exiting__11 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %135)
  %138 = bitcast i8* %137 to { %Array*, %Array* }**
  %139 = load { %Array*, %Array* }*, { %Array*, %Array* }** %138
  %140 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %139, i64 0, i32 0
  %141 = load %Array*, %Array** %140
  call void @__quantum__rt__array_update_alias_count(%Array* %141, i64 -1)
  %142 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %139, i64 0, i32 1
  %143 = load %Array*, %Array** %142
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i64 -1)
  %144 = bitcast { %Array*, %Array* }* %139 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %144, i64 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %145 = add i64 %135, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i64 -1)
  %146 = sub i64 %39, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %147 = phi i64 [ 0, %exit__11 ], [ %157, %exiting__12 ]
  %148 = icmp sle i64 %147, %146
  br i1 %148, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %147)
  %150 = bitcast i8* %149 to { %Array*, %Array* }**
  %151 = load { %Array*, %Array* }*, { %Array*, %Array* }** %150
  %152 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 0
  %153 = load %Array*, %Array** %152
  call void @__quantum__rt__array_update_alias_count(%Array* %153, i64 -1)
  %154 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 1
  %155 = load %Array*, %Array** %154
  call void @__quantum__rt__array_update_alias_count(%Array* %155, i64 -1)
  %156 = bitcast { %Array*, %Array* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %156, i64 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %157 = add i64 %147, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item4__, i64 -1)
  ret { %Array*, %Array*, %Array*, %Array* }* %53
}

define { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %__Item1__, %Array* %__Item2__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Array*, %Array* }*
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  store %Array* %__Item1__, %Array** %2
  store %Array* %__Item2__, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item2__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i64 -1)
  ret { %Array*, %Array* }* %1
}

declare %Tuple* @__quantum__rt__tuple_create(i64)

define { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i64 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %2 = bitcast %Tuple* %1 to { { double, double }*, %Array* }*
  %3 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %2, i64 0, i32 0
  %4 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %2, i64 0, i32 1
  store { double, double }* %0, { double, double }** %3
  store %Array* %__Item3__, %Array** %4
  %5 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i64 -1)
  ret { { double, double }*, %Array* }* %2
}

declare void @__quantum__rt__tuple_update_reference_count(%Tuple*, i64)

define { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerEncodingData__body(i64 %__Item1__, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, { i64, %Array* }* %0, double %__Item5__) {
entry:
  %1 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i64 1)
  %16 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 1
  %17 = load %Array*, %Array** %16
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23
  %25 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %24, i64 0, i32 0
  %26 = load %Array*, %Array** %25
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i64 1)
  %27 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %24, i64 0, i32 1
  %28 = load %Array*, %Array** %27
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i64 1)
  %31 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 2
  %32 = load %Array*, %Array** %31
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38
  %40 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %39, i64 0, i32 0
  %41 = load %Array*, %Array** %40
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i64 1)
  %42 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %39, i64 0, i32 1
  %43 = load %Array*, %Array** %42
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i64 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i64 1)
  %46 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 3
  %47 = load %Array*, %Array** %46
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53
  %55 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %54, i64 0, i32 0
  %56 = load %Array*, %Array** %55
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i64 1)
  %57 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %54, i64 0, i32 1
  %58 = load %Array*, %Array** %57
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i64 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i64 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i64 1)
  %62 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* getelementptr ({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* null, i32 1) to i64))
  %63 = bitcast %Tuple* %62 to { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }*
  %64 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 0
  %65 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 1
  %66 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 2
  %67 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 3
  store i64 %__Item1__, i64* %64
  store { %Array*, %Array*, %Array*, %Array* }* %__Item2__, { %Array*, %Array*, %Array*, %Array* }** %65
  store { i64, %Array* }* %0, { i64, %Array* }** %66
  store double %__Item5__, double* %67
  %68 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 0
  %69 = load %Array*, %Array** %68
  %70 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 1
  %71 = load %Array*, %Array** %70
  %72 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 2
  %73 = load %Array*, %Array** %72
  %74 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 3
  %75 = load %Array*, %Array** %74
  %76 = getelementptr { i64, %Array* }, { i64, %Array* }* %0, i64 0, i32 1
  %77 = load %Array*, %Array** %76
  %78 = call i64 @__quantum__rt__array_get_size_1d(%Array* %69)
  %79 = sub i64 %78, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %80 = phi i64 [ 0, %exit__4 ], [ %90, %exiting__5 ]
  %81 = icmp sle i64 %80, %79
  br i1 %81, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %80)
  %83 = bitcast i8* %82 to { %Array*, %Array* }**
  %84 = load { %Array*, %Array* }*, { %Array*, %Array* }** %83
  %85 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %84, i64 0, i32 0
  %86 = load %Array*, %Array** %85
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i64 1)
  %87 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %84, i64 0, i32 1
  %88 = load %Array*, %Array** %87
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i64 1)
  %89 = bitcast { %Array*, %Array* }* %84 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %89, i64 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %90 = add i64 %80, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i64 1)
  %91 = call i64 @__quantum__rt__array_get_size_1d(%Array* %71)
  %92 = sub i64 %91, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %93 = phi i64 [ 0, %exit__5 ], [ %103, %exiting__6 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %93)
  %96 = bitcast i8* %95 to { %Array*, %Array* }**
  %97 = load { %Array*, %Array* }*, { %Array*, %Array* }** %96
  %98 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %97, i64 0, i32 0
  %99 = load %Array*, %Array** %98
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i64 1)
  %100 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %97, i64 0, i32 1
  %101 = load %Array*, %Array** %100
  call void @__quantum__rt__array_update_reference_count(%Array* %101, i64 1)
  %102 = bitcast { %Array*, %Array* }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %102, i64 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %103 = add i64 %93, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i64 1)
  %104 = call i64 @__quantum__rt__array_get_size_1d(%Array* %73)
  %105 = sub i64 %104, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %106 = phi i64 [ 0, %exit__6 ], [ %116, %exiting__7 ]
  %107 = icmp sle i64 %106, %105
  br i1 %107, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 %106)
  %109 = bitcast i8* %108 to { %Array*, %Array* }**
  %110 = load { %Array*, %Array* }*, { %Array*, %Array* }** %109
  %111 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %110, i64 0, i32 0
  %112 = load %Array*, %Array** %111
  call void @__quantum__rt__array_update_reference_count(%Array* %112, i64 1)
  %113 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %110, i64 0, i32 1
  %114 = load %Array*, %Array** %113
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i64 1)
  %115 = bitcast { %Array*, %Array* }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %115, i64 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %116 = add i64 %106, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i64 1)
  %117 = call i64 @__quantum__rt__array_get_size_1d(%Array* %75)
  %118 = sub i64 %117, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %119 = phi i64 [ 0, %exit__7 ], [ %129, %exiting__8 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %75, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122
  %124 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %123, i64 0, i32 0
  %125 = load %Array*, %Array** %124
  call void @__quantum__rt__array_update_reference_count(%Array* %125, i64 1)
  %126 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %123, i64 0, i32 1
  %127 = load %Array*, %Array** %126
  call void @__quantum__rt__array_update_reference_count(%Array* %127, i64 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i64 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %129 = add i64 %119, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i64 1)
  %130 = bitcast { %Array*, %Array*, %Array*, %Array* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %130, i64 1)
  %131 = call i64 @__quantum__rt__array_get_size_1d(%Array* %77)
  %132 = sub i64 %131, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %133 = phi i64 [ 0, %exit__8 ], [ %144, %exiting__9 ]
  %134 = icmp sle i64 %133, %132
  br i1 %134, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 %133)
  %136 = bitcast i8* %135 to { { double, double }*, %Array* }**
  %137 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %136
  %138 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %137, i64 0, i32 0
  %139 = load { double, double }*, { double, double }** %138
  %140 = bitcast { double, double }* %139 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %140, i64 1)
  %141 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %137, i64 0, i32 1
  %142 = load %Array*, %Array** %141
  call void @__quantum__rt__array_update_reference_count(%Array* %142, i64 1)
  %143 = bitcast { { double, double }*, %Array* }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %143, i64 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %144 = add i64 %133, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i64 1)
  %145 = bitcast { i64, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %145, i64 1)
  %146 = sub i64 %3, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %147 = phi i64 [ 0, %exit__9 ], [ %157, %exiting__10 ]
  %148 = icmp sle i64 %147, %146
  br i1 %148, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %147)
  %150 = bitcast i8* %149 to { %Array*, %Array* }**
  %151 = load { %Array*, %Array* }*, { %Array*, %Array* }** %150
  %152 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 0
  %153 = load %Array*, %Array** %152
  call void @__quantum__rt__array_update_alias_count(%Array* %153, i64 -1)
  %154 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 1
  %155 = load %Array*, %Array** %154
  call void @__quantum__rt__array_update_alias_count(%Array* %155, i64 -1)
  %156 = bitcast { %Array*, %Array* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %156, i64 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %147, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i64 -1)
  %158 = sub i64 %18, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %159 = phi i64 [ 0, %exit__10 ], [ %169, %exiting__11 ]
  %160 = icmp sle i64 %159, %158
  br i1 %160, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %159)
  %162 = bitcast i8* %161 to { %Array*, %Array* }**
  %163 = load { %Array*, %Array* }*, { %Array*, %Array* }** %162
  %164 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %163, i64 0, i32 0
  %165 = load %Array*, %Array** %164
  call void @__quantum__rt__array_update_alias_count(%Array* %165, i64 -1)
  %166 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %163, i64 0, i32 1
  %167 = load %Array*, %Array** %166
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i64 -1)
  %168 = bitcast { %Array*, %Array* }* %163 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %168, i64 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %169 = add i64 %159, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i64 -1)
  %170 = sub i64 %33, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %181, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %171)
  %174 = bitcast i8* %173 to { %Array*, %Array* }**
  %175 = load { %Array*, %Array* }*, { %Array*, %Array* }** %174
  %176 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %175, i64 0, i32 0
  %177 = load %Array*, %Array** %176
  call void @__quantum__rt__array_update_alias_count(%Array* %177, i64 -1)
  %178 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %175, i64 0, i32 1
  %179 = load %Array*, %Array** %178
  call void @__quantum__rt__array_update_alias_count(%Array* %179, i64 -1)
  %180 = bitcast { %Array*, %Array* }* %175 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %180, i64 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %181 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i64 -1)
  %182 = sub i64 %48, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %183 = phi i64 [ 0, %exit__12 ], [ %193, %exiting__13 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %183)
  %186 = bitcast i8* %185 to { %Array*, %Array* }**
  %187 = load { %Array*, %Array* }*, { %Array*, %Array* }** %186
  %188 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %187, i64 0, i32 0
  %189 = load %Array*, %Array** %188
  call void @__quantum__rt__array_update_alias_count(%Array* %189, i64 -1)
  %190 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %187, i64 0, i32 1
  %191 = load %Array*, %Array** %190
  call void @__quantum__rt__array_update_alias_count(%Array* %191, i64 -1)
  %192 = bitcast { %Array*, %Array* }* %187 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %192, i64 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %193 = add i64 %183, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i64 -1)
  ret { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63
}

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__VariationalQuantumEigensolver__EstimateEnergy__body(i64 %nQubits, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, { i64, %Array* }* %inputState, double %energyOffset, i64 %nSamples) {
entry:
  %0 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 0
  %ZData = load %Array*, %Array** %0
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZData)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %3)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = load { %Array*, %Array* }*, { %Array*, %Array* }** %6
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %9 = load %Array*, %Array** %8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i64 1)
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i64 1)
  %14 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 1
  %ZZData = load %Array*, %Array** %14
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZZData)
  %16 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %17)
  %20 = bitcast i8* %19 to { %Array*, %Array* }**
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  %24 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i64 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i64 1)
  %28 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 2
  %PQandPQQRData = load %Array*, %Array** %28
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %PQandPQQRData)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 0
  %37 = load %Array*, %Array** %36
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i64 1)
  %38 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 1
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i64 1)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i64 1)
  %42 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 3
  %h0123Data = load %Array*, %Array** %42
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %h0123Data)
  %44 = sub i64 %43, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %55, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, %Array* }**
  %49 = load { %Array*, %Array* }*, { %Array*, %Array* }** %48
  %50 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %49, i64 0, i32 0
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i64 1)
  %52 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %49, i64 0, i32 1
  %53 = load %Array*, %Array** %52
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i64 1)
  %54 = bitcast { %Array*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %55 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i64 1)
  %56 = bitcast { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i64 1)
  %57 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %inputStateTerms = load %Array*, %Array** %57
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputStateTerms)
  %59 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %71, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %60)
  %63 = bitcast i8* %62 to { { double, double }*, %Array* }**
  %64 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %63
  %65 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %64, i64 0, i32 0
  %66 = load { double, double }*, { double, double }** %65
  %67 = bitcast { double, double }* %66 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i64 1)
  %68 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %64, i64 0, i32 1
  %69 = load %Array*, %Array** %68
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i64 1)
  %70 = bitcast { { double, double }*, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i64 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %71 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %inputStateTerms, i64 1)
  %72 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i64 1)
  %energy = alloca double
  store double 0.000000e+00, double* %energy
  %73 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 0
  %inputStateType = load i64, i64* %73
  %74 = sub i64 %58, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %75 = phi i64 [ 0, %exit__5 ], [ %86, %exiting__6 ]
  %76 = icmp sle i64 %75, %74
  br i1 %76, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %75)
  %78 = bitcast i8* %77 to { { double, double }*, %Array* }**
  %79 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %78
  %80 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %79, i64 0, i32 0
  %81 = load { double, double }*, { double, double }** %80
  %82 = bitcast { double, double }* %81 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %82, i64 1)
  %83 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %79, i64 0, i32 1
  %84 = load %Array*, %Array** %83
  call void @__quantum__rt__array_update_alias_count(%Array* %84, i64 1)
  %85 = bitcast { { double, double }*, %Array* }* %79 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %85, i64 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %86 = add i64 %75, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %inputStateTerms, i64 1)
  %87 = sub i64 %1, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %88 = phi i64 [ 0, %exit__6 ], [ %98, %exiting__7 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %88)
  %91 = bitcast i8* %90 to { %Array*, %Array* }**
  %92 = load { %Array*, %Array* }*, { %Array*, %Array* }** %91
  %93 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %92, i64 0, i32 0
  %94 = load %Array*, %Array** %93
  call void @__quantum__rt__array_update_alias_count(%Array* %94, i64 1)
  %95 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %92, i64 0, i32 1
  %96 = load %Array*, %Array** %95
  call void @__quantum__rt__array_update_alias_count(%Array* %96, i64 1)
  %97 = bitcast { %Array*, %Array* }* %92 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %97, i64 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %98 = add i64 %88, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i64 1)
  %99 = sub i64 %15, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %100 = phi i64 [ 0, %exit__7 ], [ %110, %exiting__8 ]
  %101 = icmp sle i64 %100, %99
  br i1 %101, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %100)
  %103 = bitcast i8* %102 to { %Array*, %Array* }**
  %104 = load { %Array*, %Array* }*, { %Array*, %Array* }** %103
  %105 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %104, i64 0, i32 0
  %106 = load %Array*, %Array** %105
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i64 1)
  %107 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %104, i64 0, i32 1
  %108 = load %Array*, %Array** %107
  call void @__quantum__rt__array_update_alias_count(%Array* %108, i64 1)
  %109 = bitcast { %Array*, %Array* }* %104 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %109, i64 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %110 = add i64 %100, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i64 1)
  %111 = sub i64 %29, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %112 = phi i64 [ 0, %exit__8 ], [ %122, %exiting__9 ]
  %113 = icmp sle i64 %112, %111
  br i1 %113, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %112)
  %115 = bitcast i8* %114 to { %Array*, %Array* }**
  %116 = load { %Array*, %Array* }*, { %Array*, %Array* }** %115
  %117 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %116, i64 0, i32 0
  %118 = load %Array*, %Array** %117
  call void @__quantum__rt__array_update_alias_count(%Array* %118, i64 1)
  %119 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %116, i64 0, i32 1
  %120 = load %Array*, %Array** %119
  call void @__quantum__rt__array_update_alias_count(%Array* %120, i64 1)
  %121 = bitcast { %Array*, %Array* }* %116 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %121, i64 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %122 = add i64 %112, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i64 1)
  %123 = sub i64 %43, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %124 = phi i64 [ 0, %exit__9 ], [ %134, %exiting__10 ]
  %125 = icmp sle i64 %124, %123
  br i1 %125, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %124)
  %127 = bitcast i8* %126 to { %Array*, %Array* }**
  %128 = load { %Array*, %Array* }*, { %Array*, %Array* }** %127
  %129 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %128, i64 0, i32 0
  %130 = load %Array*, %Array** %129
  call void @__quantum__rt__array_update_alias_count(%Array* %130, i64 1)
  %131 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %128, i64 0, i32 1
  %132 = load %Array*, %Array** %131
  call void @__quantum__rt__array_update_alias_count(%Array* %132, i64 1)
  %133 = bitcast { %Array*, %Array* }* %128 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %133, i64 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %134 = add i64 %124, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i64 1)
  %hamiltonianTermArray = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 0)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 1)
  %138 = bitcast i8* %137 to %Array**
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 2)
  %140 = bitcast i8* %139 to %Array**
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 3)
  %142 = bitcast i8* %141 to %Array**
  store %Array* %ZData, %Array** %136
  store %Array* %ZZData, %Array** %138
  store %Array* %PQandPQQRData, %Array** %140
  store %Array* %h0123Data, %Array** %142
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %143 = phi i64 [ 0, %exit__10 ], [ %150, %exiting__11 ]
  %144 = icmp sle i64 %143, 3
  br i1 %144, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %143)
  %146 = bitcast i8* %145 to %Array**
  %147 = load %Array*, %Array** %146
  %148 = call i64 @__quantum__rt__array_get_size_1d(%Array* %147)
  %149 = sub i64 %148, 1
  br label %header__12

exiting__11:                                      ; preds = %exit__12
  %150 = add i64 %143, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %hamiltonianTermArray, i64 1)
  %151 = add i64 %1, %15
  %152 = add i64 %151, %29
  %nTerms = add i64 %152, %43
  br label %header__13

header__12:                                       ; preds = %exiting__12, %body__11
  %153 = phi i64 [ 0, %body__11 ], [ %163, %exiting__12 ]
  %154 = icmp sle i64 %153, %149
  br i1 %154, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %147, i64 %153)
  %156 = bitcast i8* %155 to { %Array*, %Array* }**
  %157 = load { %Array*, %Array* }*, { %Array*, %Array* }** %156
  %158 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %157, i64 0, i32 0
  %159 = load %Array*, %Array** %158
  call void @__quantum__rt__array_update_alias_count(%Array* %159, i64 1)
  %160 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %157, i64 0, i32 1
  %161 = load %Array*, %Array** %160
  call void @__quantum__rt__array_update_alias_count(%Array* %161, i64 1)
  %162 = bitcast { %Array*, %Array* }* %157 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %162, i64 1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %163 = add i64 %153, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %147, i64 1)
  br label %exiting__11

header__13:                                       ; preds = %exiting__13, %exit__11
  %termType = phi i64 [ 0, %exit__11 ], [ %169, %exiting__13 ]
  %164 = icmp sle i64 %termType, 3
  br i1 %164, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %termType)
  %166 = bitcast i8* %165 to %Array**
  %hamiltonianTerms = load %Array*, %Array** %166
  %167 = call i64 @__quantum__rt__array_get_size_1d(%Array* %hamiltonianTerms)
  %168 = sub i64 %167, 1
  br label %header__14

exiting__13:                                      ; preds = %exit__19
  %169 = add i64 %termType, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  %170 = load double, double* %energy
  %171 = sub i64 %1, 1
  br label %header__20

header__14:                                       ; preds = %exiting__14, %body__13
  %172 = phi i64 [ 0, %body__13 ], [ %182, %exiting__14 ]
  %173 = icmp sle i64 %172, %168
  br i1 %173, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTerms, i64 %172)
  %175 = bitcast i8* %174 to { %Array*, %Array* }**
  %176 = load { %Array*, %Array* }*, { %Array*, %Array* }** %175
  %177 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %176, i64 0, i32 0
  %178 = load %Array*, %Array** %177
  call void @__quantum__rt__array_update_alias_count(%Array* %178, i64 1)
  %179 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %176, i64 0, i32 1
  %180 = load %Array*, %Array** %179
  call void @__quantum__rt__array_update_alias_count(%Array* %180, i64 1)
  %181 = bitcast { %Array*, %Array* }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %181, i64 1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %182 = add i64 %172, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %hamiltonianTerms, i64 1)
  %183 = sub i64 %167, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %184 = phi i64 [ 0, %exit__14 ], [ %193, %exiting__15 ]
  %185 = icmp sle i64 %184, %183
  br i1 %185, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTerms, i64 %184)
  %187 = bitcast i8* %186 to { %Array*, %Array* }**
  %hamiltonianTerm = load { %Array*, %Array* }*, { %Array*, %Array* }** %187
  %188 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %hamiltonianTerm, i64 0, i32 0
  %qubitIndices = load %Array*, %Array** %188
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  %189 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %hamiltonianTerm, i64 0, i32 1
  %coefficient = load %Array*, %Array** %189
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficient, i64 1)
  %190 = bitcast { %Array*, %Array* }* %hamiltonianTerm to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %190, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficient, i64 1)
  %measOps = call %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__VQEMeasurementOperators__body(i64 %nQubits, %Array* %qubitIndices, i64 %termType)
  %191 = call i64 @__quantum__rt__array_get_size_1d(%Array* %measOps)
  %192 = sub i64 %191, 1
  br label %header__16

exiting__15:                                      ; preds = %exit__18
  %193 = add i64 %184, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  %194 = sub i64 %167, 1
  br label %header__19

header__16:                                       ; preds = %exiting__16, %body__15
  %195 = phi i64 [ 0, %body__15 ], [ %200, %exiting__16 ]
  %196 = icmp sle i64 %195, %192
  br i1 %196, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %197 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %measOps, i64 %195)
  %198 = bitcast i8* %197 to %Array**
  %199 = load %Array*, %Array** %198
  call void @__quantum__rt__array_update_alias_count(%Array* %199, i64 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %200 = add i64 %195, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %measOps, i64 1)
  %coefficients = call %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__ExpandedCoefficients__body(%Array* %coefficient, i64 %termType)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %jwTermEnergy = call double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__SumTermExpectation__body({ i64, %Array* }* %inputState, %Array* %measOps, %Array* %coefficients, i64 %nQubits, i64 %nSamples)
  %201 = load double, double* %energy
  %202 = fadd double %201, %jwTermEnergy
  store double %202, double* %energy
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficient, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %190, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficient, i64 -1)
  %203 = sub i64 %191, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %204 = phi i64 [ 0, %exit__16 ], [ %209, %exiting__17 ]
  %205 = icmp sle i64 %204, %203
  br i1 %205, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %206 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %measOps, i64 %204)
  %207 = bitcast i8* %206 to %Array**
  %208 = load %Array*, %Array** %207
  call void @__quantum__rt__array_update_alias_count(%Array* %208, i64 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %209 = add i64 %204, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %measOps, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  %210 = sub i64 %191, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %211 = phi i64 [ 0, %exit__17 ], [ %216, %exiting__18 ]
  %212 = icmp sle i64 %211, %210
  br i1 %212, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %213 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %measOps, i64 %211)
  %214 = bitcast i8* %213 to %Array**
  %215 = load %Array*, %Array** %214
  call void @__quantum__rt__array_update_reference_count(%Array* %215, i64 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %216 = add i64 %211, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %measOps, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 -1)
  br label %exiting__15

header__19:                                       ; preds = %exiting__19, %exit__15
  %217 = phi i64 [ 0, %exit__15 ], [ %227, %exiting__19 ]
  %218 = icmp sle i64 %217, %194
  br i1 %218, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %219 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTerms, i64 %217)
  %220 = bitcast i8* %219 to { %Array*, %Array* }**
  %221 = load { %Array*, %Array* }*, { %Array*, %Array* }** %220
  %222 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %221, i64 0, i32 0
  %223 = load %Array*, %Array** %222
  call void @__quantum__rt__array_update_alias_count(%Array* %223, i64 -1)
  %224 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %221, i64 0, i32 1
  %225 = load %Array*, %Array** %224
  call void @__quantum__rt__array_update_alias_count(%Array* %225, i64 -1)
  %226 = bitcast { %Array*, %Array* }* %221 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %226, i64 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %227 = add i64 %217, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %hamiltonianTerms, i64 -1)
  br label %exiting__13

header__20:                                       ; preds = %exiting__20, %exit__13
  %228 = phi i64 [ 0, %exit__13 ], [ %238, %exiting__20 ]
  %229 = icmp sle i64 %228, %171
  br i1 %229, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %230 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %228)
  %231 = bitcast i8* %230 to { %Array*, %Array* }**
  %232 = load { %Array*, %Array* }*, { %Array*, %Array* }** %231
  %233 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %232, i64 0, i32 0
  %234 = load %Array*, %Array** %233
  call void @__quantum__rt__array_update_reference_count(%Array* %234, i64 1)
  %235 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %232, i64 0, i32 1
  %236 = load %Array*, %Array** %235
  call void @__quantum__rt__array_update_reference_count(%Array* %236, i64 1)
  %237 = bitcast { %Array*, %Array* }* %232 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %237, i64 1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %238 = add i64 %228, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_reference_count(%Array* %ZData, i64 1)
  %239 = sub i64 %15, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %240 = phi i64 [ 0, %exit__20 ], [ %250, %exiting__21 ]
  %241 = icmp sle i64 %240, %239
  br i1 %241, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %242 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %240)
  %243 = bitcast i8* %242 to { %Array*, %Array* }**
  %244 = load { %Array*, %Array* }*, { %Array*, %Array* }** %243
  %245 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %244, i64 0, i32 0
  %246 = load %Array*, %Array** %245
  call void @__quantum__rt__array_update_reference_count(%Array* %246, i64 1)
  %247 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %244, i64 0, i32 1
  %248 = load %Array*, %Array** %247
  call void @__quantum__rt__array_update_reference_count(%Array* %248, i64 1)
  %249 = bitcast { %Array*, %Array* }* %244 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %249, i64 1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %250 = add i64 %240, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_reference_count(%Array* %ZZData, i64 1)
  %251 = sub i64 %29, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %252 = phi i64 [ 0, %exit__21 ], [ %262, %exiting__22 ]
  %253 = icmp sle i64 %252, %251
  br i1 %253, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %254 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %252)
  %255 = bitcast i8* %254 to { %Array*, %Array* }**
  %256 = load { %Array*, %Array* }*, { %Array*, %Array* }** %255
  %257 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %256, i64 0, i32 0
  %258 = load %Array*, %Array** %257
  call void @__quantum__rt__array_update_reference_count(%Array* %258, i64 1)
  %259 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %256, i64 0, i32 1
  %260 = load %Array*, %Array** %259
  call void @__quantum__rt__array_update_reference_count(%Array* %260, i64 1)
  %261 = bitcast { %Array*, %Array* }* %256 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %261, i64 1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %262 = add i64 %252, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_reference_count(%Array* %PQandPQQRData, i64 1)
  %263 = sub i64 %43, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %264 = phi i64 [ 0, %exit__22 ], [ %274, %exiting__23 ]
  %265 = icmp sle i64 %264, %263
  br i1 %265, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %266 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %264)
  %267 = bitcast i8* %266 to { %Array*, %Array* }**
  %268 = load { %Array*, %Array* }*, { %Array*, %Array* }** %267
  %269 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %268, i64 0, i32 0
  %270 = load %Array*, %Array** %269
  call void @__quantum__rt__array_update_reference_count(%Array* %270, i64 1)
  %271 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %268, i64 0, i32 1
  %272 = load %Array*, %Array** %271
  call void @__quantum__rt__array_update_reference_count(%Array* %272, i64 1)
  %273 = bitcast { %Array*, %Array* }* %268 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %273, i64 1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %274 = add i64 %264, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %h0123Data, i64 1)
  %275 = sub i64 %1, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %276 = phi i64 [ 0, %exit__23 ], [ %286, %exiting__24 ]
  %277 = icmp sle i64 %276, %275
  br i1 %277, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %278 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %276)
  %279 = bitcast i8* %278 to { %Array*, %Array* }**
  %280 = load { %Array*, %Array* }*, { %Array*, %Array* }** %279
  %281 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %280, i64 0, i32 0
  %282 = load %Array*, %Array** %281
  call void @__quantum__rt__array_update_alias_count(%Array* %282, i64 -1)
  %283 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %280, i64 0, i32 1
  %284 = load %Array*, %Array** %283
  call void @__quantum__rt__array_update_alias_count(%Array* %284, i64 -1)
  %285 = bitcast { %Array*, %Array* }* %280 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %285, i64 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %286 = add i64 %276, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i64 -1)
  %287 = sub i64 %15, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %288 = phi i64 [ 0, %exit__24 ], [ %298, %exiting__25 ]
  %289 = icmp sle i64 %288, %287
  br i1 %289, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %290 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %288)
  %291 = bitcast i8* %290 to { %Array*, %Array* }**
  %292 = load { %Array*, %Array* }*, { %Array*, %Array* }** %291
  %293 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %292, i64 0, i32 0
  %294 = load %Array*, %Array** %293
  call void @__quantum__rt__array_update_alias_count(%Array* %294, i64 -1)
  %295 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %292, i64 0, i32 1
  %296 = load %Array*, %Array** %295
  call void @__quantum__rt__array_update_alias_count(%Array* %296, i64 -1)
  %297 = bitcast { %Array*, %Array* }* %292 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %297, i64 -1)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %298 = add i64 %288, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i64 -1)
  %299 = sub i64 %29, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %300 = phi i64 [ 0, %exit__25 ], [ %310, %exiting__26 ]
  %301 = icmp sle i64 %300, %299
  br i1 %301, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %302 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %300)
  %303 = bitcast i8* %302 to { %Array*, %Array* }**
  %304 = load { %Array*, %Array* }*, { %Array*, %Array* }** %303
  %305 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %304, i64 0, i32 0
  %306 = load %Array*, %Array** %305
  call void @__quantum__rt__array_update_alias_count(%Array* %306, i64 -1)
  %307 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %304, i64 0, i32 1
  %308 = load %Array*, %Array** %307
  call void @__quantum__rt__array_update_alias_count(%Array* %308, i64 -1)
  %309 = bitcast { %Array*, %Array* }* %304 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %309, i64 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %310 = add i64 %300, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i64 -1)
  %311 = sub i64 %43, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %312 = phi i64 [ 0, %exit__26 ], [ %322, %exiting__27 ]
  %313 = icmp sle i64 %312, %311
  br i1 %313, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %314 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %312)
  %315 = bitcast i8* %314 to { %Array*, %Array* }**
  %316 = load { %Array*, %Array* }*, { %Array*, %Array* }** %315
  %317 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %316, i64 0, i32 0
  %318 = load %Array*, %Array** %317
  call void @__quantum__rt__array_update_alias_count(%Array* %318, i64 -1)
  %319 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %316, i64 0, i32 1
  %320 = load %Array*, %Array** %319
  call void @__quantum__rt__array_update_alias_count(%Array* %320, i64 -1)
  %321 = bitcast { %Array*, %Array* }* %316 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %321, i64 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %322 = add i64 %312, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i64 -1)
  %323 = sub i64 %58, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %324 = phi i64 [ 0, %exit__27 ], [ %335, %exiting__28 ]
  %325 = icmp sle i64 %324, %323
  br i1 %325, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %326 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %324)
  %327 = bitcast i8* %326 to { { double, double }*, %Array* }**
  %328 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %327
  %329 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %328, i64 0, i32 0
  %330 = load { double, double }*, { double, double }** %329
  %331 = bitcast { double, double }* %330 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %331, i64 -1)
  %332 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %328, i64 0, i32 1
  %333 = load %Array*, %Array** %332
  call void @__quantum__rt__array_update_alias_count(%Array* %333, i64 -1)
  %334 = bitcast { { double, double }*, %Array* }* %328 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %334, i64 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %335 = add i64 %324, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_alias_count(%Array* %inputStateTerms, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i64 -1)
  %336 = sub i64 %58, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %337 = phi i64 [ 0, %exit__28 ], [ %348, %exiting__29 ]
  %338 = icmp sle i64 %337, %336
  br i1 %338, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %339 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %337)
  %340 = bitcast i8* %339 to { { double, double }*, %Array* }**
  %341 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %340
  %342 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %341, i64 0, i32 0
  %343 = load { double, double }*, { double, double }** %342
  %344 = bitcast { double, double }* %343 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %344, i64 -1)
  %345 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %341, i64 0, i32 1
  %346 = load %Array*, %Array** %345
  call void @__quantum__rt__array_update_alias_count(%Array* %346, i64 -1)
  %347 = bitcast { { double, double }*, %Array* }* %341 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %347, i64 -1)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %348 = add i64 %337, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_update_alias_count(%Array* %inputStateTerms, i64 -1)
  %349 = sub i64 %1, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %350 = phi i64 [ 0, %exit__29 ], [ %360, %exiting__30 ]
  %351 = icmp sle i64 %350, %349
  br i1 %351, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %352 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %350)
  %353 = bitcast i8* %352 to { %Array*, %Array* }**
  %354 = load { %Array*, %Array* }*, { %Array*, %Array* }** %353
  %355 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %354, i64 0, i32 0
  %356 = load %Array*, %Array** %355
  call void @__quantum__rt__array_update_alias_count(%Array* %356, i64 -1)
  %357 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %354, i64 0, i32 1
  %358 = load %Array*, %Array** %357
  call void @__quantum__rt__array_update_alias_count(%Array* %358, i64 -1)
  %359 = bitcast { %Array*, %Array* }* %354 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %359, i64 -1)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %360 = add i64 %350, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i64 -1)
  %361 = sub i64 %15, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %362 = phi i64 [ 0, %exit__30 ], [ %372, %exiting__31 ]
  %363 = icmp sle i64 %362, %361
  br i1 %363, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %364 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %362)
  %365 = bitcast i8* %364 to { %Array*, %Array* }**
  %366 = load { %Array*, %Array* }*, { %Array*, %Array* }** %365
  %367 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %366, i64 0, i32 0
  %368 = load %Array*, %Array** %367
  call void @__quantum__rt__array_update_alias_count(%Array* %368, i64 -1)
  %369 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %366, i64 0, i32 1
  %370 = load %Array*, %Array** %369
  call void @__quantum__rt__array_update_alias_count(%Array* %370, i64 -1)
  %371 = bitcast { %Array*, %Array* }* %366 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %371, i64 -1)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %372 = add i64 %362, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i64 -1)
  %373 = sub i64 %29, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %374 = phi i64 [ 0, %exit__31 ], [ %384, %exiting__32 ]
  %375 = icmp sle i64 %374, %373
  br i1 %375, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %376 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %374)
  %377 = bitcast i8* %376 to { %Array*, %Array* }**
  %378 = load { %Array*, %Array* }*, { %Array*, %Array* }** %377
  %379 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %378, i64 0, i32 0
  %380 = load %Array*, %Array** %379
  call void @__quantum__rt__array_update_alias_count(%Array* %380, i64 -1)
  %381 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %378, i64 0, i32 1
  %382 = load %Array*, %Array** %381
  call void @__quantum__rt__array_update_alias_count(%Array* %382, i64 -1)
  %383 = bitcast { %Array*, %Array* }* %378 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %383, i64 -1)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %384 = add i64 %374, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i64 -1)
  %385 = sub i64 %43, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %386 = phi i64 [ 0, %exit__32 ], [ %396, %exiting__33 ]
  %387 = icmp sle i64 %386, %385
  br i1 %387, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %388 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %386)
  %389 = bitcast i8* %388 to { %Array*, %Array* }**
  %390 = load { %Array*, %Array* }*, { %Array*, %Array* }** %389
  %391 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %390, i64 0, i32 0
  %392 = load %Array*, %Array** %391
  call void @__quantum__rt__array_update_alias_count(%Array* %392, i64 -1)
  %393 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %390, i64 0, i32 1
  %394 = load %Array*, %Array** %393
  call void @__quantum__rt__array_update_alias_count(%Array* %394, i64 -1)
  %395 = bitcast { %Array*, %Array* }* %390 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %395, i64 -1)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %396 = add i64 %386, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i64 -1)
  br label %header__34

header__34:                                       ; preds = %exiting__34, %exit__33
  %397 = phi i64 [ 0, %exit__33 ], [ %404, %exiting__34 ]
  %398 = icmp sle i64 %397, 3
  br i1 %398, label %body__34, label %exit__34

body__34:                                         ; preds = %header__34
  %399 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %397)
  %400 = bitcast i8* %399 to %Array**
  %401 = load %Array*, %Array** %400
  %402 = call i64 @__quantum__rt__array_get_size_1d(%Array* %401)
  %403 = sub i64 %402, 1
  br label %header__35

exiting__34:                                      ; preds = %exit__35
  %404 = add i64 %397, 1
  br label %header__34

exit__34:                                         ; preds = %header__34
  call void @__quantum__rt__array_update_alias_count(%Array* %hamiltonianTermArray, i64 -1)
  br label %header__36

header__35:                                       ; preds = %exiting__35, %body__34
  %405 = phi i64 [ 0, %body__34 ], [ %415, %exiting__35 ]
  %406 = icmp sle i64 %405, %403
  br i1 %406, label %body__35, label %exit__35

body__35:                                         ; preds = %header__35
  %407 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %401, i64 %405)
  %408 = bitcast i8* %407 to { %Array*, %Array* }**
  %409 = load { %Array*, %Array* }*, { %Array*, %Array* }** %408
  %410 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %409, i64 0, i32 0
  %411 = load %Array*, %Array** %410
  call void @__quantum__rt__array_update_alias_count(%Array* %411, i64 -1)
  %412 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %409, i64 0, i32 1
  %413 = load %Array*, %Array** %412
  call void @__quantum__rt__array_update_alias_count(%Array* %413, i64 -1)
  %414 = bitcast { %Array*, %Array* }* %409 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %414, i64 -1)
  br label %exiting__35

exiting__35:                                      ; preds = %body__35
  %415 = add i64 %405, 1
  br label %header__35

exit__35:                                         ; preds = %header__35
  call void @__quantum__rt__array_update_alias_count(%Array* %401, i64 -1)
  br label %exiting__34

header__36:                                       ; preds = %exiting__36, %exit__34
  %416 = phi i64 [ 0, %exit__34 ], [ %423, %exiting__36 ]
  %417 = icmp sle i64 %416, 3
  br i1 %417, label %body__36, label %exit__36

body__36:                                         ; preds = %header__36
  %418 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %416)
  %419 = bitcast i8* %418 to %Array**
  %420 = load %Array*, %Array** %419
  %421 = call i64 @__quantum__rt__array_get_size_1d(%Array* %420)
  %422 = sub i64 %421, 1
  br label %header__37

exiting__36:                                      ; preds = %exit__37
  %423 = add i64 %416, 1
  br label %header__36

exit__36:                                         ; preds = %header__36
  call void @__quantum__rt__array_update_reference_count(%Array* %hamiltonianTermArray, i64 -1)
  ret double %170

header__37:                                       ; preds = %exiting__37, %body__36
  %424 = phi i64 [ 0, %body__36 ], [ %434, %exiting__37 ]
  %425 = icmp sle i64 %424, %422
  br i1 %425, label %body__37, label %exit__37

body__37:                                         ; preds = %header__37
  %426 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %420, i64 %424)
  %427 = bitcast i8* %426 to { %Array*, %Array* }**
  %428 = load { %Array*, %Array* }*, { %Array*, %Array* }** %427
  %429 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %428, i64 0, i32 0
  %430 = load %Array*, %Array** %429
  call void @__quantum__rt__array_update_reference_count(%Array* %430, i64 -1)
  %431 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %428, i64 0, i32 1
  %432 = load %Array*, %Array** %431
  call void @__quantum__rt__array_update_reference_count(%Array* %432, i64 -1)
  %433 = bitcast { %Array*, %Array* }* %428 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %433, i64 -1)
  br label %exiting__37

exiting__37:                                      ; preds = %body__37
  %434 = add i64 %424, 1
  br label %header__37

exit__37:                                         ; preds = %header__37
  call void @__quantum__rt__array_update_reference_count(%Array* %420, i64 -1)
  br label %exiting__36
}

define %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %bitString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions)
  call void @__quantum__rt__array_update_alias_count(%Array* %bitString, i64 1)
  %0 = load i2, i2* @PauliZ
  %1 = call %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %0, i1 true, %Array* %bitString)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bitString, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bitString, i64 -1)
  ret %Array* %1
}

define %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %1 = srem i64 %0, 2
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i32 85, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @1, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nFermions)
  %5 = sub i64 %nFermions, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %6 = phi i64 [ 0, %continue__1 ], [ %10, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %6)
  %9 = bitcast i8* %8 to i1*
  store i1 false, i1* %9
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %zString = alloca %Array*
  store %Array* %4, %Array** %zString
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 1)
  %11 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %23, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %12)
  %15 = bitcast i8* %14 to i64*
  %fermionIdx = load i64, i64* %15
  %16 = icmp sge i64 %fermionIdx, %nFermions
  br i1 %16, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__2
  %17 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @2, i32 0, i32 0))
  %18 = call %String* @__quantum__rt__int_to_string(i64 %fermionIdx)
  %19 = call %String* @__quantum__rt__string_concatenate(%String* %17, %String* %18)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i64 -1)
  %20 = call %String* @__quantum__rt__string_create(i32 14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i32 0, i32 0))
  %21 = call %String* @__quantum__rt__string_concatenate(%String* %19, %String* %20)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i64 -1)
  %22 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i64 -1)
  call void @__quantum__rt__fail(%String* %21)
  unreachable

continue__2:                                      ; preds = %body__2
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %23 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %24 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %continue__2
  %idx = phi i64 [ 0, %continue__2 ], [ %35, %exiting__3 ]
  %25 = icmp sle i64 %idx, %fermionIdx
  br i1 %25, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %26 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i64 -1)
  %27 = call %Array* @__quantum__rt__array_copy(%Array* %26, i1 false)
  %28 = icmp ne %Array* %26, %27
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %idx)
  %30 = bitcast i8* %29 to i1*
  %31 = load i1, i1* %30
  %32 = xor i1 %31, true
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %idx)
  %34 = bitcast i8* %33 to i1*
  store i1 %32, i1* %34
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i64 1)
  store %Array* %27, %Array** %zString
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  br label %exiting__2

header__4:                                        ; preds = %exiting__4, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__4 ]
  %37 = icmp sle i64 %36, %24
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %36)
  %39 = bitcast i8* %38 to i64*
  %fermionIdx__1 = load i64, i64* %39
  %40 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i64 -1)
  %41 = call %Array* @__quantum__rt__array_copy(%Array* %40, i1 false)
  %42 = icmp ne %Array* %40, %41
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %fermionIdx__1)
  %44 = bitcast i8* %43 to i1*
  store i1 false, i1* %44
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i64 1)
  store %Array* %41, %Array** %zString
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %45 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %46 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 -1)
  ret %Array* %46
}

define %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %pauli, i1 %bitApply, %Array* %bits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nBits)
  %1 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = load i2, i2* @PauliI
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %6 = bitcast i8* %5 to i2*
  store i2 %4, i2* %6
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %paulis = alloca %Array*
  store %Array* %0, %Array** %paulis
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 1)
  %8 = sub i64 %nBits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %9 = icmp sle i64 %idxBit, %8
  br i1 %9, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %10 = load %Array*, %Array** %paulis
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 -1)
  %11 = call %Array* @__quantum__rt__array_copy(%Array* %10, i1 false)
  %12 = icmp ne %Array* %10, %11
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %14 = bitcast i8* %13 to i1*
  %15 = load i1, i1* %14
  %16 = icmp eq i1 %15, %bitApply
  %17 = load i2, i2* @PauliI
  %18 = select i1 %16, i2 %pauli, i2 %17
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %idxBit)
  %20 = bitcast i8* %19 to i2*
  store i2 %18, i2* %20
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  store %Array* %11, %Array** %paulis
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %22 = load %Array*, %Array** %paulis
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 -1)
  ret %Array* %22
}

define { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %3, %Callable** %2
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1, [2 x void (%Tuple*, i64)*]* @MemoryManagement__1, %Tuple* %0)
  %5 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %4)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 -1)
  ret { %Callable* }* %5
}

define { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  store %Callable* %__Item1__, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item1__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i64 -1)
  ret { %Callable* }* %1
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %3 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body({ { %Array*, %Array* }*, %Array* }* %2)
  %4 = bitcast %Tuple* %result-tuple to { { %Callable* }* }*
  %5 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %4, i64 0, i32 0
  store { %Callable* }* %3, { %Callable* }** %5
  ret void
}

declare %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]*, [2 x void (%Tuple*, i64)*]*, %Tuple*)

define void @Lifted__PartialApplication__1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable* }*
  %4 = getelementptr { %Callable* }, { %Callable* }* %3, i64 0, i32 0
  %5 = load %Callable*, %Callable** %4
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %2 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %5, %Tuple* %6, %Tuple* %result-tuple)
  ret void
}

define void @MemoryManagement__1__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable* }*
  %1 = getelementptr { %Callable* }, { %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__1__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable* }*
  %1 = getelementptr { %Callable* }, { %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

declare void @__quantum__rt__callable_memory_management(i32, %Callable*, i64)

declare void @__quantum__rt__callable_update_reference_count(%Callable*, i64)

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___7a78c79bd6704fc695da565f6b88240d_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__body(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %0, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %initialStatePreparation, %Array* %excitations, %Array* %qubits) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %initialStatePreparation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i64 1)
  %nExcitations = call i64 @__quantum__rt__array_get_size_1d(%Array* %excitations)
  %0 = sub i64 %nExcitations, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %1)
  %4 = bitcast i8* %3 to { { double, double }*, %Array* }**
  %5 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %4
  %6 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i64 0, i32 0
  %7 = load { double, double }*, { double, double }** %6
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %11 = bitcast { { double, double }*, %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %excitations, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %14 = sub i64 %nExcitations, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %15)
  %18 = bitcast i8* %17 to double*
  store double 0.000000e+00, double* %18
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %coefficientsSqrtAbs = alloca %Array*
  store %Array* %13, %Array** %coefficientsSqrtAbs
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 1)
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %21 = sub i64 %nExcitations, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { double, double }*
  %26 = getelementptr { double, double }, { double, double }* %25, i64 0, i32 0
  %27 = getelementptr { double, double }, { double, double }* %25, i64 0, i32 1
  store double 0.000000e+00, double* %26
  store double 0.000000e+00, double* %27
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %22)
  %29 = bitcast i8* %28 to { double, double }**
  store { double, double }* %25, { double, double }** %29
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %coefficientsNewComplexPolar = alloca %Array*
  store %Array* %20, %Array** %coefficientsNewComplexPolar
  %31 = sub i64 %nExcitations, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %32 = phi i64 [ 0, %exit__3 ], [ %38, %exiting__4 ]
  %33 = icmp sle i64 %32, %31
  br i1 %33, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %32)
  %35 = bitcast i8* %34 to { double, double }**
  %36 = load { double, double }*, { double, double }** %35
  %37 = bitcast { double, double }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %38 = add i64 %32, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i64 1)
  %39 = sub i64 %nExcitations, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %40 = phi i64 [ 0, %exit__4 ], [ %46, %exiting__5 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %40)
  %43 = bitcast i8* %42 to { double, double }**
  %44 = load { double, double }*, { double, double }** %43
  %45 = bitcast { double, double }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i64 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %46 = add i64 %40, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i64 1)
  %47 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %48 = sub i64 %nExcitations, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %49 = phi i64 [ 0, %exit__5 ], [ %54, %exiting__6 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %51 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %49)
  %53 = bitcast i8* %52 to %Array**
  store %Array* %51, %Array** %53
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %54 = add i64 %49, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  %applyFlips = alloca %Array*
  store %Array* %47, %Array** %applyFlips
  %55 = sub i64 %nExcitations, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %56 = phi i64 [ 0, %exit__6 ], [ %61, %exiting__7 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %60 = load %Array*, %Array** %59
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i64 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %61 = add i64 %56, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i64 1)
  %62 = sub i64 %nExcitations, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %63 = phi i64 [ 0, %exit__7 ], [ %68, %exiting__8 ]
  %64 = icmp sle i64 %63, %62
  br i1 %64, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %63)
  %66 = bitcast i8* %65 to %Array**
  %67 = load %Array*, %Array** %66
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i64 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %68 = add i64 %63, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %47, i64 1)
  %69 = sub i64 %nExcitations, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %idx = phi i64 [ 0, %exit__8 ], [ %114, %exiting__9 ]
  %70 = icmp sle i64 %idx, %69
  br i1 %70, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %idx)
  %72 = bitcast i8* %71 to { { double, double }*, %Array* }**
  %73 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %72
  %74 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %73, i64 0, i32 0
  %x = load { double, double }*, { double, double }** %74
  %75 = bitcast { double, double }* %x to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %75, i64 1)
  %76 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %73, i64 0, i32 1
  %excitation = load %Array*, %Array** %76
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i64 1)
  %77 = load %Array*, %Array** %coefficientsSqrtAbs
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i64 -1)
  %78 = call %Array* @__quantum__rt__array_copy(%Array* %77, i1 false)
  %79 = icmp ne %Array* %77, %78
  %80 = getelementptr { double, double }, { double, double }* %x, i64 0, i32 0
  %81 = getelementptr { double, double }, { double, double }* %x, i64 0, i32 1
  %82 = load double, double* %80
  %83 = load double, double* %81
  %84 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %82, double %83)
  %85 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %84)
  %d = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %85)
  %86 = call double @__quantum__qis__sqrt__body(double %d)
  %87 = bitcast { double, double }* %84 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %87, i64 -1)
  %88 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %88, i64 -1)
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 %idx)
  %90 = bitcast i8* %89 to double*
  store double %86, double* %90
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i64 1)
  store %Array* %78, %Array** %coefficientsSqrtAbs
  %91 = load %Array*, %Array** %coefficientsNewComplexPolar
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i64 -1)
  %92 = call %Array* @__quantum__rt__array_copy(%Array* %91, i1 false)
  %93 = icmp ne %Array* %91, %92
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %78, i64 %idx)
  %95 = bitcast i8* %94 to double*
  %96 = load double, double* %95
  %97 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %82, double %83)
  %98 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %97)
  %99 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %98)
  %100 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %96, double %99)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %92, i64 %idx)
  %102 = bitcast i8* %101 to { double, double }**
  %103 = bitcast { double, double }* %100 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i64 1)
  %104 = load { double, double }*, { double, double }** %102
  %105 = bitcast { double, double }* %104 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %105, i64 -1)
  br i1 %93, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %body__9
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i64 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %body__9
  store { double, double }* %100, { double, double }** %102
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %92, i64 1)
  store %Array* %92, %Array** %coefficientsNewComplexPolar
  %106 = load %Array*, %Array** %applyFlips
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i64 -1)
  %107 = call %Array* @__quantum__rt__array_copy(%Array* %106, i1 false)
  %108 = icmp ne %Array* %106, %107
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %107, i64 %idx)
  %110 = bitcast i8* %109 to %Array**
  call void @__quantum__rt__array_update_reference_count(%Array* %excitation, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i64 1)
  %111 = load %Array*, %Array** %110
  call void @__quantum__rt__array_update_alias_count(%Array* %111, i64 -1)
  br i1 %108, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %condContinue__1
  call void @__quantum__rt__array_update_reference_count(%Array* %excitation, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %111, i64 -1)
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condContinue__1
  store %Array* %excitation, %Array** %110
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %107, i64 1)
  store %Array* %107, %Array** %applyFlips
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %75, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i64 -1)
  %112 = bitcast { double, double }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %112, i64 -1)
  %113 = bitcast { double, double }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %113, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %111, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i64 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %condContinue__2
  %114 = add i64 %idx, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  %115 = sitofp i64 %nExcitations to double
  %116 = call double @Microsoft__Quantum__Math__Lg__body(double %115)
  %nBitsIndices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %116)
  br label %repeat__1

repeat__1:                                        ; preds = %fixup__1, %exit__9
  %success = alloca i1
  store i1 false, i1* %success
  %117 = add i64 %nBitsIndices, 1
  %auxillary = call %Array* @__quantum__rt__qubit_allocate_array(i64 %117)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxillary, i64 1)
  %flag = call %Array* @__quantum__rt__qubit_allocate_array(i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %flag, i64 1)
  %118 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %119 = load %Array*, %Array** %applyFlips
  %120 = call %Array* @Microsoft__Quantum__Arrays___48e84d53d9ae40f3a6d22d7e74b4d7cc_Mapped__body(%Callable* %118, %Array* %119)
  %121 = call %Callable* @Microsoft__Quantum__Arrays___24918901619c4d50b0d734ebaa360ca5_LookupFunction__body(%Array* %120)
  %multiplexer = call %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %nExcitations, %Callable* %121)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %multiplexer, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i64 1)
  %122 = load %Array*, %Array** %coefficientsNewComplexPolar
  %123 = call %Callable* @Microsoft__Quantum__Preparation__StatePreparationComplexCoefficients__body(%Array* %122)
  %124 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  %125 = bitcast { %Array* }* %124 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %123, %Tuple* %125, %Tuple* null)
  %126 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %127 = bitcast %Tuple* %126 to { { %Array* }*, %Array* }*
  %128 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %127, i64 0, i32 0
  %129 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %127, i64 0, i32 1
  %130 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  store { %Array* }* %130, { %Array* }** %128
  store %Array* %qubits, %Array** %129
  call void @__quantum__rt__callable_invoke(%Callable* %multiplexer, %Tuple* %126, %Tuple* null)
  %131 = load %Array*, %Array** %coefficientsSqrtAbs
  %132 = call %Callable* @Microsoft__Quantum__Preparation__StatePreparationPositiveCoefficients__body(%Array* %131)
  %133 = call %Callable* @__quantum__rt__callable_copy(%Callable* %132, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %133, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %133)
  %134 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  %135 = bitcast { %Array* }* %134 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %133, %Tuple* %135, %Tuple* null)
  %136 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %137 = call %Callable* @Microsoft__Quantum__Canon___5461537378df4b6492e895a7d34e2041_ControlledOnInt__body(i64 0, %Callable* %136)
  %138 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %139 = bitcast %Tuple* %138 to { %Array*, %Qubit* }*
  %140 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %139, i64 0, i32 0
  %141 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %139, i64 0, i32 1
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %flag, i64 0)
  %143 = bitcast i8* %142 to %Qubit**
  %144 = load %Qubit*, %Qubit** %143
  store %Array* %auxillary, %Array** %140
  store %Qubit* %144, %Qubit** %141
  call void @__quantum__rt__callable_invoke(%Callable* %137, %Tuple* %138, %Tuple* null)
  %bases = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases, i64 0)
  %146 = bitcast i8* %145 to i2*
  %147 = load i2, i2* @PauliZ
  store i2 %147, i2* %146
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %flag, i64 1)
  %outcome = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %flag)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %flag, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bases, i64 -1)
  %148 = load %Result*, %Result** @ResultOne
  %149 = call i1 @__quantum__rt__result_equal(%Result* %outcome, %Result* %148)
  store i1 %149, i1* %success
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %flag)
  call void @__quantum__rt__qubit_release_array(%Array* %flag)
  %150 = getelementptr { %Array* }, { %Array* }* %124, i64 0, i32 0
  %151 = load %Array*, %Array** %150
  %152 = getelementptr { %Array* }, { %Array* }* %130, i64 0, i32 0
  %153 = load %Array*, %Array** %152
  %154 = getelementptr { %Array* }, { %Array* }* %134, i64 0, i32 0
  %155 = load %Array*, %Array** %154
  call void @__quantum__rt__array_update_alias_count(%Array* %flag, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %multiplexer, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %flag, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %118, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %118, i64 -1)
  %156 = call i64 @__quantum__rt__array_get_size_1d(%Array* %120)
  %157 = sub i64 %156, 1
  br label %header__10

until__1:                                         ; preds = %exit__10
  br i1 %149, label %rend__1, label %fixup__1

fixup__1:                                         ; preds = %until__1
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits)
  br label %repeat__1

rend__1:                                          ; preds = %until__1
  %158 = load %Array*, %Array** %coefficientsSqrtAbs
  %159 = load %Array*, %Array** %coefficientsNewComplexPolar
  %160 = load %Array*, %Array** %applyFlips
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %initialStatePreparation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i64 -1)
  %161 = sub i64 %nExcitations, 1
  br label %header__11

header__10:                                       ; preds = %exiting__10, %repeat__1
  %162 = phi i64 [ 0, %repeat__1 ], [ %167, %exiting__10 ]
  %163 = icmp sle i64 %162, %157
  br i1 %163, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %164 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 %162)
  %165 = bitcast i8* %164 to %Callable**
  %166 = load %Callable*, %Callable** %165
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %166, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %166, i64 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %167 = add i64 %162, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %121, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %121, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %multiplexer, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %multiplexer, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %123, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %123, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %151, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %125, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %153, i64 -1)
  %168 = bitcast { %Array* }* %130 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %168, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %126, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %132, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %132, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %133, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %133, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %155, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %135, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %136, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %136, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %137, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %137, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i64 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %outcome, i64 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %auxillary)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxillary, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxillary, i64 -1)
  br label %until__1

header__11:                                       ; preds = %exiting__11, %rend__1
  %169 = phi i64 [ 0, %rend__1 ], [ %180, %exiting__11 ]
  %170 = icmp sle i64 %169, %161
  br i1 %170, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %171 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %169)
  %172 = bitcast i8* %171 to { { double, double }*, %Array* }**
  %173 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %172
  %174 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %173, i64 0, i32 0
  %175 = load { double, double }*, { double, double }** %174
  %176 = bitcast { double, double }* %175 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %176, i64 -1)
  %177 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %173, i64 0, i32 1
  %178 = load %Array*, %Array** %177
  call void @__quantum__rt__array_update_alias_count(%Array* %178, i64 -1)
  %179 = bitcast { { double, double }*, %Array* }* %173 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %179, i64 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %180 = add i64 %169, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %excitations, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %158, i64 -1)
  %181 = call i64 @__quantum__rt__array_get_size_1d(%Array* %159)
  %182 = sub i64 %181, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %183 = phi i64 [ 0, %exit__11 ], [ %189, %exiting__12 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %183)
  %186 = bitcast i8* %185 to { double, double }**
  %187 = load { double, double }*, { double, double }** %186
  %188 = bitcast { double, double }* %187 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %188, i64 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %189 = add i64 %183, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %159, i64 -1)
  %190 = call i64 @__quantum__rt__array_get_size_1d(%Array* %160)
  %191 = sub i64 %190, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %192 = phi i64 [ 0, %exit__12 ], [ %197, %exiting__13 ]
  %193 = icmp sle i64 %192, %191
  br i1 %193, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %160, i64 %192)
  %195 = bitcast i8* %194 to %Array**
  %196 = load %Array*, %Array** %195
  call void @__quantum__rt__array_update_alias_count(%Array* %196, i64 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %197 = add i64 %192, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %160, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 -1)
  %198 = sub i64 %nExcitations, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %199 = phi i64 [ 0, %exit__13 ], [ %205, %exiting__14 ]
  %200 = icmp sle i64 %199, %198
  br i1 %200, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %199)
  %202 = bitcast i8* %201 to { double, double }**
  %203 = load { double, double }*, { double, double }** %202
  %204 = bitcast { double, double }* %203 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %204, i64 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %205 = add i64 %199, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i64 -1)
  %206 = sub i64 %nExcitations, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %207 = phi i64 [ 0, %exit__14 ], [ %212, %exiting__15 ]
  %208 = icmp sle i64 %207, %206
  br i1 %208, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %207)
  %210 = bitcast i8* %209 to %Array**
  %211 = load %Array*, %Array** %210
  call void @__quantum__rt__array_update_reference_count(%Array* %211, i64 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %212 = add i64 %207, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %47, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %158, i64 -1)
  %213 = sub i64 %181, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %214 = phi i64 [ 0, %exit__15 ], [ %220, %exiting__16 ]
  %215 = icmp sle i64 %214, %213
  br i1 %215, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %216 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %214)
  %217 = bitcast i8* %216 to { double, double }**
  %218 = load { double, double }*, { double, double }** %217
  %219 = bitcast { double, double }* %218 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %219, i64 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %220 = add i64 %214, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_reference_count(%Array* %159, i64 -1)
  %221 = sub i64 %190, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %222 = phi i64 [ 0, %exit__16 ], [ %227, %exiting__17 ]
  %223 = icmp sle i64 %222, %221
  br i1 %223, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %224 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %160, i64 %222)
  %225 = bitcast i8* %224 to %Array**
  %226 = load %Array*, %Array** %225
  call void @__quantum__rt__array_update_reference_count(%Array* %226, i64 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %227 = add i64 %222, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_reference_count(%Array* %160, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr { %Array* }, { %Array* }* %0, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  call void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__body(%Array* %2)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr { %Array* }, { %Array* }* %0, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  call void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__adj(%Array* %2)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctl(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctladj(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Array* }*, %Array* }*
  %1 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i64 0, i32 1
  %3 = load { i64, %Array* }*, { i64, %Array* }** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %3, %Array* %4)
  ret void
}

define void @Lifted__PartialApplication__2__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Array* }*
  %7 = getelementptr { i64, %Array* }, { i64, %Array* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, %Array* }, { i64, %Array* }* %6, i64 0, i32 1
  store i64 %2, i64* %7
  store %Array* %4, %Array** %8
  %9 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %10 = getelementptr { %Array* }, { %Array* }* %9, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { { i64, %Array* }*, %Array* }*
  %14 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %13, i64 0, i32 1
  store { i64, %Array* }* %6, { i64, %Array* }** %14
  store %Array* %11, %Array** %15
  %16 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @MemoryManagement__2__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 0
  %13 = load { double, double }*, { double, double }** %12
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 %count-change)
  %15 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 1
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__2__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__2 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 0
  %13 = load { double, double }*, { double, double }** %12
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 %count-change)
  %15 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 1
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i64 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i64 %count-change)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %7, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

declare void @__quantum__rt__callable_update_alias_count(%Callable*, i64)

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %initialStatePreparation, %Array* %clusterOperator, double %trotterStepSize, %Array* %qubits) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %initialStatePreparation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %clusterOperator)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %clusterOperator, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %clusterOperatorGeneratorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %clusterOperator)
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %clusterOperatorGeneratorSystem, i64 0, i32 1
  %15 = load %Callable*, %Callable** %14
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i64 1)
  %16 = bitcast { i64, %Callable* }* %clusterOperatorGeneratorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i64 1)
  %17 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body()
  %evolutionGenerator = call { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %17, { i64, %Callable* }* %clusterOperatorGeneratorSystem)
  %18 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %19 = load { %Callable* }*, { %Callable* }** %18
  %20 = getelementptr { %Callable* }, { %Callable* }* %19, i64 0, i32 0
  %21 = load %Callable*, %Callable** %20
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i64 1)
  %22 = bitcast { %Callable* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i64 1)
  %23 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %24 = load { i64, %Callable* }*, { i64, %Callable* }** %23
  %25 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %24, i64 0, i32 1
  %26 = load %Callable*, %Callable** %25
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i64 1)
  %27 = bitcast { i64, %Callable* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i64 1)
  %28 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i64 1)
  %29 = call { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 1)
  %30 = getelementptr { %Callable* }, { %Callable* }* %29, i64 0, i32 0
  %simulationAlgorithm = load %Callable*, %Callable** %30
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %simulationAlgorithm, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i64 1)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %33 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i64 0, i32 0
  %34 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i64 0, i32 1
  %35 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i64 0, i32 2
  store %Callable* %simulationAlgorithm, %Callable** %33
  store double 1.000000e+00, double* %34
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %35
  %oracle = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3, [2 x void (%Tuple*, i64)*]* @MemoryManagement__3, %Tuple* %31)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array* }*
  %38 = getelementptr { %Array* }, { %Array* }* %37, i64 0, i32 0
  store %Array* %qubits, %Array** %38
  call void @__quantum__rt__callable_invoke(%Callable* %initialStatePreparation, %Tuple* %36, %Tuple* null)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Array* }*
  %41 = getelementptr { %Array* }, { %Array* }* %40, i64 0, i32 0
  store %Array* %qubits, %Array** %41
  call void @__quantum__rt__callable_invoke(%Callable* %oracle, %Tuple* %39, %Tuple* null)
  %42 = getelementptr { %Callable* }, { %Callable* }* %17, i64 0, i32 0
  %43 = load %Callable*, %Callable** %42
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %initialStatePreparation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i64 -1)
  %44 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %45 = phi i64 [ 0, %exit__1 ], [ %56, %exiting__2 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %45)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %48
  %50 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i64 0, i32 0
  %51 = load { double, double }*, { double, double }** %50
  %52 = bitcast { double, double }* %51 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i64 -1)
  %53 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i64 0, i32 1
  %54 = load %Array*, %Array** %53
  call void @__quantum__rt__array_update_alias_count(%Array* %54, i64 -1)
  %55 = bitcast { { double, double }*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %56 = add i64 %45, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %clusterOperator, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %simulationAlgorithm, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %43, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i64 -1)
  %57 = bitcast { %Callable* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i64 -1)
  %58 = bitcast { %Callable* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i64 -1)
  ret void
}

declare %Array* @__quantum__rt__array_slice_1d(%Array*, %Range, i1)

define { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %indices) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %1 = bitcast i8* %0 to i64*
  %p = load i64, i64* %1
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %3 = bitcast i8* %2 to i64*
  %q = load i64, i64* %3
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 2)
  %5 = bitcast i8* %4 to i64*
  %r = load i64, i64* %5
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %7 = bitcast i8* %6 to i64*
  %s = load i64, i64* %7
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %10 = icmp sle i64 %9, 3
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %9)
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %sorted = alloca %Array*
  store %Array* %8, %Array** %sorted
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 1)
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %16 = icmp sle i64 %15, 7
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %15)
  %18 = bitcast i8* %17 to double*
  store double 0.000000e+00, double* %18
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %signs = alloca %Array*
  store %Array* %14, %Array** %signs
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 1)
  %sign = alloca double
  store double 1.000000e+00, double* %sign
  %20 = icmp sgt i64 %p, %q
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  store double -1.000000e+00, double* %sign
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %exit__2
  %21 = icmp sgt i64 %r, %s
  br i1 %21, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %22 = load double, double* %sign
  %23 = fmul double %22, -1.000000e+00
  store double %23, double* %sign
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to i64*
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 1)
  %28 = bitcast i8* %27 to i64*
  store i64 %p, i64* %26
  store i64 %q, i64* %28
  %29 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %24)
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i64*
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 1)
  %34 = bitcast i8* %33 to i64*
  store i64 %r, i64* %32
  store i64 %s, i64* %34
  %35 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %30)
  %36 = icmp sgt i64 %29, %35
  br i1 %36, label %then0__3, label %else__1

then0__3:                                         ; preds = %continue__2
  %37 = load double, double* %sign
  %38 = fmul double %37, -1.000000e+00
  store double %38, double* %sign
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to i64*
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 1)
  %43 = bitcast i8* %42 to i64*
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 2)
  %45 = bitcast i8* %44 to i64*
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 3)
  %47 = bitcast i8* %46 to i64*
  %48 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 0)
  %50 = bitcast i8* %49 to i64*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 1)
  %52 = bitcast i8* %51 to i64*
  store i64 %r, i64* %50
  store i64 %s, i64* %52
  %53 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %48)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i64 -1)
  %54 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 0)
  %56 = bitcast i8* %55 to i64*
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 1)
  %58 = bitcast i8* %57 to i64*
  store i64 %r, i64* %56
  store i64 %s, i64* %58
  %59 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i64 -1)
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i64*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i64*
  store i64 %p, i64* %62
  store i64 %q, i64* %64
  %65 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %60)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i64 -1)
  %66 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 0)
  %68 = bitcast i8* %67 to i64*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 1)
  %70 = bitcast i8* %69 to i64*
  store i64 %p, i64* %68
  store i64 %q, i64* %70
  %71 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %66)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i64 -1)
  store i64 %53, i64* %41
  store i64 %59, i64* %43
  store i64 %65, i64* %45
  store i64 %71, i64* %47
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 -1)
  store %Array* %39, %Array** %sorted
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  br label %continue__3

else__1:                                          ; preds = %continue__2
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i64*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i64*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i64*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i64*
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i64*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i64*
  store i64 %p, i64* %83
  store i64 %q, i64* %85
  %86 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %81)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i64 -1)
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i64*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i64*
  store i64 %p, i64* %89
  store i64 %q, i64* %91
  %92 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %87)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i64 -1)
  %93 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %93, i64 0)
  %95 = bitcast i8* %94 to i64*
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %93, i64 1)
  %97 = bitcast i8* %96 to i64*
  store i64 %r, i64* %95
  store i64 %s, i64* %97
  %98 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %93)
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i64 -1)
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i64*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i64*
  store i64 %r, i64* %101
  store i64 %s, i64* %103
  %104 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %99)
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i64 -1)
  store i64 %86, i64* %74
  store i64 %92, i64* %76
  store i64 %98, i64* %78
  store i64 %104, i64* %80
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i64 1)
  %105 = load %Array*, %Array** %sorted
  call void @__quantum__rt__array_update_alias_count(%Array* %105, i64 -1)
  store %Array* %72, %Array** %sorted
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %else__1, %then0__3
  %106 = load %Array*, %Array** %sorted
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 0)
  %108 = bitcast i8* %107 to i64*
  %p1 = load i64, i64* %108
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 1)
  %110 = bitcast i8* %109 to i64*
  %q1 = load i64, i64* %110
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 2)
  %112 = bitcast i8* %111 to i64*
  %r1 = load i64, i64* %112
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 3)
  %114 = bitcast i8* %113 to i64*
  %s1 = load i64, i64* %114
  %115 = icmp slt i64 %q1, %r1
  br i1 %115, label %then0__4, label %test1__1

then0__4:                                         ; preds = %continue__3
  %116 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %117 = bitcast %Tuple* %116 to { %Array*, %Array*, double }*
  %118 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %117, i64 0, i32 0
  %119 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %117, i64 0, i32 1
  %120 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %117, i64 0, i32 2
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 0)
  %123 = bitcast i8* %122 to i64*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 1)
  %125 = bitcast i8* %124 to i64*
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 2)
  %127 = bitcast i8* %126 to i64*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 3)
  %129 = bitcast i8* %128 to i64*
  store i64 %p1, i64* %123
  store i64 %q1, i64* %125
  store i64 %r1, i64* %127
  store i64 %s1, i64* %129
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to double*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to double*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to double*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to double*
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 4)
  %140 = bitcast i8* %139 to double*
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 5)
  %142 = bitcast i8* %141 to double*
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 6)
  %144 = bitcast i8* %143 to double*
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 7)
  %146 = bitcast i8* %145 to double*
  store double 1.000000e+00, double* %132
  store double -1.000000e+00, double* %134
  store double -1.000000e+00, double* %136
  store double -1.000000e+00, double* %138
  store double 1.000000e+00, double* %140
  store double 1.000000e+00, double* %142
  store double 1.000000e+00, double* %144
  store double -1.000000e+00, double* %146
  %147 = load double, double* %sign
  store %Array* %121, %Array** %118
  store %Array* %130, %Array** %119
  store double %147, double* %120
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  ret { %Array*, %Array*, double }* %117

test1__1:                                         ; preds = %continue__3
  %148 = icmp sgt i64 %q1, %r1
  %149 = icmp slt i64 %q1, %s1
  %150 = and i1 %148, %149
  br i1 %150, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %151 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %152 = bitcast %Tuple* %151 to { %Array*, %Array*, double }*
  %153 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %152, i64 0, i32 0
  %154 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %152, i64 0, i32 1
  %155 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %152, i64 0, i32 2
  %156 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 0)
  %158 = bitcast i8* %157 to i64*
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 1)
  %160 = bitcast i8* %159 to i64*
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 2)
  %162 = bitcast i8* %161 to i64*
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 3)
  %164 = bitcast i8* %163 to i64*
  store i64 %p1, i64* %158
  store i64 %r1, i64* %160
  store i64 %q1, i64* %162
  store i64 %s1, i64* %164
  %165 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 0)
  %167 = bitcast i8* %166 to double*
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 1)
  %169 = bitcast i8* %168 to double*
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 2)
  %171 = bitcast i8* %170 to double*
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 3)
  %173 = bitcast i8* %172 to double*
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 4)
  %175 = bitcast i8* %174 to double*
  %176 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 5)
  %177 = bitcast i8* %176 to double*
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 6)
  %179 = bitcast i8* %178 to double*
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 7)
  %181 = bitcast i8* %180 to double*
  store double -1.000000e+00, double* %167
  store double -1.000000e+00, double* %169
  store double -1.000000e+00, double* %171
  store double 1.000000e+00, double* %173
  store double -1.000000e+00, double* %175
  store double 1.000000e+00, double* %177
  store double 1.000000e+00, double* %179
  store double 1.000000e+00, double* %181
  %182 = load double, double* %sign
  store %Array* %156, %Array** %153
  store %Array* %165, %Array** %154
  store double %182, double* %155
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  ret { %Array*, %Array*, double }* %152

test2__1:                                         ; preds = %test1__1
  %183 = icmp sgt i64 %q1, %r1
  %184 = icmp sgt i64 %q1, %s1
  %185 = and i1 %183, %184
  br i1 %185, label %then2__1, label %else__2

then2__1:                                         ; preds = %test2__1
  %186 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %187 = bitcast %Tuple* %186 to { %Array*, %Array*, double }*
  %188 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %187, i64 0, i32 0
  %189 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %187, i64 0, i32 1
  %190 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %187, i64 0, i32 2
  %191 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 0)
  %193 = bitcast i8* %192 to i64*
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 1)
  %195 = bitcast i8* %194 to i64*
  %196 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 2)
  %197 = bitcast i8* %196 to i64*
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 3)
  %199 = bitcast i8* %198 to i64*
  store i64 %p1, i64* %193
  store i64 %r1, i64* %195
  store i64 %s1, i64* %197
  store i64 %q1, i64* %199
  %200 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 0)
  %202 = bitcast i8* %201 to double*
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 1)
  %204 = bitcast i8* %203 to double*
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 2)
  %206 = bitcast i8* %205 to double*
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 3)
  %208 = bitcast i8* %207 to double*
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 4)
  %210 = bitcast i8* %209 to double*
  %211 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 5)
  %212 = bitcast i8* %211 to double*
  %213 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 6)
  %214 = bitcast i8* %213 to double*
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 7)
  %216 = bitcast i8* %215 to double*
  store double 1.000000e+00, double* %202
  store double 1.000000e+00, double* %204
  store double -1.000000e+00, double* %206
  store double 1.000000e+00, double* %208
  store double -1.000000e+00, double* %210
  store double 1.000000e+00, double* %212
  store double -1.000000e+00, double* %214
  store double -1.000000e+00, double* %216
  %217 = load double, double* %sign
  store %Array* %191, %Array** %188
  store %Array* %200, %Array** %189
  store double %217, double* %190
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  ret { %Array*, %Array*, double }* %187

else__2:                                          ; preds = %test2__1
  %218 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @0, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  call void @__quantum__rt__fail(%String* %218)
  unreachable
}

define i64 @Microsoft__Quantum__Math__Min__body(%Array* %values) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1
  %min = alloca i64
  store i64 %2, i64* %min
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6
  %8 = load i64, i64* %min
  %9 = icmp slt i64 %7, %8
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %min
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = load i64, i64* %min
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i64 -1)
  ret i64 %14
}

define i64 @Microsoft__Quantum__Math__Max__body(%Array* %values) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1
  %max = alloca i64
  store i64 %2, i64* %max
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6
  %8 = load i64, i64* %max
  %9 = icmp sgt i64 %7, %8
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %max
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = load i64, i64* %max
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i64 -1)
  ret i64 %14
}

declare %String* @__quantum__rt__string_create(i32, i8*)

declare void @__quantum__rt__fail(%String*)

declare %String* @__quantum__rt__int_to_string(i64)

declare %String* @__quantum__rt__string_concatenate(%String*, %String*)

declare void @__quantum__rt__string_update_reference_count(%String*, i64)

define { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %data) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i64 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %15 = bitcast %Tuple* %14 to { %Callable*, %Array* }*
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %15, i64 0, i32 1
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %18, %Callable** %16
  store %Array* %data, %Array** %17
  %19 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__4, [2 x void (%Tuple*, i64)*]* @MemoryManagement__4, %Tuple* %14)
  %20 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %0, %Callable* %19)
  %21 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %22 = phi i64 [ 0, %exit__1 ], [ %33, %exiting__2 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %22)
  %25 = bitcast i8* %24 to { { double, double }*, %Array* }**
  %26 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %25
  %27 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %26, i64 0, i32 0
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i64 1)
  %30 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %26, i64 0, i32 1
  %31 = load %Array*, %Array** %30
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i64 1)
  %32 = bitcast { { double, double }*, %Array* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %data, i64 1)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %46, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %35)
  %38 = bitcast i8* %37 to { { double, double }*, %Array* }**
  %39 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %38
  %40 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i64 0, i32 0
  %41 = load { double, double }*, { double, double }** %40
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i64 -1)
  %43 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i64 0, i32 1
  %44 = load %Array*, %Array** %43
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i64 -1)
  %45 = bitcast { { double, double }*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i64 -1)
  ret { i64, %Callable* }* %20
}

define { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %__Item1__, { i64, %Callable* }* %__Item2__) {
entry:
  %0 = getelementptr { %Callable* }, { %Callable* }* %__Item1__, i64 0, i32 0
  %1 = load %Callable*, %Callable** %0
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %1, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i64 1)
  %2 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i64 0, i32 1
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 1)
  %5 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { { %Callable* }*, { i64, %Callable* }* }*
  %8 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %7, i64 0, i32 0
  %9 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %7, i64 0, i32 1
  store { %Callable* }* %__Item1__, { %Callable* }** %8
  store { i64, %Callable* }* %__Item2__, { i64, %Callable* }** %9
  %10 = getelementptr { %Callable* }, { %Callable* }* %__Item1__, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %11, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i64 1)
  %14 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 1)
  %15 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %1, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  ret { { %Callable* }*, { i64, %Callable* }* }* %7
}

define { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, double, i64 }*
  %2 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store double %trotterStepSize, double* %3
  store i64 %trotterOrder, i64* %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__30, [2 x void (%Tuple*, i64)*]* @MemoryManagement__19, %Tuple* %0)
  %7 = call { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %6)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  ret { %Callable* }* %7
}

define void @Lifted__PartialApplication__3__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i64 0, i32 2
  store double %2, double* %10
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__3__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i64 0, i32 2
  store double %2, double* %10
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__3__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i64 0, i32 2
  store double %7, double* %12
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13
  store %Array* %4, %Array** %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i64 0, i32 1
  store %Array* %3, %Array** %17
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18
  %19 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__3__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i64 0, i32 2
  store double %7, double* %12
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13
  store %Array* %4, %Array** %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i64 0, i32 1
  store %Array* %3, %Array** %17
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18
  %19 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @MemoryManagement__3__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i64 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 %count-change)
  %10 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__3__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 %count-change)
  %10 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %13, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i64 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

declare void @__quantum__rt__callable_invoke(%Callable*, %Tuple*, %Tuple*)

define { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorIndex__body({ { double, double }*, %Array* }* %data) {
entry:
  %0 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %data, i64 0, i32 0
  %1 = load { double, double }*, { double, double }** %0
  %2 = bitcast { double, double }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %data, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %4 = bitcast { { double, double }*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 0
  %real = load double, double* %5
  %6 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 1
  %imaginary = load double, double* %6
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %8 = icmp eq i64 %7, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %10 = bitcast %Tuple* %9 to { %Array*, %Array* }*
  %11 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %10, i64 0, i32 0
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %10, i64 0, i32 1
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to double*
  store double %real, double* %18
  store %Array* %13, %Array** %11
  store %Array* %16, %Array** %12
  %19 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %10, %Array* %idxFermions)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  ret { { %Array*, %Array* }*, %Array* }* %19

test1__1:                                         ; preds = %entry
  %20 = icmp eq i64 %7, 4
  br i1 %20, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, %Array* }*
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %22, i64 0, i32 1
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i64*
  store i64 2, i64* %27
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to double*
  store double %real, double* %30
  store %Array* %25, %Array** %23
  store %Array* %28, %Array** %24
  %31 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %22, %Array* %idxFermions)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  ret { { %Array*, %Array* }*, %Array* }* %31

else__1:                                          ; preds = %test1__1
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %33 = bitcast %Tuple* %32 to { %Array*, %Array* }*
  %34 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %33, i64 0, i32 0
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %33, i64 0, i32 1
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i64*
  store i64 -1, i64* %38
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to double*
  store double 0.000000e+00, double* %41
  store %Array* %36, %Array** %34
  store %Array* %39, %Array** %35
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 0)
  %44 = bitcast i8* %43 to i64*
  store i64 0, i64* %44
  %45 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %33, %Array* %42)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i64 -1)
  ret { { %Array*, %Array* }*, %Array* }* %45
}

define { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i64 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %2 = bitcast %Tuple* %1 to { { %Array*, %Array* }*, %Array* }*
  %3 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i64 0, i32 0
  %4 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i64 0, i32 1
  store { %Array*, %Array* }* %0, { %Array*, %Array* }** %3
  store %Array* %__Item3__, %Array** %4
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 1)
  %9 = bitcast { %Array*, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i64 -1)
  ret { { %Array*, %Array* }*, %Array* }* %2
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %coeff = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10
  %11 = icmp eq i64 %p, %q
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @4, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i64 -1)
  %15 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i64 -1)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i64 -1)
  %19 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22
  %24 = fmul double 5.000000e-01, %23
  %angle = fmul double %24, %stepSize
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %26 = bitcast i8* %25 to %Array**
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %28 = bitcast i8* %27 to %Array**
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  %34 = load i2, i2* @PauliX
  %35 = load i2, i2* @PauliY
  store i2 %34, i2* %31
  store i2 %35, i2* %33
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 1)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliY
  %42 = load i2, i2* @PauliX
  store i2 %41, i2* %38
  store i2 %42, i2* %40
  store %Array* %29, %Array** %26
  store %Array* %36, %Array** %28
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 1)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50
  store double -1.000000e+00, double* %52
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 1)
  %53 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %ops, %Array* %signs)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %55 = sub i64 %54, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %56 = phi i64 [ 0, %exit__1 ], [ %64, %exiting__2 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %56)
  %59 = bitcast i8* %58 to { %Array*, double }**
  %60 = load { %Array*, double }*, { %Array*, double }** %59
  %61 = getelementptr { %Array*, double }, { %Array*, double }* %60, i64 0, i32 0
  %op = load %Array*, %Array** %61
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 1)
  %62 = getelementptr { %Array*, double }, { %Array*, double }* %60, i64 0, i32 1
  %sign = load double, double* %62
  %63 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %63, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  %theta = fmul double %sign, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__body(%Array* %pauliString, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %64 = add i64 %56, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %65 = phi i64 [ 0, %exit__2 ], [ %70, %exiting__3 ]
  %66 = icmp sle i64 %65, 1
  br i1 %66, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %65)
  %68 = bitcast i8* %67 to %Array**
  %69 = load %Array*, %Array** %68
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %70 = add i64 %65, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %71 = phi i64 [ 0, %exit__3 ], [ %76, %exiting__4 ]
  %72 = icmp sle i64 %71, 1
  br i1 %72, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %71)
  %74 = bitcast i8* %73 to %Array**
  %75 = load %Array*, %Array** %74
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %76 = add i64 %71, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i64 -1)
  %77 = sub i64 %54, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %78 = phi i64 [ 0, %exit__4 ], [ %86, %exiting__5 ]
  %79 = icmp sle i64 %78, %77
  br i1 %79, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %78)
  %81 = bitcast i8* %80 to { %Array*, double }**
  %82 = load { %Array*, double }*, { %Array*, double }** %81
  %83 = getelementptr { %Array*, double }, { %Array*, double }* %82, i64 0, i32 0
  %84 = load %Array*, %Array** %83
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i64 -1)
  %85 = bitcast { %Array*, double }* %82 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %86 = add i64 %78, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i64 -1)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i64 1)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %9 = icmp slt i64 %0, %8
  br i1 %9, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %8, %condFalse__1 ]
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %11 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %12 = phi i64 [ 0, %condContinue__1 ], [ %21, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 0)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, double }*
  %17 = getelementptr { %Array*, double }, { %Array*, double }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, double }, { %Array*, double }* %16, i64 0, i32 1
  store %Array* %14, %Array** %17
  store double 0.000000e+00, double* %18
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %20 = bitcast i8* %19 to { %Array*, double }**
  store { %Array*, double }* %16, { %Array*, double }** %20
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %output = alloca %Array*
  store %Array* %10, %Array** %output
  %22 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %31, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %23)
  %26 = bitcast i8* %25 to { %Array*, double }**
  %27 = load { %Array*, double }*, { %Array*, double }** %26
  %28 = getelementptr { %Array*, double }, { %Array*, double }* %27, i64 0, i32 0
  %29 = load %Array*, %Array** %28
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i64 1)
  %30 = bitcast { %Array*, double }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %32 = sub i64 %nElements, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %41, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %33)
  %36 = bitcast i8* %35 to { %Array*, double }**
  %37 = load { %Array*, double }*, { %Array*, double }** %36
  %38 = getelementptr { %Array*, double }, { %Array*, double }* %37, i64 0, i32 0
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i64 1)
  %40 = bitcast { %Array*, double }* %37 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %41 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 1)
  %42 = sub i64 %nElements, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idxElement = phi i64 [ 0, %exit__4 ], [ %63, %exiting__5 ]
  %43 = icmp sle i64 %idxElement, %42
  br i1 %43, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %44 = load %Array*, %Array** %output
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i64 -1)
  %45 = call %Array* @__quantum__rt__array_copy(%Array* %44, i1 false)
  %46 = icmp ne %Array* %44, %45
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Array*, double }*
  %49 = getelementptr { %Array*, double }, { %Array*, double }* %48, i64 0, i32 0
  %50 = getelementptr { %Array*, double }, { %Array*, double }* %48, i64 0, i32 1
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %52 = bitcast i8* %51 to %Array**
  %53 = load %Array*, %Array** %52
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %55 = bitcast i8* %54 to double*
  %56 = load double, double* %55
  store %Array* %53, %Array** %49
  store double %56, double* %50
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %idxElement)
  %58 = bitcast i8* %57 to { %Array*, double }**
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i64 1)
  %59 = load { %Array*, double }*, { %Array*, double }** %58
  %60 = getelementptr { %Array*, double }, { %Array*, double }* %59, i64 0, i32 0
  %61 = load %Array*, %Array** %60
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i64 -1)
  %62 = bitcast { %Array*, double }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i64 -1)
  br i1 %46, label %condContinue__2, label %condFalse__2

condFalse__2:                                     ; preds = %body__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i64 -1)
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %body__5
  store { %Array*, double }* %48, { %Array*, double }** %58
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i64 1)
  store %Array* %45, %Array** %output
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %47, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %condContinue__2
  %63 = add i64 %idxElement, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %64 = load %Array*, %Array** %output
  %65 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %66 = phi i64 [ 0, %exit__5 ], [ %71, %exiting__6 ]
  %67 = icmp sle i64 %66, %65
  br i1 %67, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %66)
  %69 = bitcast i8* %68 to %Array**
  %70 = load %Array*, %Array** %69
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %71 = add i64 %66, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i64 -1)
  %72 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %73 = sub i64 %72, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %74 = phi i64 [ 0, %exit__6 ], [ %82, %exiting__7 ]
  %75 = icmp sle i64 %74, %73
  br i1 %75, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %74)
  %77 = bitcast i8* %76 to { %Array*, double }**
  %78 = load { %Array*, double }*, { %Array*, double }** %77
  %79 = getelementptr { %Array*, double }, { %Array*, double }* %78, i64 0, i32 0
  %80 = load %Array*, %Array** %79
  call void @__quantum__rt__array_update_alias_count(%Array* %80, i64 -1)
  %81 = bitcast { %Array*, double }* %78 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %81, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %82 = add i64 %74, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i64 -1)
  %83 = sub i64 %nElements, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %84 = phi i64 [ 0, %exit__7 ], [ %92, %exiting__8 ]
  %85 = icmp sle i64 %84, %83
  br i1 %85, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %84)
  %87 = bitcast i8* %86 to { %Array*, double }**
  %88 = load { %Array*, double }*, { %Array*, double }** %87
  %89 = getelementptr { %Array*, double }, { %Array*, double }* %88, i64 0, i32 0
  %90 = load %Array*, %Array** %89
  call void @__quantum__rt__array_update_reference_count(%Array* %90, i64 -1)
  %91 = bitcast { %Array*, double }* %88 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %91, i64 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %92 = add i64 %84, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 -1)
  ret %Array* %64
}

define %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %nFermions, %Array* %idxFermions, %Array* %pauliReplacements) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliReplacements, i64 1)
  %0 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions)
  %pauliString = alloca %Array*
  store %Array* %0, %Array** %pauliString
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 1)
  %1 = call %Range @Microsoft__Quantum__Arrays___ad5a82386a254e19afadd23ef0f2479b_IndexRange__body(%Array* %idxFermions)
  %2 = extractvalue %Range %1, 0
  %3 = extractvalue %Range %1, 1
  %4 = extractvalue %Range %1, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %5 = icmp sgt i64 %3, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %2, %preheader__1 ], [ %18, %exiting__1 ]
  %6 = icmp sle i64 %idx, %4
  %7 = icmp sge i64 %idx, %4
  %8 = select i1 %5, i1 %6, i1 %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %idx)
  %10 = bitcast i8* %9 to i64*
  %idxFermion = load i64, i64* %10
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauliReplacements, i64 %idx)
  %12 = bitcast i8* %11 to i2*
  %op = load i2, i2* %12
  %13 = load %Array*, %Array** %pauliString
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 -1)
  %14 = call %Array* @__quantum__rt__array_copy(%Array* %13, i1 false)
  %15 = icmp ne %Array* %13, %14
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %idxFermion)
  %17 = bitcast i8* %16 to i2*
  store i2 %op, i2* %17
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 1)
  store %Array* %14, %Array** %pauliString
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %idx, %3
  br label %header__1

exit__1:                                          ; preds = %header__1
  %19 = load %Array*, %Array** %pauliString
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliReplacements, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 -1)
  ret %Array* %19
}

declare void @__quantum__qis__exp__body(%Array*, double, %Array*)

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10
  %11 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @7, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i64 -1)
  %15 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i64 -1)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i64 -1)
  %19 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @9, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22
  %24 = fmul double 5.000000e-01, %23
  %__qsVar5__angle__ = fmul double %24, %stepSize
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %26 = bitcast i8* %25 to %Array**
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %28 = bitcast i8* %27 to %Array**
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  %34 = load i2, i2* @PauliX
  %35 = load i2, i2* @PauliY
  store i2 %34, i2* %31
  store i2 %35, i2* %33
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 1)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliY
  %42 = load i2, i2* @PauliX
  store i2 %41, i2* %38
  store i2 %42, i2* %40
  store %Array* %29, %Array** %26
  store %Array* %36, %Array** %28
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i64 1)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50
  store double -1.000000e+00, double* %52
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i64 1)
  %53 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %54 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %55 = call i64 @__quantum__rt__array_get_size_1d(%Array* %54)
  %56 = sub i64 %55, 1
  %57 = load %Range, %Range* @EmptyRange
  %58 = insertvalue %Range %57, i64 %56, 0
  %59 = insertvalue %Range %58, i64 -1, 1
  %60 = insertvalue %Range %59, i64 0, 2
  %61 = call %Array* @__quantum__rt__array_slice_1d(%Array* %53, %Range %60, i1 false)
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %61)
  %63 = sub i64 %62, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %64 = phi i64 [ 0, %exit__1 ], [ %72, %exiting__2 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %64)
  %67 = bitcast i8* %66 to { %Array*, double }**
  %68 = load { %Array*, double }*, { %Array*, double }** %67
  %69 = getelementptr { %Array*, double }, { %Array*, double }* %68, i64 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %69
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i64 1)
  %70 = getelementptr { %Array*, double }, { %Array*, double }* %68, i64 0, i32 1
  %__qsVar9__sign__ = load double, double* %70
  %71 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %71, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 1)
  %theta = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__adj(%Array* %__qsVar10__pauliString__, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %72 = add i64 %64, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %73 = phi i64 [ 0, %exit__2 ], [ %78, %exiting__3 ]
  %74 = icmp sle i64 %73, 1
  br i1 %74, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %73)
  %76 = bitcast i8* %75 to %Array**
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %78 = add i64 %73, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %79 = phi i64 [ 0, %exit__3 ], [ %84, %exiting__4 ]
  %80 = icmp sle i64 %79, 1
  br i1 %80, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %79)
  %82 = bitcast i8* %81 to %Array**
  %83 = load %Array*, %Array** %82
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %84 = add i64 %79, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__signs__, i64 -1)
  %85 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %86 = sub i64 %85, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %87 = phi i64 [ 0, %exit__4 ], [ %95, %exiting__5 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %87)
  %90 = bitcast i8* %89 to { %Array*, double }**
  %91 = load { %Array*, double }*, { %Array*, double }** %90
  %92 = getelementptr { %Array*, double }, { %Array*, double }* %91, i64 0, i32 0
  %93 = load %Array*, %Array** %92
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i64 -1)
  %94 = bitcast { %Array*, double }* %91 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %94, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %95 = add i64 %87, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i64 -1)
  %96 = sub i64 %55, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %97 = phi i64 [ 0, %exit__5 ], [ %105, %exiting__6 ]
  %98 = icmp sle i64 %97, %96
  br i1 %98, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 %97)
  %100 = bitcast i8* %99 to { %Array*, double }**
  %101 = load { %Array*, double }*, { %Array*, double }** %100
  %102 = getelementptr { %Array*, double }, { %Array*, double }* %101, i64 0, i32 0
  %103 = load %Array*, %Array** %102
  call void @__quantum__rt__array_update_reference_count(%Array* %103, i64 -1)
  %104 = bitcast { %Array*, double }* %101 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %105 = add i64 %97, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i64 -1)
  %106 = sub i64 %62, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %107 = phi i64 [ 0, %exit__6 ], [ %115, %exiting__7 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, double }**
  %111 = load { %Array*, double }*, { %Array*, double }** %110
  %112 = getelementptr { %Array*, double }, { %Array*, double }* %111, i64 0, i32 0
  %113 = load %Array*, %Array** %112
  call void @__quantum__rt__array_update_reference_count(%Array* %113, i64 -1)
  %114 = bitcast { %Array*, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %115 = add i64 %107, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i64 -1)
  ret void
}

declare void @__quantum__qis__exp__adj(%Array*, double, %Array*)

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %coeff = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14
  %15 = icmp eq i64 %p, %q
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @10, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i64 -1)
  %19 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @11, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i64 -1)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i64 -1)
  %23 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @12, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26
  %28 = fmul double 5.000000e-01, %27
  %angle = fmul double %28, %stepSize
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %30 = bitcast i8* %29 to %Array**
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %32 = bitcast i8* %31 to %Array**
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  %38 = load i2, i2* @PauliX
  %39 = load i2, i2* @PauliY
  store i2 %38, i2* %35
  store i2 %39, i2* %37
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to i2*
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 1)
  %44 = bitcast i8* %43 to i2*
  %45 = load i2, i2* @PauliY
  %46 = load i2, i2* @PauliX
  store i2 %45, i2* %42
  store i2 %46, i2* %44
  store %Array* %33, %Array** %30
  store %Array* %40, %Array** %32
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 1)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %54 = bitcast i8* %53 to double*
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %56 = bitcast i8* %55 to double*
  store double 1.000000e+00, double* %54
  store double -1.000000e+00, double* %56
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 1)
  %57 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %ops, %Array* %signs)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %59 = sub i64 %58, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %60 = phi i64 [ 0, %exit__1 ], [ %73, %exiting__2 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %60)
  %63 = bitcast i8* %62 to { %Array*, double }**
  %64 = load { %Array*, double }*, { %Array*, double }** %63
  %65 = getelementptr { %Array*, double }, { %Array*, double }* %64, i64 0, i32 0
  %op = load %Array*, %Array** %65
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 1)
  %66 = getelementptr { %Array*, double }, { %Array*, double }* %64, i64 0, i32 1
  %sign = load double, double* %66
  %67 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %67, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  %theta = fmul double %sign, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %68 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %69 = bitcast %Tuple* %68 to { %Array*, double, %Array* }*
  %70 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i64 0, i32 0
  %71 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i64 0, i32 1
  %72 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i64 0, i32 2
  store %Array* %pauliString, %Array** %70
  store double %theta, double* %71
  store %Array* %qubits, %Array** %72
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %69)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %73 = add i64 %60, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %74 = phi i64 [ 0, %exit__2 ], [ %79, %exiting__3 ]
  %75 = icmp sle i64 %74, 1
  br i1 %75, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %74)
  %77 = bitcast i8* %76 to %Array**
  %78 = load %Array*, %Array** %77
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %79 = add i64 %74, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %80 = phi i64 [ 0, %exit__3 ], [ %85, %exiting__4 ]
  %81 = icmp sle i64 %80, 1
  br i1 %81, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %80)
  %83 = bitcast i8* %82 to %Array**
  %84 = load %Array*, %Array** %83
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %85 = add i64 %80, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i64 -1)
  %86 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %87 = phi i64 [ 0, %exit__4 ], [ %95, %exiting__5 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %87)
  %90 = bitcast i8* %89 to { %Array*, double }**
  %91 = load { %Array*, double }*, { %Array*, double }** %90
  %92 = getelementptr { %Array*, double }, { %Array*, double }* %91, i64 0, i32 0
  %93 = load %Array*, %Array** %92
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i64 -1)
  %94 = bitcast { %Array*, double }* %91 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %94, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %95 = add i64 %87, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i64 -1)
  ret void
}

declare void @__quantum__qis__exp__ctl(%Array*, { %Array*, double, %Array* }*)

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14
  %15 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @13, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i64 -1)
  %19 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @14, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i64 -1)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i64 -1)
  %23 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @15, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26
  %28 = fmul double 5.000000e-01, %27
  %__qsVar5__angle__ = fmul double %28, %stepSize
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %30 = bitcast i8* %29 to %Array**
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %32 = bitcast i8* %31 to %Array**
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  %38 = load i2, i2* @PauliX
  %39 = load i2, i2* @PauliY
  store i2 %38, i2* %35
  store i2 %39, i2* %37
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to i2*
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 1)
  %44 = bitcast i8* %43 to i2*
  %45 = load i2, i2* @PauliY
  %46 = load i2, i2* @PauliX
  store i2 %45, i2* %42
  store i2 %46, i2* %44
  store %Array* %33, %Array** %30
  store %Array* %40, %Array** %32
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i64 1)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %54 = bitcast i8* %53 to double*
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %56 = bitcast i8* %55 to double*
  store double 1.000000e+00, double* %54
  store double -1.000000e+00, double* %56
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i64 1)
  %57 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %58 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %60 = sub i64 %59, 1
  %61 = load %Range, %Range* @EmptyRange
  %62 = insertvalue %Range %61, i64 %60, 0
  %63 = insertvalue %Range %62, i64 -1, 1
  %64 = insertvalue %Range %63, i64 0, 2
  %65 = call %Array* @__quantum__rt__array_slice_1d(%Array* %57, %Range %64, i1 false)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %68 = phi i64 [ 0, %exit__1 ], [ %81, %exiting__2 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to { %Array*, double }**
  %72 = load { %Array*, double }*, { %Array*, double }** %71
  %73 = getelementptr { %Array*, double }, { %Array*, double }* %72, i64 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %73
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i64 1)
  %74 = getelementptr { %Array*, double }, { %Array*, double }* %72, i64 0, i32 1
  %__qsVar9__sign__ = load double, double* %74
  %75 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %75, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 1)
  %theta = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { %Array*, double, %Array* }*
  %78 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i64 0, i32 0
  %79 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i64 0, i32 1
  %80 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i64 0, i32 2
  store %Array* %__qsVar10__pauliString__, %Array** %78
  store double %theta, double* %79
  store %Array* %qubits, %Array** %80
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %77)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %81 = add i64 %68, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %82 = phi i64 [ 0, %exit__2 ], [ %87, %exiting__3 ]
  %83 = icmp sle i64 %82, 1
  br i1 %83, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %82)
  %85 = bitcast i8* %84 to %Array**
  %86 = load %Array*, %Array** %85
  call void @__quantum__rt__array_update_alias_count(%Array* %86, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %87 = add i64 %82, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %88 = phi i64 [ 0, %exit__3 ], [ %93, %exiting__4 ]
  %89 = icmp sle i64 %88, 1
  br i1 %89, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %88)
  %91 = bitcast i8* %90 to %Array**
  %92 = load %Array*, %Array** %91
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %93 = add i64 %88, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__signs__, i64 -1)
  %94 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %95 = sub i64 %94, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %96 = phi i64 [ 0, %exit__4 ], [ %104, %exiting__5 ]
  %97 = icmp sle i64 %96, %95
  br i1 %97, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %96)
  %99 = bitcast i8* %98 to { %Array*, double }**
  %100 = load { %Array*, double }*, { %Array*, double }** %99
  %101 = getelementptr { %Array*, double }, { %Array*, double }* %100, i64 0, i32 0
  %102 = load %Array*, %Array** %101
  call void @__quantum__rt__array_update_reference_count(%Array* %102, i64 -1)
  %103 = bitcast { %Array*, double }* %100 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %103, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %104 = add i64 %96, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i64 -1)
  %105 = sub i64 %59, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %106 = phi i64 [ 0, %exit__5 ], [ %114, %exiting__6 ]
  %107 = icmp sle i64 %106, %105
  br i1 %107, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %106)
  %109 = bitcast i8* %108 to { %Array*, double }**
  %110 = load { %Array*, double }*, { %Array*, double }** %109
  %111 = getelementptr { %Array*, double }, { %Array*, double }* %110, i64 0, i32 0
  %112 = load %Array*, %Array** %111
  call void @__quantum__rt__array_update_reference_count(%Array* %112, i64 -1)
  %113 = bitcast { %Array*, double }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %113, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %114 = add i64 %106, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i64 -1)
  %115 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %116 = phi i64 [ 0, %exit__6 ], [ %124, %exiting__7 ]
  %117 = icmp sle i64 %116, %115
  br i1 %117, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %116)
  %119 = bitcast i8* %118 to { %Array*, double }**
  %120 = load { %Array*, double }*, { %Array*, double }** %119
  %121 = getelementptr { %Array*, double }, { %Array*, double }* %120, i64 0, i32 0
  %122 = load %Array*, %Array** %121
  call void @__quantum__rt__array_update_reference_count(%Array* %122, i64 -1)
  %123 = bitcast { %Array*, double }* %120 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %123, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %124 = add i64 %116, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i64 -1)
  ret void
}

declare void @__quantum__qis__exp__ctladj(%Array*, { %Array*, double, %Array* }*)

define { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %__Item1__, %Callable* %__Item2__) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item2__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item2__, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, %Callable* }*
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %1, i64 0, i32 1
  store i64 %__Item1__, i64* %2
  store %Callable* %__Item2__, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__Item2__, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item2__, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item2__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item2__, i64 -1)
  ret { i64, %Callable* }* %1
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load i64, i64* %2
  %5 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body(%Array* %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %7 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %6, i64 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %5, { { %Array*, %Array* }*, %Array* }** %7
  ret void
}

define void @Lifted__PartialApplication__4__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { i64 }*
  %4 = getelementptr { i64 }, { i64 }* %3, i64 0, i32 0
  %5 = load i64, i64* %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, i64 }*
  %8 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store i64 %5, i64* %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @MemoryManagement__4__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__3 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 0
  %13 = load { double, double }*, { double, double }** %12
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 %count-change)
  %15 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 1
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 %count-change)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %18 = add i64 %7, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__4__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__4 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 0
  %13 = load { double, double }*, { double, double }** %12
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 %count-change)
  %15 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i64 0, i32 1
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i64 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i64 %count-change)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %18 = add i64 %7, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %3 = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 1)
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 1)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %11 = bitcast %Tuple* %10 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %12 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i64 0, i32 0
  %13 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i64 0, i32 1
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %14, %Callable** %12
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %13
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__5, [2 x void (%Tuple*, i64)*]* @MemoryManagement__5, %Tuple* %10)
  %16 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  ret { %Callable* }* %16
}

define { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  store %Callable* %__Item1__, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item1__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i64 -1)
  ret { %Callable* }* %1
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__5__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr { double, %Array* }, { double, %Array* }* %3, i64 0, i32 0
  %5 = load double, double* %4
  %6 = getelementptr { double, %Array* }, { double, %Array* }* %3, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10
  store double %5, double* %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__5__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr { double, %Array* }, { double, %Array* }* %3, i64 0, i32 0
  %5 = load double, double* %4
  %6 = getelementptr { double, %Array* }, { double, %Array* }* %3, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10
  store double %5, double* %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__5__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i64 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6
  %8 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %9 = load double, double* %8
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14
  store double %9, double* %15
  store %Array* %11, %Array** %16
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i64 0, i32 0
  %20 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i64 0, i32 1
  store %Array* %3, %Array** %19
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20
  %21 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i64 0, i32 0
  %22 = load %Callable*, %Callable** %21
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__5__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i64 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6
  %8 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %9 = load double, double* %8
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14
  store double %9, double* %15
  store %Array* %11, %Array** %16
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i64 0, i32 0
  %20 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i64 0, i32 1
  store %Array* %3, %Array** %19
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20
  %21 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i64 0, i32 0
  %22 = load %Callable*, %Callable** %21
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  ret void
}

define void @MemoryManagement__5__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i64 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 %count-change)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 %count-change)
  %12 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__5__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i64 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 %count-change)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 %count-change)
  %12 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define %Callable* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %4, %Callable** %2
  store %Array* %qubitIndices, %Array** %3
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__6, [2 x void (%Tuple*, i64)*]* @MemoryManagement__6, %Tuple* %0)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  ret %Callable* %5
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__6__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr { %Array* }, { %Array* }* %3, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__6__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr { %Array* }, { %Array* }* %3, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__6__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store %Array* %4, %Array** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__6__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store %Array* %4, %Array** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @MemoryManagement__6__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__6__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %idxDoubles = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %8 = bitcast i8* %7 to i64*
  %termType = load i64, i64* %8
  %9 = icmp eq i64 %termType, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %termType, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %coeff = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %12 = bitcast i8* %11 to i64*
  %r = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %14 = bitcast i8* %13 to i64*
  %s = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16
  %18 = fmul double 1.250000e-01, %17
  %angle = fmul double %18, %stepSize
  %19 = icmp eq i64 %p, %q
  %20 = icmp eq i64 %p, %r
  %21 = or i1 %19, %20
  %22 = icmp eq i64 %p, %s
  %23 = or i1 %21, %22
  %24 = icmp eq i64 %q, %r
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %q, %s
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %r, %s
  %29 = or i1 %27, %28
  br i1 %29, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %30 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @16, i32 0, i32 0))
  %31 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %32 = call %String* @__quantum__rt__string_concatenate(%String* %30, %String* %31)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i64 -1)
  %33 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @17, i32 0, i32 0))
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %33, i64 -1)
  %35 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i64 -1)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @18, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i64 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i64 -1)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @19, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i64 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i64 -1)
  %45 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @20, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %entry
  %x = load i2, i2* @PauliX
  %y = load i2, i2* @PauliY
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %62 = bitcast i8* %61 to %Array**
  %63 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 0)
  %65 = bitcast i8* %64 to i2*
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 1)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 2)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 3)
  %71 = bitcast i8* %70 to i2*
  store i2 %y, i2* %65
  store i2 %y, i2* %67
  store i2 %x, i2* %69
  store i2 %y, i2* %71
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i2*
  store i2 %x, i2* %74
  store i2 %x, i2* %76
  store i2 %x, i2* %78
  store i2 %y, i2* %80
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 2)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 3)
  %89 = bitcast i8* %88 to i2*
  store i2 %x, i2* %83
  store i2 %y, i2* %85
  store i2 %y, i2* %87
  store i2 %y, i2* %89
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 2)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 3)
  %98 = bitcast i8* %97 to i2*
  store i2 %y, i2* %92
  store i2 %x, i2* %94
  store i2 %y, i2* %96
  store i2 %y, i2* %98
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  store i2 %x, i2* %101
  store i2 %y, i2* %103
  store i2 %x, i2* %105
  store i2 %x, i2* %107
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i2*
  store i2 %y, i2* %110
  store i2 %x, i2* %112
  store i2 %x, i2* %114
  store i2 %x, i2* %116
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to i2*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to i2*
  store i2 %y, i2* %119
  store i2 %y, i2* %121
  store i2 %y, i2* %123
  store i2 %x, i2* %125
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  store i2 %x, i2* %128
  store i2 %x, i2* %130
  store i2 %y, i2* %132
  store i2 %x, i2* %134
  store %Array* %63, %Array** %48
  store %Array* %72, %Array** %50
  store %Array* %81, %Array** %52
  store %Array* %90, %Array** %54
  store %Array* %99, %Array** %56
  store %Array* %108, %Array** %58
  store %Array* %117, %Array** %60
  store %Array* %126, %Array** %62
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %135 = phi i64 [ 0, %continue__1 ], [ %140, %exiting__1 ]
  %136 = icmp sle i64 %135, 7
  br i1 %136, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %135)
  %138 = bitcast i8* %137 to %Array**
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_update_alias_count(%Array* %139, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %140 = add i64 %135, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 1)
  %141 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 0)
  %143 = bitcast i8* %142 to i64*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 1)
  %145 = bitcast i8* %144 to i64*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 2)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 3)
  %149 = bitcast i8* %148 to i64*
  store i64 %p, i64* %143
  store i64 %q, i64* %145
  store i64 %r, i64* %147
  store i64 %s, i64* %149
  %150 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %141)
  %151 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 0
  %sortedIndices = load %Array*, %Array** %151
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i64 1)
  %152 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 1
  %signs = load %Array*, %Array** %152
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 1)
  %153 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 2
  %globalSign = load double, double* %153
  %154 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %ops, %Array* %signs)
  %155 = call i64 @__quantum__rt__array_get_size_1d(%Array* %154)
  %156 = sub i64 %155, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %157 = phi i64 [ 0, %exit__1 ], [ %166, %exiting__2 ]
  %158 = icmp sle i64 %157, %156
  br i1 %158, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %157)
  %160 = bitcast i8* %159 to { %Array*, double }**
  %161 = load { %Array*, double }*, { %Array*, double }** %160
  %162 = getelementptr { %Array*, double }, { %Array*, double }* %161, i64 0, i32 0
  %op = load %Array*, %Array** %162
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 1)
  %163 = getelementptr { %Array*, double }, { %Array*, double }* %161, i64 0, i32 1
  %sign = load double, double* %163
  %164 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %164, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  %165 = fmul double %globalSign, %sign
  %theta = fmul double %165, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__body(%Array* %pauliString, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %166 = add i64 %157, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %167 = phi i64 [ 0, %exit__2 ], [ %172, %exiting__3 ]
  %168 = icmp sle i64 %167, 7
  br i1 %168, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %169 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %167)
  %170 = bitcast i8* %169 to %Array**
  %171 = load %Array*, %Array** %170
  call void @__quantum__rt__array_update_alias_count(%Array* %171, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %172 = add i64 %167, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %173 = phi i64 [ 0, %exit__3 ], [ %178, %exiting__4 ]
  %174 = icmp sle i64 %173, 7
  br i1 %174, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %173)
  %176 = bitcast i8* %175 to %Array**
  %177 = load %Array*, %Array** %176
  call void @__quantum__rt__array_update_reference_count(%Array* %177, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %178 = add i64 %173, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %141, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %sortedIndices, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i64 -1)
  %179 = bitcast { %Array*, %Array*, double }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %179, i64 -1)
  %180 = sub i64 %155, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %181 = phi i64 [ 0, %exit__4 ], [ %189, %exiting__5 ]
  %182 = icmp sle i64 %181, %180
  br i1 %182, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %181)
  %184 = bitcast i8* %183 to { %Array*, double }**
  %185 = load { %Array*, double }*, { %Array*, double }** %184
  %186 = getelementptr { %Array*, double }, { %Array*, double }* %185, i64 0, i32 0
  %187 = load %Array*, %Array** %186
  call void @__quantum__rt__array_update_reference_count(%Array* %187, i64 -1)
  %188 = bitcast { %Array*, double }* %185 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %189 = add i64 %181, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %154, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__termType__ = load i64, i64* %8
  %9 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %12 = bitcast i8* %11 to i64*
  %__qsVar5__r__ = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %14 = bitcast i8* %13 to i64*
  %__qsVar6__s__ = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16
  %18 = fmul double 1.250000e-01, %17
  %__qsVar7__angle__ = fmul double %18, %stepSize
  %19 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  %20 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  %21 = or i1 %19, %20
  %22 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  %23 = or i1 %21, %22
  %24 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  %29 = or i1 %27, %28
  br i1 %29, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %30 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @21, i32 0, i32 0))
  %31 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %32 = call %String* @__quantum__rt__string_concatenate(%String* %30, %String* %31)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i64 -1)
  %33 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @22, i32 0, i32 0))
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %33, i64 -1)
  %35 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i64 -1)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @23, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i64 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i64 -1)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @24, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i64 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i64 -1)
  %45 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @25, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %entry
  %__qsVar8__x__ = load i2, i2* @PauliX
  %__qsVar9__y__ = load i2, i2* @PauliY
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %62 = bitcast i8* %61 to %Array**
  %63 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 0)
  %65 = bitcast i8* %64 to i2*
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 1)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 2)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 3)
  %71 = bitcast i8* %70 to i2*
  store i2 %__qsVar9__y__, i2* %65
  store i2 %__qsVar9__y__, i2* %67
  store i2 %__qsVar8__x__, i2* %69
  store i2 %__qsVar9__y__, i2* %71
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i2*
  store i2 %__qsVar8__x__, i2* %74
  store i2 %__qsVar8__x__, i2* %76
  store i2 %__qsVar8__x__, i2* %78
  store i2 %__qsVar9__y__, i2* %80
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 2)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 3)
  %89 = bitcast i8* %88 to i2*
  store i2 %__qsVar8__x__, i2* %83
  store i2 %__qsVar9__y__, i2* %85
  store i2 %__qsVar9__y__, i2* %87
  store i2 %__qsVar9__y__, i2* %89
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 2)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 3)
  %98 = bitcast i8* %97 to i2*
  store i2 %__qsVar9__y__, i2* %92
  store i2 %__qsVar8__x__, i2* %94
  store i2 %__qsVar9__y__, i2* %96
  store i2 %__qsVar9__y__, i2* %98
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  store i2 %__qsVar8__x__, i2* %101
  store i2 %__qsVar9__y__, i2* %103
  store i2 %__qsVar8__x__, i2* %105
  store i2 %__qsVar8__x__, i2* %107
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i2*
  store i2 %__qsVar9__y__, i2* %110
  store i2 %__qsVar8__x__, i2* %112
  store i2 %__qsVar8__x__, i2* %114
  store i2 %__qsVar8__x__, i2* %116
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to i2*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to i2*
  store i2 %__qsVar9__y__, i2* %119
  store i2 %__qsVar9__y__, i2* %121
  store i2 %__qsVar9__y__, i2* %123
  store i2 %__qsVar8__x__, i2* %125
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  store i2 %__qsVar8__x__, i2* %128
  store i2 %__qsVar8__x__, i2* %130
  store i2 %__qsVar9__y__, i2* %132
  store i2 %__qsVar8__x__, i2* %134
  store %Array* %63, %Array** %48
  store %Array* %72, %Array** %50
  store %Array* %81, %Array** %52
  store %Array* %90, %Array** %54
  store %Array* %99, %Array** %56
  store %Array* %108, %Array** %58
  store %Array* %117, %Array** %60
  store %Array* %126, %Array** %62
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %135 = phi i64 [ 0, %continue__1 ], [ %140, %exiting__1 ]
  %136 = icmp sle i64 %135, 7
  br i1 %136, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %135)
  %138 = bitcast i8* %137 to %Array**
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_update_alias_count(%Array* %139, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %140 = add i64 %135, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i64 1)
  %141 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 0)
  %143 = bitcast i8* %142 to i64*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 1)
  %145 = bitcast i8* %144 to i64*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 2)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 3)
  %149 = bitcast i8* %148 to i64*
  store i64 %__qsVar3__p__, i64* %143
  store i64 %__qsVar4__q__, i64* %145
  store i64 %__qsVar5__r__, i64* %147
  store i64 %__qsVar6__s__, i64* %149
  %150 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %141)
  %151 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %151
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i64 1)
  %152 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %152
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i64 1)
  %153 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %153
  %154 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %155 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %156 = call i64 @__quantum__rt__array_get_size_1d(%Array* %155)
  %157 = sub i64 %156, 1
  %158 = load %Range, %Range* @EmptyRange
  %159 = insertvalue %Range %158, i64 %157, 0
  %160 = insertvalue %Range %159, i64 -1, 1
  %161 = insertvalue %Range %160, i64 0, 2
  %162 = call %Array* @__quantum__rt__array_slice_1d(%Array* %154, %Range %161, i1 false)
  %163 = call i64 @__quantum__rt__array_get_size_1d(%Array* %162)
  %164 = sub i64 %163, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %165 = phi i64 [ 0, %exit__1 ], [ %174, %exiting__2 ]
  %166 = icmp sle i64 %165, %164
  br i1 %166, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %167 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %162, i64 %165)
  %168 = bitcast i8* %167 to { %Array*, double }**
  %169 = load { %Array*, double }*, { %Array*, double }** %168
  %170 = getelementptr { %Array*, double }, { %Array*, double }* %169, i64 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %170
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i64 1)
  %171 = getelementptr { %Array*, double }, { %Array*, double }* %169, i64 0, i32 1
  %__qsVar15__sign__ = load double, double* %171
  %172 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %172, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 1)
  %173 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %theta = fmul double %173, %__qsVar7__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__adj(%Array* %__qsVar16__pauliString__, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %174 = add i64 %165, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %175 = phi i64 [ 0, %exit__2 ], [ %180, %exiting__3 ]
  %176 = icmp sle i64 %175, 7
  br i1 %176, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %175)
  %178 = bitcast i8* %177 to %Array**
  %179 = load %Array*, %Array** %178
  call void @__quantum__rt__array_update_alias_count(%Array* %179, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %180 = add i64 %175, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %181 = phi i64 [ 0, %exit__3 ], [ %186, %exiting__4 ]
  %182 = icmp sle i64 %181, 7
  br i1 %182, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %181)
  %184 = bitcast i8* %183 to %Array**
  %185 = load %Array*, %Array** %184
  call void @__quantum__rt__array_update_reference_count(%Array* %185, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %186 = add i64 %181, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__ops__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %141, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__sortedIndices__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar12__signs__, i64 -1)
  %187 = bitcast { %Array*, %Array*, double }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %187, i64 -1)
  %188 = call i64 @__quantum__rt__array_get_size_1d(%Array* %154)
  %189 = sub i64 %188, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %190 = phi i64 [ 0, %exit__4 ], [ %198, %exiting__5 ]
  %191 = icmp sle i64 %190, %189
  br i1 %191, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %190)
  %193 = bitcast i8* %192 to { %Array*, double }**
  %194 = load { %Array*, double }*, { %Array*, double }** %193
  %195 = getelementptr { %Array*, double }, { %Array*, double }* %194, i64 0, i32 0
  %196 = load %Array*, %Array** %195
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i64 -1)
  %197 = bitcast { %Array*, double }* %194 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %197, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %198 = add i64 %190, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %154, i64 -1)
  %199 = sub i64 %156, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %200 = phi i64 [ 0, %exit__5 ], [ %208, %exiting__6 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 %200)
  %203 = bitcast i8* %202 to { %Array*, double }**
  %204 = load { %Array*, double }*, { %Array*, double }** %203
  %205 = getelementptr { %Array*, double }, { %Array*, double }* %204, i64 0, i32 0
  %206 = load %Array*, %Array** %205
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i64 -1)
  %207 = bitcast { %Array*, double }* %204 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %208 = add i64 %200, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %155, i64 -1)
  %209 = sub i64 %163, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %210 = phi i64 [ 0, %exit__6 ], [ %218, %exiting__7 ]
  %211 = icmp sle i64 %210, %209
  br i1 %211, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %212 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %162, i64 %210)
  %213 = bitcast i8* %212 to { %Array*, double }**
  %214 = load { %Array*, double }*, { %Array*, double }** %213
  %215 = getelementptr { %Array*, double }, { %Array*, double }* %214, i64 0, i32 0
  %216 = load %Array*, %Array** %215
  call void @__quantum__rt__array_update_reference_count(%Array* %216, i64 -1)
  %217 = bitcast { %Array*, double }* %214 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %217, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %218 = add i64 %210, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %162, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %idxDoubles = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %12 = bitcast i8* %11 to i64*
  %termType = load i64, i64* %12
  %13 = icmp eq i64 %termType, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16
  store double %stepSize, double* %17
  store %Array* %qubits, %Array** %18
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %termType, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22
  store double %stepSize, double* %23
  store %Array* %qubits, %Array** %24
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %coeff = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %16 = bitcast i8* %15 to i64*
  %r = load i64, i64* %16
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %18 = bitcast i8* %17 to i64*
  %s = load i64, i64* %18
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20
  %22 = fmul double 1.250000e-01, %21
  %angle = fmul double %22, %stepSize
  %23 = icmp eq i64 %p, %q
  %24 = icmp eq i64 %p, %r
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %p, %s
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %q, %r
  %29 = or i1 %27, %28
  %30 = icmp eq i64 %q, %s
  %31 = or i1 %29, %30
  %32 = icmp eq i64 %r, %s
  %33 = or i1 %31, %32
  br i1 %33, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %34 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @26, i32 0, i32 0))
  %35 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i64 -1)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @27, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i64 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i64 -1)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @28, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i64 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i64 -1)
  %45 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @29, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i64 -1)
  %47 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i64 -1)
  %49 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @30, i32 0, i32 0))
  %50 = call %String* @__quantum__rt__string_concatenate(%String* %48, %String* %49)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__fail(%String* %50)
  unreachable

continue__1:                                      ; preds = %entry
  %x = load i2, i2* @PauliX
  %y = load i2, i2* @PauliY
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %62 = bitcast i8* %61 to %Array**
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %64 = bitcast i8* %63 to %Array**
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %66 = bitcast i8* %65 to %Array**
  %67 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 0)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 1)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 2)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 3)
  %75 = bitcast i8* %74 to i2*
  store i2 %y, i2* %69
  store i2 %y, i2* %71
  store i2 %x, i2* %73
  store i2 %y, i2* %75
  %76 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 0)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 1)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 2)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 3)
  %84 = bitcast i8* %83 to i2*
  store i2 %x, i2* %78
  store i2 %x, i2* %80
  store i2 %x, i2* %82
  store i2 %y, i2* %84
  %85 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 0)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 1)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 2)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 3)
  %93 = bitcast i8* %92 to i2*
  store i2 %x, i2* %87
  store i2 %y, i2* %89
  store i2 %y, i2* %91
  store i2 %y, i2* %93
  %94 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 0)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 1)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 2)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 3)
  %102 = bitcast i8* %101 to i2*
  store i2 %y, i2* %96
  store i2 %x, i2* %98
  store i2 %y, i2* %100
  store i2 %y, i2* %102
  %103 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 0)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 1)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 2)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 3)
  %111 = bitcast i8* %110 to i2*
  store i2 %x, i2* %105
  store i2 %y, i2* %107
  store i2 %x, i2* %109
  store i2 %x, i2* %111
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 2)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 3)
  %120 = bitcast i8* %119 to i2*
  store i2 %y, i2* %114
  store i2 %x, i2* %116
  store i2 %x, i2* %118
  store i2 %x, i2* %120
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 0)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 1)
  %125 = bitcast i8* %124 to i2*
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 2)
  %127 = bitcast i8* %126 to i2*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 3)
  %129 = bitcast i8* %128 to i2*
  store i2 %y, i2* %123
  store i2 %y, i2* %125
  store i2 %y, i2* %127
  store i2 %x, i2* %129
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to i2*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to i2*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to i2*
  store i2 %x, i2* %132
  store i2 %x, i2* %134
  store i2 %y, i2* %136
  store i2 %x, i2* %138
  store %Array* %67, %Array** %52
  store %Array* %76, %Array** %54
  store %Array* %85, %Array** %56
  store %Array* %94, %Array** %58
  store %Array* %103, %Array** %60
  store %Array* %112, %Array** %62
  store %Array* %121, %Array** %64
  store %Array* %130, %Array** %66
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %139 = phi i64 [ 0, %continue__1 ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 1)
  %145 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 0)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 1)
  %149 = bitcast i8* %148 to i64*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 2)
  %151 = bitcast i8* %150 to i64*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 3)
  %153 = bitcast i8* %152 to i64*
  store i64 %p, i64* %147
  store i64 %q, i64* %149
  store i64 %r, i64* %151
  store i64 %s, i64* %153
  %154 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %145)
  %155 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 0
  %sortedIndices = load %Array*, %Array** %155
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i64 1)
  %156 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 1
  %signs = load %Array*, %Array** %156
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 1)
  %157 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 2
  %globalSign = load double, double* %157
  %158 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %ops, %Array* %signs)
  %159 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %160 = sub i64 %159, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %161 = phi i64 [ 0, %exit__1 ], [ %175, %exiting__2 ]
  %162 = icmp sle i64 %161, %160
  br i1 %162, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %161)
  %164 = bitcast i8* %163 to { %Array*, double }**
  %165 = load { %Array*, double }*, { %Array*, double }** %164
  %166 = getelementptr { %Array*, double }, { %Array*, double }* %165, i64 0, i32 0
  %op = load %Array*, %Array** %166
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 1)
  %167 = getelementptr { %Array*, double }, { %Array*, double }* %165, i64 0, i32 1
  %sign = load double, double* %167
  %168 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %168, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 1)
  %169 = fmul double %globalSign, %sign
  %theta = fmul double %169, %angle
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %170 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %171 = bitcast %Tuple* %170 to { %Array*, double, %Array* }*
  %172 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i64 0, i32 0
  %173 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i64 0, i32 1
  %174 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i64 0, i32 2
  store %Array* %pauliString, %Array** %172
  store double %theta, double* %173
  store %Array* %qubits, %Array** %174
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %171)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %170, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %175 = add i64 %161, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %176 = phi i64 [ 0, %exit__2 ], [ %181, %exiting__3 ]
  %177 = icmp sle i64 %176, 7
  br i1 %177, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %176)
  %179 = bitcast i8* %178 to %Array**
  %180 = load %Array*, %Array** %179
  call void @__quantum__rt__array_update_alias_count(%Array* %180, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %181 = add i64 %176, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %182 = phi i64 [ 0, %exit__3 ], [ %187, %exiting__4 ]
  %183 = icmp sle i64 %182, 7
  br i1 %183, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %184 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %182)
  %185 = bitcast i8* %184 to %Array**
  %186 = load %Array*, %Array** %185
  call void @__quantum__rt__array_update_reference_count(%Array* %186, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %187 = add i64 %182, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %145, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %sortedIndices, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i64 -1)
  %188 = bitcast { %Array*, %Array*, double }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %188, i64 -1)
  %189 = sub i64 %159, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %190 = phi i64 [ 0, %exit__4 ], [ %198, %exiting__5 ]
  %191 = icmp sle i64 %190, %189
  br i1 %191, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %190)
  %193 = bitcast i8* %192 to { %Array*, double }**
  %194 = load { %Array*, double }*, { %Array*, double }** %193
  %195 = getelementptr { %Array*, double }, { %Array*, double }* %194, i64 0, i32 0
  %196 = load %Array*, %Array** %195
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i64 -1)
  %197 = bitcast { %Array*, double }* %194 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %197, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %198 = add i64 %190, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %158, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__termType__ = load i64, i64* %12
  %13 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16
  store double %stepSize, double* %17
  store %Array* %qubits, %Array** %18
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22
  store double %stepSize, double* %23
  store %Array* %qubits, %Array** %24
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %16 = bitcast i8* %15 to i64*
  %__qsVar5__r__ = load i64, i64* %16
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %18 = bitcast i8* %17 to i64*
  %__qsVar6__s__ = load i64, i64* %18
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20
  %22 = fmul double 1.250000e-01, %21
  %__qsVar7__angle__ = fmul double %22, %stepSize
  %23 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  %24 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  %29 = or i1 %27, %28
  %30 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  %31 = or i1 %29, %30
  %32 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  %33 = or i1 %31, %32
  br i1 %33, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %34 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @31, i32 0, i32 0))
  %35 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_update_reference_count(%String* %34, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i64 -1)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @32, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i64 -1)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i64 -1)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @33, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i64 -1)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i64 -1)
  %45 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @34, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i64 -1)
  %47 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i64 -1)
  %49 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @35, i32 0, i32 0))
  %50 = call %String* @__quantum__rt__string_concatenate(%String* %48, %String* %49)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__fail(%String* %50)
  unreachable

continue__1:                                      ; preds = %entry
  %__qsVar8__x__ = load i2, i2* @PauliX
  %__qsVar9__y__ = load i2, i2* @PauliY
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %62 = bitcast i8* %61 to %Array**
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %64 = bitcast i8* %63 to %Array**
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %66 = bitcast i8* %65 to %Array**
  %67 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 0)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 1)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 2)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 3)
  %75 = bitcast i8* %74 to i2*
  store i2 %__qsVar9__y__, i2* %69
  store i2 %__qsVar9__y__, i2* %71
  store i2 %__qsVar8__x__, i2* %73
  store i2 %__qsVar9__y__, i2* %75
  %76 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 0)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 1)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 2)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 3)
  %84 = bitcast i8* %83 to i2*
  store i2 %__qsVar8__x__, i2* %78
  store i2 %__qsVar8__x__, i2* %80
  store i2 %__qsVar8__x__, i2* %82
  store i2 %__qsVar9__y__, i2* %84
  %85 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 0)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 1)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 2)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 3)
  %93 = bitcast i8* %92 to i2*
  store i2 %__qsVar8__x__, i2* %87
  store i2 %__qsVar9__y__, i2* %89
  store i2 %__qsVar9__y__, i2* %91
  store i2 %__qsVar9__y__, i2* %93
  %94 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 0)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 1)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 2)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 3)
  %102 = bitcast i8* %101 to i2*
  store i2 %__qsVar9__y__, i2* %96
  store i2 %__qsVar8__x__, i2* %98
  store i2 %__qsVar9__y__, i2* %100
  store i2 %__qsVar9__y__, i2* %102
  %103 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 0)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 1)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 2)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 3)
  %111 = bitcast i8* %110 to i2*
  store i2 %__qsVar8__x__, i2* %105
  store i2 %__qsVar9__y__, i2* %107
  store i2 %__qsVar8__x__, i2* %109
  store i2 %__qsVar8__x__, i2* %111
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 2)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 3)
  %120 = bitcast i8* %119 to i2*
  store i2 %__qsVar9__y__, i2* %114
  store i2 %__qsVar8__x__, i2* %116
  store i2 %__qsVar8__x__, i2* %118
  store i2 %__qsVar8__x__, i2* %120
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 0)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 1)
  %125 = bitcast i8* %124 to i2*
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 2)
  %127 = bitcast i8* %126 to i2*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 3)
  %129 = bitcast i8* %128 to i2*
  store i2 %__qsVar9__y__, i2* %123
  store i2 %__qsVar9__y__, i2* %125
  store i2 %__qsVar9__y__, i2* %127
  store i2 %__qsVar8__x__, i2* %129
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to i2*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to i2*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to i2*
  store i2 %__qsVar8__x__, i2* %132
  store i2 %__qsVar8__x__, i2* %134
  store i2 %__qsVar9__y__, i2* %136
  store i2 %__qsVar8__x__, i2* %138
  store %Array* %67, %Array** %52
  store %Array* %76, %Array** %54
  store %Array* %85, %Array** %56
  store %Array* %94, %Array** %58
  store %Array* %103, %Array** %60
  store %Array* %112, %Array** %62
  store %Array* %121, %Array** %64
  store %Array* %130, %Array** %66
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %139 = phi i64 [ 0, %continue__1 ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i64 1)
  %145 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 0)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 1)
  %149 = bitcast i8* %148 to i64*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 2)
  %151 = bitcast i8* %150 to i64*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 3)
  %153 = bitcast i8* %152 to i64*
  store i64 %__qsVar3__p__, i64* %147
  store i64 %__qsVar4__q__, i64* %149
  store i64 %__qsVar5__r__, i64* %151
  store i64 %__qsVar6__s__, i64* %153
  %154 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %145)
  %155 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %155
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i64 1)
  %156 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %156
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i64 1)
  %157 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %157
  %158 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %159 = call %Array* @Microsoft__Quantum__Arrays___4c591c2966cf47eb987518de6192a1d0_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %160 = call i64 @__quantum__rt__array_get_size_1d(%Array* %159)
  %161 = sub i64 %160, 1
  %162 = load %Range, %Range* @EmptyRange
  %163 = insertvalue %Range %162, i64 %161, 0
  %164 = insertvalue %Range %163, i64 -1, 1
  %165 = insertvalue %Range %164, i64 0, 2
  %166 = call %Array* @__quantum__rt__array_slice_1d(%Array* %158, %Range %165, i1 false)
  %167 = call i64 @__quantum__rt__array_get_size_1d(%Array* %166)
  %168 = sub i64 %167, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %169 = phi i64 [ 0, %exit__1 ], [ %183, %exiting__2 ]
  %170 = icmp sle i64 %169, %168
  br i1 %170, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %171 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %166, i64 %169)
  %172 = bitcast i8* %171 to { %Array*, double }**
  %173 = load { %Array*, double }*, { %Array*, double }** %172
  %174 = getelementptr { %Array*, double }, { %Array*, double }* %173, i64 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %174
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i64 1)
  %175 = getelementptr { %Array*, double }, { %Array*, double }* %173, i64 0, i32 1
  %__qsVar15__sign__ = load double, double* %175
  %176 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %176, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 1)
  %177 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %theta = fmul double %177, %__qsVar7__angle__
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %178 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %179 = bitcast %Tuple* %178 to { %Array*, double, %Array* }*
  %180 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %179, i64 0, i32 0
  %181 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %179, i64 0, i32 1
  %182 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %179, i64 0, i32 2
  store %Array* %__qsVar16__pauliString__, %Array** %180
  store double %theta, double* %181
  store %Array* %qubits, %Array** %182
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %179)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %178, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %183 = add i64 %169, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i64 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %184 = phi i64 [ 0, %exit__2 ], [ %189, %exiting__3 ]
  %185 = icmp sle i64 %184, 7
  br i1 %185, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %184)
  %187 = bitcast i8* %186 to %Array**
  %188 = load %Array*, %Array** %187
  call void @__quantum__rt__array_update_alias_count(%Array* %188, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %189 = add i64 %184, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i64 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %190 = phi i64 [ 0, %exit__3 ], [ %195, %exiting__4 ]
  %191 = icmp sle i64 %190, 7
  br i1 %191, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %190)
  %193 = bitcast i8* %192 to %Array**
  %194 = load %Array*, %Array** %193
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %195 = add i64 %190, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__ops__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %145, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__sortedIndices__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar12__signs__, i64 -1)
  %196 = bitcast { %Array*, %Array*, double }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %196, i64 -1)
  %197 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %198 = sub i64 %197, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %199 = phi i64 [ 0, %exit__4 ], [ %207, %exiting__5 ]
  %200 = icmp sle i64 %199, %198
  br i1 %200, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %199)
  %202 = bitcast i8* %201 to { %Array*, double }**
  %203 = load { %Array*, double }*, { %Array*, double }** %202
  %204 = getelementptr { %Array*, double }, { %Array*, double }* %203, i64 0, i32 0
  %205 = load %Array*, %Array** %204
  call void @__quantum__rt__array_update_reference_count(%Array* %205, i64 -1)
  %206 = bitcast { %Array*, double }* %203 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %206, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %207 = add i64 %199, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %158, i64 -1)
  %208 = sub i64 %160, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %209 = phi i64 [ 0, %exit__5 ], [ %217, %exiting__6 ]
  %210 = icmp sle i64 %209, %208
  br i1 %210, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %211 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %209)
  %212 = bitcast i8* %211 to { %Array*, double }**
  %213 = load { %Array*, double }*, { %Array*, double }** %212
  %214 = getelementptr { %Array*, double }, { %Array*, double }* %213, i64 0, i32 0
  %215 = load %Array*, %Array** %214
  call void @__quantum__rt__array_update_reference_count(%Array* %215, i64 -1)
  %216 = bitcast { %Array*, double }* %213 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %216, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %217 = add i64 %209, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %159, i64 -1)
  %218 = sub i64 %167, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %219 = phi i64 [ 0, %exit__6 ], [ %227, %exiting__7 ]
  %220 = icmp sle i64 %219, %218
  br i1 %220, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %221 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %166, i64 %219)
  %222 = bitcast i8* %221 to { %Array*, double }**
  %223 = load { %Array*, double }*, { %Array*, double }** %222
  %224 = getelementptr { %Array*, double }, { %Array*, double }* %223, i64 0, i32 0
  %225 = load %Array*, %Array** %224
  call void @__quantum__rt__array_update_reference_count(%Array* %225, i64 -1)
  %226 = bitcast { %Array*, double }* %223 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %226, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %227 = add i64 %219, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %166, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___1eff936b82334703a21e7bb7caee5b0a_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %1, %preheader__1 ], [ %14, %exiting__1 ]
  %5 = icmp sle i64 %idxQubit, %3
  %6 = icmp sge i64 %idxQubit, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr { %Qubit* }, { %Qubit* }* %12, i64 0, i32 0
  store %Qubit* %10, %Qubit** %13
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %idxQubit, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___7a78c79bd6704fc695da565f6b88240d_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %1 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* null, %Qubit** %5
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %sliced = alloca %Array*
  store %Array* %0, %Array** %sliced
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 1)
  %7 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %9 = load %Array*, %Array** %sliced
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i64 -1)
  %10 = call %Array* @__quantum__rt__array_copy(%Array* %9, i1 false)
  %11 = icmp ne %Array* %9, %10
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %idx)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %17, %Qubit** %19
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  store %Array* %10, %Array** %sliced
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load %Array*, %Array** %sliced
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 -1)
  ret %Array* %21
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___7a78c79bd6704fc695da565f6b88240d_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__adj(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %0, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___1eff936b82334703a21e7bb7caee5b0a_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  %4 = sub i64 %3, %1
  %5 = udiv i64 %4, %2
  %6 = mul i64 %2, %5
  %7 = add i64 %1, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = sub i64 0, %2
  %11 = insertvalue %Range %9, i64 %10, 1
  %12 = insertvalue %Range %11, i64 %1, 2
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %16 = icmp sgt i64 %14, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %13, %preheader__1 ], [ %27, %exiting__1 ]
  %17 = icmp sle i64 %__qsVar0__idxQubit__, %15
  %18 = icmp sge i64 %__qsVar0__idxQubit__, %15
  %19 = select i1 %16, i1 %17, i1 %18
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %20, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %20)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = load %Qubit*, %Qubit** %22
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Qubit* }*
  %26 = getelementptr { %Qubit* }, { %Qubit* }* %25, i64 0, i32 0
  store %Qubit* %23, %Qubit** %26
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %20, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %__qsVar0__idxQubit__, %14
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %qubitIndices = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %qubits = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %8 = call %Array* @Microsoft__Quantum__Arrays___7a78c79bd6704fc695da565f6b88240d_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  store %Callable* %7, %Callable** %5
  store %Array* %8, %Array** %6
  call void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 1)
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %register = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___1eff936b82334703a21e7bb7caee5b0a_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %7 = icmp sgt i64 %5, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %4, %preheader__1 ], [ %19, %exiting__1 ]
  %8 = icmp sle i64 %idxQubit, %6
  %9 = icmp sge i64 %idxQubit, %6
  %10 = select i1 %7, i1 %8, i1 %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %11, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %17 = bitcast i8* %16 to %Qubit**
  %18 = load %Qubit*, %Qubit** %17
  store %Array* %__controlQubits__, %Array** %14
  store %Qubit* %18, %Qubit** %15
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %11, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idxQubit, %5
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %qubitIndices = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 1)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %qubits = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %8 = call %Array* @Microsoft__Quantum__Arrays___7a78c79bd6704fc695da565f6b88240d_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  store %Callable* %7, %Callable** %5
  store %Array* %8, %Array** %6
  call void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___2cf086c0837748929c52e7a8b9c01d62_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 1)
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %register = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___1eff936b82334703a21e7bb7caee5b0a_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  %7 = sub i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = mul i64 %5, %8
  %10 = add i64 %4, %9
  %11 = load %Range, %Range* @EmptyRange
  %12 = insertvalue %Range %11, i64 %10, 0
  %13 = sub i64 0, %5
  %14 = insertvalue %Range %12, i64 %13, 1
  %15 = insertvalue %Range %14, i64 %4, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %16, %preheader__1 ], [ %31, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar0__idxQubit__, %18
  %21 = icmp sge i64 %__qsVar0__idxQubit__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, %Qubit* }*
  %26 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %25, i64 0, i32 1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %29 = bitcast i8* %28 to %Qubit**
  %30 = load %Qubit*, %Qubit** %29
  store %Array* %__controlQubits__, %Array** %26
  store %Qubit* %30, %Qubit** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %31 = add i64 %__qsVar0__idxQubit__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 0
  %2 = load double, double* %1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  ret double %2
}

define { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = call double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input)
  %2 = call double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input)
  %3 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %1, double %2)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  ret { double, double }* %3
}

define { double, double }* @Microsoft__Quantum__Math__Complex__body(double %Real, double %Imag) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 0
  %3 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 1
  store double %Real, double* %2
  store double %Imag, double* %3
  ret { double, double }* %1
}

declare double @__quantum__qis__sqrt__body(double)

define { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %Magnitude, double %Argument) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 0
  %3 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 1
  store double %Magnitude, double* %2
  store double %Argument, double* %3
  ret { double, double }* %1
}

define double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 1
  %2 = load double, double* %1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  ret double %2
}

define i64 @Microsoft__Quantum__Math__Ceiling__body(double %value) {
entry:
  %0 = call { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef1__ExtendedTruncation____body(double %value)
  %1 = getelementptr { i64, double, i1 }, { i64, double, i1 }* %0, i64 0, i32 0
  %truncated = load i64, i64* %1
  %2 = getelementptr { i64, double, i1 }, { i64, double, i1 }* %0, i64 0, i32 1
  %remainder = load double, double* %2
  %3 = getelementptr { i64, double, i1 }, { i64, double, i1 }* %0, i64 0, i32 2
  %isPositive = load i1, i1* %3
  %4 = call double @Microsoft__Quantum__Math__AbsD__body(double %remainder)
  %5 = fcmp ole double %4, 1.000000e-15
  br i1 %5, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %6 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret i64 %truncated

else__1:                                          ; preds = %entry
  br i1 %isPositive, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %7 = add i64 %truncated, 1
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %8 = phi i64 [ %7, %condTrue__1 ], [ %truncated, %condFalse__1 ]
  %9 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  ret i64 %8
}

define double @Microsoft__Quantum__Math__Lg__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  %1 = call double @Microsoft__Quantum__Math__LogOf2__body()
  %2 = fdiv double %0, %1
  ret double %2
}

define %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %0, %Callable* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %unitaryGenerator = bitcast %Tuple* %2 to { i64, %Callable* }*
  %3 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %4 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  store i64 %0, i64* %3
  store %Callable* %1, %Callable** %4
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %1, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %6 = bitcast %Tuple* %5 to { %Callable*, { i64, %Callable* }* }*
  %7 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %6, i64 0, i32 0
  %8 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %6, i64 0, i32 1
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %9, %Callable** %7
  store { i64, %Callable* }* %unitaryGenerator, { i64, %Callable* }** %8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__10, [2 x void (%Tuple*, i64)*]* @MemoryManagement__9, %Tuple* %5)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %1, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %1, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  ret %Callable* %10
}

define %Callable* @Microsoft__Quantum__Arrays___24918901619c4d50b0d734ebaa360ca5_LookupFunction__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i64 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___00faa319cec04c35b268acd7ae24be3c_ElementAt, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %12, %Callable** %10
  store %Array* %array, %Array** %11
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__29, [2 x void (%Tuple*, i64)*]* @MemoryManagement__18, %Tuple* %8)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %15)
  %18 = bitcast i8* %17 to %Callable**
  %19 = load %Callable*, %Callable** %18
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %array, i64 1)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Callable* %13
}

define %Array* @Microsoft__Quantum__Arrays___48e84d53d9ae40f3a6d22d7e74b4d7cc_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %mapper, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %14, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to %Callable**
  store %Callable* null, %Callable** %13
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* null, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* null, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %14 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %resultArray = alloca %Array*
  store %Array* %8, %Array** %resultArray
  %15 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %16 = phi i64 [ 0, %exit__2 ], [ %21, %exiting__3 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %16)
  %19 = bitcast i8* %18 to %Callable**
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %20, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %21 = add i64 %16, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 1)
  %22 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %23 = phi i64 [ 0, %exit__3 ], [ %28, %exiting__4 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %23)
  %26 = bitcast i8* %25 to %Callable**
  %27 = load %Callable*, %Callable** %26
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %28 = add i64 %23, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 1)
  %29 = call %Range @Microsoft__Quantum__Arrays___17a2b288a3d5467a97ba7d7d667e16ae_IndexRange__body(%Array* %array)
  %30 = extractvalue %Range %29, 0
  %31 = extractvalue %Range %29, 1
  %32 = extractvalue %Range %29, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__4
  %33 = icmp sgt i64 %31, 0
  br label %header__5

header__5:                                        ; preds = %exiting__5, %preheader__1
  %idxElement = phi i64 [ %30, %preheader__1 ], [ %53, %exiting__5 ]
  %34 = icmp sle i64 %idxElement, %32
  %35 = icmp sge i64 %idxElement, %32
  %36 = select i1 %33, i1 %34, i1 %35
  br i1 %36, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %37 = load %Array*, %Array** %resultArray
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i64 -1)
  %38 = call %Array* @__quantum__rt__array_copy(%Array* %37, i1 false)
  %39 = icmp ne %Array* %37, %38
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %41 = bitcast i8* %40 to %Array**
  %42 = load %Array*, %Array** %41
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { %Array* }*
  %45 = getelementptr { %Array* }, { %Array* }* %44, i64 0, i32 0
  store %Array* %42, %Array** %45
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %43, %Tuple* %46)
  %47 = bitcast %Tuple* %46 to { %Callable* }*
  %48 = getelementptr { %Callable* }, { %Callable* }* %47, i64 0, i32 0
  %49 = load %Callable*, %Callable** %48
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %idxElement)
  %51 = bitcast i8* %50 to %Callable**
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %49, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %49, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %49, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %49, i64 1)
  %52 = load %Callable*, %Callable** %51
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %52, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %52, i64 -1)
  br i1 %39, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %body__5
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %49, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %49, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %52, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i64 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %body__5
  store %Callable* %49, %Callable** %51
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i64 1)
  store %Array* %38, %Array** %resultArray
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %49, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %49, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %52, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %52, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %condContinue__1
  %53 = add i64 %idxElement, %31
  br label %header__5

exit__5:                                          ; preds = %header__5
  %54 = load %Array*, %Array** %resultArray
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %mapper, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i64 -1)
  %55 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %56 = phi i64 [ 0, %exit__5 ], [ %61, %exiting__6 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %60 = load %Array*, %Array** %59
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %61 = add i64 %56, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %54)
  %63 = sub i64 %62, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %64 = phi i64 [ 0, %exit__6 ], [ %69, %exiting__7 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 %64)
  %67 = bitcast i8* %66 to %Callable**
  %68 = load %Callable*, %Callable** %67
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %68, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %68, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %69 = add i64 %64, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %54, i64 -1)
  %70 = sub i64 %0, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %71 = phi i64 [ 0, %exit__7 ], [ %76, %exiting__8 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %71)
  %74 = bitcast i8* %73 to %Callable**
  %75 = load %Callable*, %Callable** %74
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %75, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %75, i64 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %76 = add i64 %71, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  ret %Array* %54
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr { %Array* }, { %Array* }* %0, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  %3 = call %Callable* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %2)
  %4 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %5 = getelementptr { %Callable* }, { %Callable* }* %4, i64 0, i32 0
  store %Callable* %3, %Callable** %5
  ret void
}

define %Callable* @Microsoft__Quantum__Preparation__StatePreparationComplexCoefficients__body(%Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %10 = bitcast %Tuple* %9 to { %Callable*, %Array* }*
  %11 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %10, i64 0, i32 0
  %12 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %10, i64 0, i32 1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %13, %Callable** %11
  store %Array* %coefficients, %Array** %12
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__41, [2 x void (%Tuple*, i64)*]* @MemoryManagement__26, %Tuple* %9)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  %23 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %24 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %24, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  ret %Callable* %14
}

define { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %__Item1__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr { %Array* }, { %Array* }* %1, i64 0, i32 0
  store %Array* %__Item1__, %Array** %2
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i64 -1)
  ret { %Array* }* %1
}

define %Callable* @Microsoft__Quantum__Preparation__StatePreparationPositiveCoefficients__body(%Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %4, %Callable** %2
  store %Array* %coefficients, %Array** %3
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__42, [2 x void (%Tuple*, i64)*]* @MemoryManagement__27, %Tuple* %0)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  ret %Callable* %5
}

declare %Callable* @__quantum__rt__callable_copy(%Callable*, i1)

declare void @__quantum__rt__callable_make_adjoint(%Callable*)

define %Callable* @Microsoft__Quantum__Canon___5461537378df4b6492e895a7d34e2041_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, i64, %Callable* }*
  %2 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store i64 %numberState, i64* %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__25, [2 x void (%Tuple*, i64)*]* @MemoryManagement__14, %Tuple* %0)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  ret %Callable* %6
}

declare %Result* @__quantum__qis__measure__body(%Array*, %Array*)

define void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %5
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define %Range @Microsoft__Quantum__Arrays___ad5a82386a254e19afadd23ef0f2479b_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Range %5
}

define { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body(%Array* %data, i64 %idx) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %idx)
  %15 = bitcast i8* %14 to { { double, double }*, %Array* }**
  %16 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %15
  %17 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorIndex__body({ { double, double }*, %Array* }* %16)
  %18 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %19)
  %22 = bitcast i8* %21 to { { double, double }*, %Array* }**
  %23 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %22
  %24 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %23, i64 0, i32 0
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  %27 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %23, i64 0, i32 1
  %28 = load %Array*, %Array** %27
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 -1)
  %29 = bitcast { { double, double }*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i64 -1)
  ret { { %Array*, %Array* }*, %Array* }* %17
}

define double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 0
  %real = load double, double* %1
  %2 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 1
  %imaginary = load double, double* %2
  %3 = fmul double %real, %real
  %4 = fmul double %imaginary, %imaginary
  %5 = fadd double %3, %4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  ret double %5
}

define { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef1__ExtendedTruncation____body(double %value) {
entry:
  %truncated = fptosi double %value to i64
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, i1 }* getelementptr ({ i64, double, i1 }, { i64, double, i1 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, double, i1 }*
  %2 = getelementptr { i64, double, i1 }, { i64, double, i1 }* %1, i64 0, i32 0
  %3 = getelementptr { i64, double, i1 }, { i64, double, i1 }* %1, i64 0, i32 1
  %4 = getelementptr { i64, double, i1 }, { i64, double, i1 }* %1, i64 0, i32 2
  %5 = sitofp i64 %truncated to double
  %6 = fsub double %5, %value
  %7 = fcmp oge double %value, 0.000000e+00
  store i64 %truncated, i64* %2
  store double %6, double* %3
  store i1 %7, i1* %4
  ret { i64, double, i1 }* %1
}

define double @Microsoft__Quantum__Math__AbsD__body(double %a) {
entry:
  %0 = fcmp olt double %a, 0.000000e+00
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = fneg double %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi double [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret double %2
}

define i64 @Microsoft__Quantum__Math__MinI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp slt i64 %a, %b
  %1 = select i1 %0, i64 %a, i64 %b
  ret i64 %1
}

define i64 @Microsoft__Quantum__Math__AbsI__body(i64 %a) {
entry:
  %0 = icmp slt i64 %a, 0
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = sub i64 0, %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi i64 [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret i64 %2
}

define double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %d = call double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input)
  %1 = call double @__quantum__qis__sqrt__body(double %d)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  ret double %1
}

define double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 0
  %real = load double, double* %1
  %2 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 1
  %imaginary = load double, double* %2
  %3 = call double @__quantum__qis__arctan2__body(double %imaginary, double %real)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  ret double %3
}

define double @Microsoft__Quantum__Math__PowD__body(double %x, double %y) {
entry:
  %0 = call double @llvm.pow.f64(double %x, double %y)
  ret double %0
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #1

declare double @__quantum__qis__log__body(double)

define double @Microsoft__Quantum__Math__LogOf2__body() {
entry:
  ret double 0x3FE62E42FEFA39EF
}

define double @Microsoft__Quantum__Math__Log__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  ret double %0
}

define double @Microsoft__Quantum__Math__ArcTan2__body(double %y, double %x) {
entry:
  %0 = call double @__quantum__qis__arctan2__body(double %y, double %x)
  ret double %0
}

declare double @__quantum__qis__arctan2__body(double, double)

define double @Microsoft__Quantum__Math__Sqrt__body(double %d) {
entry:
  %0 = call double @__quantum__qis__sqrt__body(double %d)
  ret double %0
}

define %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %number, i64 %bits) {
entry:
  %0 = icmp sge i64 %bits, 0
  %1 = icmp sle i64 %bits, 63
  %2 = and i1 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 32, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @36, i32 0, i32 0))
  %4 = trunc i64 %bits to i32
  %5 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %4)
  %6 = fptosi fp128 %5 to i64
  %7 = call %String* @__quantum__rt__int_to_string(i64 %6)
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %3, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i64 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %8)
  %9 = icmp sge i64 %number, 0
  %10 = trunc i64 %bits to i32
  %11 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %10)
  %12 = fptosi fp128 %11 to i64
  %13 = icmp slt i64 %number, %12
  %14 = and i1 %9, %13
  %15 = call %String* @__quantum__rt__string_create(i32 33, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @37, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__int_to_string(i64 %bits)
  %17 = call %String* @__quantum__rt__string_concatenate(%String* %15, %String* %16)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i64 -1)
  %18 = call %String* @__quantum__rt__string_create(i32 14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @38, i32 0, i32 0))
  %19 = call %String* @__quantum__rt__string_concatenate(%String* %17, %String* %18)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i64 -1)
  %20 = call %String* @__quantum__rt__int_to_string(i64 %number)
  %21 = call %String* @__quantum__rt__string_concatenate(%String* %19, %String* %20)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i64 -1)
  %22 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @39, i32 0, i32 0))
  %23 = call %String* @__quantum__rt__string_concatenate(%String* %21, %String* %22)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i64 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %14, %String* %23)
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %bits)
  %25 = sub i64 %bits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %26 = phi i64 [ 0, %entry ], [ %30, %exiting__1 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 %26)
  %29 = bitcast i8* %28 to i1*
  store i1 false, i1* %29
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %30 = add i64 %26, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %outputBits = alloca %Array*
  store %Array* %24, %Array** %outputBits
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 1)
  %tempInt = alloca i64
  store i64 %number, i64* %tempInt
  %31 = sub i64 %bits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %43, %exiting__2 ]
  %32 = icmp sle i64 %idxBit, %31
  br i1 %32, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %33 = load %Array*, %Array** %outputBits
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i64 -1)
  %34 = call %Array* @__quantum__rt__array_copy(%Array* %33, i1 false)
  %35 = icmp ne %Array* %33, %34
  %36 = load i64, i64* %tempInt
  %37 = srem i64 %36, 2
  %38 = icmp eq i64 %37, 0
  %39 = select i1 %38, i1 false, i1 true
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %idxBit)
  %41 = bitcast i8* %40 to i1*
  store i1 %39, i1* %41
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i64 1)
  store %Array* %34, %Array** %outputBits
  %42 = udiv i64 %36, 2
  store i64 %42, i64* %tempInt
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %43 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %44 = load %Array*, %Array** %outputBits
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 -1)
  ret %Array* %44
}

define void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %actual, %String* %message) {
entry:
  %0 = xor i1 %actual, true
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__string_update_reference_count(%String* %message, i64 1)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

continue__1:                                      ; preds = %entry
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare fp128 @llvm.powi.f128(fp128, i32) #1

define void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = icmp ne i1 %actual, %expected
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Diagnostics___66550d817e744a17b8a0c8796c281184___QsRef2__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define void @Microsoft__Quantum__Diagnostics___66550d817e744a17b8a0c8796c281184___QsRef2__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message) {
entry:
  call void @__quantum__rt__string_update_reference_count(%String* %message, i64 1)
  %0 = call %String* @__quantum__rt__string_create(i32 12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @40, i32 0, i32 0))
  %1 = call %String* @__quantum__rt__string_concatenate(%String* %message, %String* %0)
  call void @__quantum__rt__string_update_reference_count(%String* %message, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %0, i64 -1)
  %2 = call %String* @__quantum__rt__bool_to_string(i1 %expected)
  %3 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %2)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i64 -1)
  %4 = call %String* @__quantum__rt__string_create(i32 10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @41, i32 0, i32 0))
  %5 = call %String* @__quantum__rt__string_concatenate(%String* %3, %String* %4)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i64 -1)
  %6 = call %String* @__quantum__rt__bool_to_string(i1 %actual)
  %7 = call %String* @__quantum__rt__string_concatenate(%String* %5, %String* %6)
  call void @__quantum__rt__string_update_reference_count(%String* %5, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i64 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable
}

declare %String* @__quantum__rt__bool_to_string(i1)

define { double, double }* @Microsoft__Quantum__Canon___318ca8f6570d4e08a137a15bcb135424___QsRef2__ComposedOutput____body(%Callable* %outer, %Callable* %inner, double %target) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outer, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %inner, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double }*
  %2 = getelementptr { double }, { double }* %1, i64 0, i32 0
  store double %target, double* %2
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %inner, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { double }*
  %5 = getelementptr { double }, { double }* %4, i64 0, i32 0
  %6 = load double, double* %5
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { double }*
  %9 = getelementptr { double }, { double }* %8, i64 0, i32 0
  store double %6, double* %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %outer, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { { double, double }* }*
  %12 = getelementptr { { double, double }* }, { { double, double }* }* %11, i64 0, i32 0
  %13 = load { double, double }*, { double, double }** %12
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outer, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %inner, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret { double, double }* %13
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %4)
  %6 = fptosi fp128 %5 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  %16 = load i2, i2* @PauliZ
  store i2 %16, i2* %15
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %18 = bitcast i8* %17 to double*
  %theta = load double, double* %18
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %20 = bitcast i8* %19 to %Qubit**
  store %Qubit* %target, %Qubit** %20
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %21 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 1)
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %23
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 1)
  %24 = sub i64 %3, 2
  %25 = load %Range, %Range* @EmptyRange
  %26 = insertvalue %Range %25, i64 0, 0
  %27 = insertvalue %Range %26, i64 1, 1
  %28 = insertvalue %Range %27, i64 %24, 2
  %29 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %28, i1 false)
  %30 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %29)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %30, %Qubit* %target)
  %31 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %31, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %32 = sub i64 %3, 1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %32)
  %34 = bitcast i8* %33 to %Qubit**
  %35 = load %Qubit*, %Qubit** %34
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %35, %Qubit* %target)
  %36 = sub i64 %3, 2
  %37 = load %Range, %Range* @EmptyRange
  %38 = insertvalue %Range %37, i64 0, 0
  %39 = insertvalue %Range %38, i64 1, 1
  %40 = insertvalue %Range %39, i64 %36, 2
  %41 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %40, i1 false)
  %42 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %41)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %42, %Qubit* %target)
  %43 = sub i64 %3, 1
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %43)
  %45 = bitcast i8* %44 to %Qubit**
  %46 = load %Qubit*, %Qubit** %45
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %46, %Qubit* %target)
  %47 = getelementptr { %Array* }, { %Array* }* %42, i64 0, i32 0
  %48 = load %Array*, %Array** %47
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i64 -1)
  %49 = bitcast { %Array* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %50 = getelementptr { %Array* }, { %Array* }* %30, i64 0, i32 0
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i64 -1)
  %52 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i64 -1)
  %53 = bitcast { %Array* }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i64 -1)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %nElementsTotal, double %defaultElement, %Array* %inputArray) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i64 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %0 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %1 = call %String* @__quantum__rt__string_create(i32 70, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @65, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %0, i1 true, %String* %1)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___d4730896642e402f935d1d53c266632d_ConstantArray__body(i64 %nElementsPad, double %defaultElement)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i64 1)
  %2 = icmp sge i64 %nElementsTotal, 0
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %3 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %5 = phi %Array* [ %3, %condTrue__1 ], [ %4, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i64 -1)
  ret %Array* %5
}

define { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %newCoefficientsLength = udiv i64 %0, 2
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %2 = sub i64 %newCoefficientsLength, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to double*
  store double 0.000000e+00, double* %6
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %coefficients0 = alloca %Array*
  store %Array* %1, %Array** %coefficients0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %9 = sub i64 %newCoefficientsLength, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %14, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to double*
  store double 0.000000e+00, double* %13
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %14 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %coefficients1 = alloca %Array*
  store %Array* %8, %Array** %coefficients1
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 1)
  %15 = sub i64 %newCoefficientsLength, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxCoeff = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %16 = icmp sle i64 %idxCoeff, %15
  br i1 %16, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %17 = load %Array*, %Array** %coefficients0
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i64 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = icmp ne %Array* %17, %18
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %21 = bitcast i8* %20 to double*
  %22 = load double, double* %21
  %23 = add i64 %idxCoeff, %newCoefficientsLength
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %23)
  %25 = bitcast i8* %24 to double*
  %26 = load double, double* %25
  %27 = fadd double %22, %26
  %28 = fmul double 5.000000e-01, %27
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxCoeff)
  %30 = bitcast i8* %29 to double*
  store double %28, double* %30
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 1)
  store %Array* %18, %Array** %coefficients0
  %31 = load %Array*, %Array** %coefficients1
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i64 -1)
  %32 = call %Array* @__quantum__rt__array_copy(%Array* %31, i1 false)
  %33 = icmp ne %Array* %31, %32
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %35 = bitcast i8* %34 to double*
  %36 = load double, double* %35
  %37 = add i64 %idxCoeff, %newCoefficientsLength
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %39 = bitcast i8* %38 to double*
  %40 = load double, double* %39
  %41 = fsub double %36, %40
  %42 = fmul double 5.000000e-01, %41
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %idxCoeff)
  %44 = bitcast i8* %43 to double*
  store double %42, double* %44
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i64 1)
  store %Array* %32, %Array** %coefficients1
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %idxCoeff, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %47 = bitcast %Tuple* %46 to { %Array*, %Array* }*
  %48 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %47, i64 0, i32 0
  %49 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %47, i64 0, i32 1
  %50 = load %Array*, %Array** %coefficients0
  %51 = load %Array*, %Array** %coefficients1
  store %Array* %50, %Array** %48
  store %Array* %51, %Array** %49
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 -1)
  ret { %Array*, %Array* }* %47
}

define i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to double*
  %coefficient = load double, double* %5
  %6 = call double @Microsoft__Quantum__Math__AbsD__body(double %coefficient)
  %7 = fcmp oge double %6, %tolerance
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  ret i1 true

continue__1:                                      ; preds = %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  ret i1 false
}

define void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %4)
  %6 = fptosi fp128 %5 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %15 = bitcast i8* %14 to i2*
  %16 = load i2, i2* @PauliZ
  store i2 %16, i2* %15
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %18 = bitcast i8* %17 to double*
  %theta = load double, double* %18
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %20 = bitcast i8* %19 to %Qubit**
  store %Qubit* %target, %Qubit** %20
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %21 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 1)
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %23
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 1)
  %24 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %24, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %25 = sub i64 %3, 1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %25)
  %27 = bitcast i8* %26 to %Qubit**
  %28 = load %Qubit*, %Qubit** %27
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %28, %Qubit* %target)
  %29 = sub i64 %3, 2
  %30 = load %Range, %Range* @EmptyRange
  %31 = insertvalue %Range %30, i64 0, 0
  %32 = insertvalue %Range %31, i64 1, 1
  %33 = insertvalue %Range %32, i64 %29, 2
  %34 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %33, i1 false)
  %35 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %34)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %35, %Qubit* %target)
  %36 = sub i64 %3, 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %36)
  %38 = bitcast i8* %37 to %Qubit**
  %39 = load %Qubit*, %Qubit** %38
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %39, %Qubit* %target)
  %40 = getelementptr { %Array* }, { %Array* }* %35, i64 0, i32 0
  %41 = load %Array*, %Array** %40
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  %42 = bitcast { %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %43 = sub i64 %3, 2
  %44 = load %Range, %Range* @EmptyRange
  %45 = insertvalue %Range %44, i64 0, 0
  %46 = insertvalue %Range %45, i64 1, 1
  %47 = insertvalue %Range %46, i64 %43, 2
  %48 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %47, i1 false)
  %49 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %48)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %49, %Qubit* %target)
  %50 = getelementptr { %Array* }, { %Array* }* %49, i64 0, i32 0
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  %52 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i64 -1)
  %53 = bitcast { %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %target = load %Qubit*, %Qubit** %7
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %10)
  %12 = fptosi fp128 %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %13)
  %15 = fptosi fp128 %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %18 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %17, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %18
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 1)
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %17, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %19
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %control, %Qubit* %target)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i64 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  ret void
}

declare void @__quantum__qis__x__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %target = load %Qubit*, %Qubit** %7
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %10)
  %12 = fptosi fp128 %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %13)
  %15 = fptosi fp128 %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %18 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %17, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %18
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 1)
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %17, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %19
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 1)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %1 = icmp sle i64 %idxBit, %0
  br i1 %1, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %3 = bitcast i8* %2 to i1*
  %4 = load i1, i1* %3
  %5 = icmp eq i1 %4, %bitApply
  br i1 %5, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %8 = bitcast i8* %7 to i2*
  store i2 %pauli, i2* %8
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %11 = bitcast i8* %10 to %Qubit**
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %idxBit)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13
  store %Qubit* %14, %Qubit** %11
  call void @Microsoft__Quantum__Canon__ApplyPauli__body(%Array* %6, %Array* %9)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %15 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__body(%Array* %pauli, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___da06c620e9e94ef198c11b5ef3335ba1_IndexRange__body(%Array* %pauli)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxPauli = phi i64 [ %1, %preheader__1 ], [ %18, %exiting__1 ]
  %5 = icmp sle i64 %idxPauli, %3
  %6 = icmp sge i64 %idxPauli, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %idxPauli)
  %9 = bitcast i8* %8 to i2*
  %P = load i2, i2* %9
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %idxPauli)
  %11 = bitcast i8* %10 to %Qubit**
  %targ = load %Qubit*, %Qubit** %11
  %12 = load i2, i2* @PauliX
  %13 = icmp eq i2 %P, %12
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__qis__x__body(%Qubit* %targ)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %14 = load i2, i2* @PauliY
  %15 = icmp eq i2 %P, %14
  br i1 %15, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__y__body(%Qubit* %targ)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %16 = load i2, i2* @PauliZ
  %17 = icmp eq i2 %P, %16
  br i1 %17, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__qis__z__body(%Qubit* %targ)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %18 = add i64 %idxPauli, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = sub i64 %__qsVar0__nBits__, 1
  %1 = sub i64 %0, 0
  %2 = udiv i64 %1, 1
  %3 = mul i64 1, %2
  %4 = add i64 0, %3
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 %4, 0
  %7 = insertvalue %Range %6, i64 -1, 1
  %8 = insertvalue %Range %7, i64 0, 2
  %9 = extractvalue %Range %8, 0
  %10 = extractvalue %Range %8, 1
  %11 = extractvalue %Range %8, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %12 = icmp sgt i64 %10, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idxBit__ = phi i64 [ %9, %preheader__1 ], [ %29, %exiting__1 ]
  %13 = icmp sle i64 %__qsVar1__idxBit__, %11
  %14 = icmp sge i64 %__qsVar1__idxBit__, %11
  %15 = select i1 %12, i1 %13, i1 %14
  br i1 %15, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %__qsVar1__idxBit__)
  %17 = bitcast i8* %16 to i1*
  %18 = load i1, i1* %17
  %19 = icmp eq i1 %18, %bitApply
  br i1 %19, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to i2*
  store i2 %pauli, i2* %22
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 0)
  %25 = bitcast i8* %24 to %Qubit**
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar1__idxBit__)
  %27 = bitcast i8* %26 to %Qubit**
  %28 = load %Qubit*, %Qubit** %27
  store %Qubit* %28, %Qubit** %25
  call void @Microsoft__Quantum__Canon__ApplyPauli__adj(%Array* %20, %Array* %23)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %29 = add i64 %__qsVar1__idxBit__, %10
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__adj(%Array* %pauli, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___da06c620e9e94ef198c11b5ef3335ba1_IndexRange__body(%Array* %pauli)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  %4 = sub i64 %3, %1
  %5 = udiv i64 %4, %2
  %6 = mul i64 %2, %5
  %7 = add i64 %1, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = sub i64 0, %2
  %11 = insertvalue %Range %9, i64 %10, 1
  %12 = insertvalue %Range %11, i64 %1, 2
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %16 = icmp sgt i64 %14, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxPauli__ = phi i64 [ %13, %preheader__1 ], [ %30, %exiting__1 ]
  %17 = icmp sle i64 %__qsVar0__idxPauli__, %15
  %18 = icmp sge i64 %__qsVar0__idxPauli__, %15
  %19 = select i1 %16, i1 %17, i1 %18
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %__qsVar0__idxPauli__)
  %21 = bitcast i8* %20 to i2*
  %__qsVar1__P__ = load i2, i2* %21
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %__qsVar0__idxPauli__)
  %23 = bitcast i8* %22 to %Qubit**
  %__qsVar2__targ__ = load %Qubit*, %Qubit** %23
  %24 = load i2, i2* @PauliX
  %25 = icmp eq i2 %__qsVar1__P__, %24
  br i1 %25, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__qis__x__body(%Qubit* %__qsVar2__targ__)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %26 = load i2, i2* @PauliY
  %27 = icmp eq i2 %__qsVar1__P__, %26
  br i1 %27, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__y__body(%Qubit* %__qsVar2__targ__)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %28 = load i2, i2* @PauliZ
  %29 = icmp eq i2 %__qsVar1__P__, %28
  br i1 %29, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__qis__z__body(%Qubit* %__qsVar2__targ__)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %30 = add i64 %__qsVar0__idxPauli__, %14
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctl(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load i2, i2* %1
  %2 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 1
  %bitApply = load i1, i1* %2
  %3 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 2
  %bits = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %4 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %24, %exiting__1 ]
  %6 = icmp sle i64 %idxBit, %5
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %8 = bitcast i8* %7 to i1*
  %9 = load i1, i1* %8
  %10 = icmp eq i1 %9, %bitApply
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 0)
  %17 = bitcast i8* %16 to i2*
  store i2 %pauli, i2* %17
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 0)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %idxBit)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = load %Qubit*, %Qubit** %22
  store %Qubit* %23, %Qubit** %20
  store %Array* %15, %Array** %13
  store %Array* %18, %Array** %14
  call void @Microsoft__Quantum__Canon__ApplyPauli__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %12)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %24 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 1)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___da06c620e9e94ef198c11b5ef3335ba1_IndexRange__body(%Array* %pauli)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %7 = icmp sgt i64 %5, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxPauli = phi i64 [ %4, %preheader__1 ], [ %21, %exiting__1 ]
  %8 = icmp sle i64 %idxPauli, %6
  %9 = icmp sge i64 %idxPauli, %6
  %10 = select i1 %7, i1 %8, i1 %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %idxPauli)
  %12 = bitcast i8* %11 to i2*
  %P = load i2, i2* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %idxPauli)
  %14 = bitcast i8* %13 to %Qubit**
  %targ = load %Qubit*, %Qubit** %14
  %15 = load i2, i2* @PauliX
  %16 = icmp eq i2 %P, %15
  br i1 %16, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %targ)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %17 = load i2, i2* @PauliY
  %18 = icmp eq i2 %P, %17
  br i1 %18, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %targ)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %19 = load i2, i2* @PauliZ
  %20 = icmp eq i2 %P, %19
  br i1 %20, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %targ)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %21 = add i64 %idxPauli, %5
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctladj(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load i2, i2* %1
  %2 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 1
  %bitApply = load i1, i1* %2
  %3 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 2
  %bits = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %4 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = sub i64 %__qsVar0__nBits__, 1
  %6 = sub i64 %5, 0
  %7 = udiv i64 %6, 1
  %8 = mul i64 1, %7
  %9 = add i64 0, %8
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 %9, 0
  %12 = insertvalue %Range %11, i64 -1, 1
  %13 = insertvalue %Range %12, i64 0, 2
  %14 = extractvalue %Range %13, 0
  %15 = extractvalue %Range %13, 1
  %16 = extractvalue %Range %13, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %17 = icmp sgt i64 %15, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idxBit__ = phi i64 [ %14, %preheader__1 ], [ %38, %exiting__1 ]
  %18 = icmp sle i64 %__qsVar1__idxBit__, %16
  %19 = icmp sge i64 %__qsVar1__idxBit__, %16
  %20 = select i1 %17, i1 %18, i1 %19
  br i1 %20, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %__qsVar1__idxBit__)
  %22 = bitcast i8* %21 to i1*
  %23 = load i1, i1* %22
  %24 = icmp eq i1 %23, %bitApply
  br i1 %24, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %26 = bitcast %Tuple* %25 to { %Array*, %Array* }*
  %27 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %26, i64 0, i32 0
  %28 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %26, i64 0, i32 1
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  store i2 %pauli, i2* %31
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 0)
  %34 = bitcast i8* %33 to %Qubit**
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar1__idxBit__)
  %36 = bitcast i8* %35 to %Qubit**
  %37 = load %Qubit*, %Qubit** %36
  store %Qubit* %37, %Qubit** %34
  store %Array* %29, %Array** %27
  store %Array* %32, %Array** %28
  call void @Microsoft__Quantum__Canon__ApplyPauli__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %26)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %38 = add i64 %__qsVar1__idxBit__, %15
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 1)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___da06c620e9e94ef198c11b5ef3335ba1_IndexRange__body(%Array* %pauli)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  %7 = sub i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = mul i64 %5, %8
  %10 = add i64 %4, %9
  %11 = load %Range, %Range* @EmptyRange
  %12 = insertvalue %Range %11, i64 %10, 0
  %13 = sub i64 0, %5
  %14 = insertvalue %Range %12, i64 %13, 1
  %15 = insertvalue %Range %14, i64 %4, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxPauli__ = phi i64 [ %16, %preheader__1 ], [ %33, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar0__idxPauli__, %18
  %21 = icmp sge i64 %__qsVar0__idxPauli__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %__qsVar0__idxPauli__)
  %24 = bitcast i8* %23 to i2*
  %__qsVar1__P__ = load i2, i2* %24
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %__qsVar0__idxPauli__)
  %26 = bitcast i8* %25 to %Qubit**
  %__qsVar2__targ__ = load %Qubit*, %Qubit** %26
  %27 = load i2, i2* @PauliX
  %28 = icmp eq i2 %__qsVar1__P__, %27
  br i1 %28, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %__qsVar2__targ__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %29 = load i2, i2* @PauliY
  %30 = icmp eq i2 %__qsVar1__P__, %29
  br i1 %30, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %__qsVar2__targ__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %31 = load i2, i2* @PauliZ
  %32 = icmp eq i2 %__qsVar1__P__, %31
  br i1 %32, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %__qsVar2__targ__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %33 = add i64 %__qsVar0__idxPauli__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauli, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___b951346513364ba89719c60b99ad733f_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %0, i64 %trotterOrder) {
entry:
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = icmp eq i64 %trotterOrder, 1
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %7 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %9, %Callable** %6
  store i64 %nSteps, i64* %7
  store %Callable* %op, %Callable** %8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__7, [2 x void (%Tuple*, i64)*]* @MemoryManagement__7, %Tuple* %4)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret %Callable* %10

test1__1:                                         ; preds = %entry
  %11 = icmp eq i64 %trotterOrder, 2
  br i1 %11, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Callable* }*
  %14 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i64 0, i32 1
  %16 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i64 0, i32 2
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %17, %Callable** %14
  store i64 %nSteps, i64* %15
  store %Callable* %op, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__8, [2 x void (%Tuple*, i64)*]* @MemoryManagement__7, %Tuple* %12)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret %Callable* %18

test2__1:                                         ; preds = %test1__1
  %19 = srem i64 %trotterOrder, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, i64, %Callable* }* getelementptr ({ %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Callable*, i64, i64, %Callable* }*
  %23 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 0
  %24 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 1
  %25 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 2
  %26 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 3
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %27, %Callable** %23
  store i64 %trotterOrder, i64* %24
  store i64 %nSteps, i64* %25
  store %Callable* %op, %Callable** %26
  %28 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__9, [2 x void (%Tuple*, i64)*]* @MemoryManagement__8, %Tuple* %21)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret %Callable* %28

else__1:                                          ; preds = %test2__1
  %29 = call %String* @__quantum__rt__string_create(i32 10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @42, i32 0, i32 0))
  %30 = call %String* @__quantum__rt__int_to_string(i64 %trotterOrder)
  %31 = call %String* @__quantum__rt__string_concatenate(%String* %29, %String* %30)
  call void @__quantum__rt__string_update_reference_count(%String* %29, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i64 -1)
  %32 = call %String* @__quantum__rt__string_create(i32 19, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @43, i32 0, i32 0))
  %33 = call %String* @__quantum__rt__string_concatenate(%String* %31, %String* %32)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__fail(%String* %33)
  unreachable
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__7__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 1
  store i64 %2, i64* %7
  store %Callable* %4, %Callable** %8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 0
  %11 = load double, double* %10
  %12 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16
  store double %11, double* %17
  store %Array* %13, %Array** %18
  %19 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__7__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 1
  store i64 %2, i64* %7
  store %Callable* %4, %Callable** %8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 0
  %11 = load double, double* %10
  %12 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16
  store double %11, double* %17
  store %Array* %13, %Array** %18
  %19 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__7__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  store i64 %7, i64* %12
  store %Callable* %9, %Callable** %13
  %14 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %15 = load double, double* %14
  %16 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20
  store double %15, double* %21
  store %Array* %17, %Array** %22
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 1
  store %Array* %3, %Array** %25
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26
  %27 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %28 = load %Callable*, %Callable** %27
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__7__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  store i64 %7, i64* %12
  store %Callable* %9, %Callable** %13
  %14 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %15 = load double, double* %14
  %16 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20
  store double %15, double* %21
  store %Array* %17, %Array** %22
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 1
  store %Array* %3, %Array** %25
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26
  %27 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %28 = load %Callable*, %Callable** %27
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  ret void
}

define void @MemoryManagement__7__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__7__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__8__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 1
  store i64 %2, i64* %7
  store %Callable* %4, %Callable** %8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 0
  %11 = load double, double* %10
  %12 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16
  store double %11, double* %17
  store %Array* %13, %Array** %18
  %19 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__8__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 1
  store i64 %2, i64* %7
  store %Callable* %4, %Callable** %8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 0
  %11 = load double, double* %10
  %12 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i64 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16
  store double %11, double* %17
  store %Array* %13, %Array** %18
  %19 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__8__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  store i64 %7, i64* %12
  store %Callable* %9, %Callable** %13
  %14 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %15 = load double, double* %14
  %16 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20
  store double %15, double* %21
  store %Array* %17, %Array** %22
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 1
  store %Array* %3, %Array** %25
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26
  %27 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %28 = load %Callable*, %Callable** %27
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__8__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  store i64 %7, i64* %12
  store %Callable* %9, %Callable** %13
  %14 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %15 = load double, double* %14
  %16 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i64 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20
  store double %15, double* %21
  store %Array* %17, %Array** %22
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i64 0, i32 1
  store %Array* %3, %Array** %25
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26
  %27 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %28 = load %Callable*, %Callable** %27
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__9__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 3
  %6 = load %Callable*, %Callable** %5
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Callable* }*
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %8, i64 0, i32 0
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %8, i64 0, i32 1
  store i64 %4, i64* %9
  store %Callable* %6, %Callable** %10
  %11 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %12 = getelementptr { double, %Array* }, { double, %Array* }* %11, i64 0, i32 0
  %13 = load double, double* %12
  %14 = getelementptr { double, %Array* }, { double, %Array* }* %11, i64 0, i32 1
  %15 = load %Array*, %Array** %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 2
  %21 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 3
  store i64 %2, i64* %18
  store { i64, %Callable* }* %8, { i64, %Callable* }** %19
  store double %13, double* %20
  store %Array* %15, %Array** %21
  %22 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %16, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__9__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 3
  %6 = load %Callable*, %Callable** %5
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Callable* }*
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %8, i64 0, i32 0
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %8, i64 0, i32 1
  store i64 %4, i64* %9
  store %Callable* %6, %Callable** %10
  %11 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %12 = getelementptr { double, %Array* }, { double, %Array* }* %11, i64 0, i32 0
  %13 = load double, double* %12
  %14 = getelementptr { double, %Array* }, { double, %Array* }* %11, i64 0, i32 1
  %15 = load %Array*, %Array** %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 2
  %21 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i64 0, i32 3
  store i64 %2, i64* %18
  store { i64, %Callable* }* %8, { i64, %Callable* }** %19
  store double %13, double* %20
  store %Array* %15, %Array** %21
  %22 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %16, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__9__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 3
  %11 = load %Callable*, %Callable** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 1
  store i64 %9, i64* %14
  store %Callable* %11, %Callable** %15
  %16 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %17 = load double, double* %16
  %18 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %19 = load %Array*, %Array** %18
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, { i64, %Callable* }*, double, %Array* }*
  %22 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 3
  store i64 %7, i64* %22
  store { i64, %Callable* }* %13, { i64, %Callable* }** %23
  store double %17, double* %24
  store %Array* %19, %Array** %25
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %28 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i64 0, i32 0
  %29 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i64 0, i32 1
  store %Array* %3, %Array** %28
  store { i64, { i64, %Callable* }*, double, %Array* }* %21, { i64, { i64, %Callable* }*, double, %Array* }** %29
  %30 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 0
  %31 = load %Callable*, %Callable** %30
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %32, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %26, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %32, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__9__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array* }*, { double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 3
  %11 = load %Callable*, %Callable** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 1
  store i64 %9, i64* %14
  store %Callable* %11, %Callable** %15
  %16 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 0
  %17 = load double, double* %16
  %18 = getelementptr { double, %Array* }, { double, %Array* }* %4, i64 0, i32 1
  %19 = load %Array*, %Array** %18
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, { i64, %Callable* }*, double, %Array* }*
  %22 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i64 0, i32 3
  store i64 %7, i64* %22
  store { i64, %Callable* }* %13, { i64, %Callable* }** %23
  store double %17, double* %24
  store %Array* %19, %Array** %25
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %28 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i64 0, i32 0
  %29 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i64 0, i32 1
  store %Array* %3, %Array** %28
  store { i64, { i64, %Callable* }*, double, %Array* }* %21, { i64, { i64, %Callable* }*, double, %Array* }** %29
  %30 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i64 0, i32 0
  %31 = load %Callable*, %Callable** %30
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %32, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %32)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %26, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %32, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i64 -1)
  ret void
}

define void @MemoryManagement__8__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 3
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__8__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i64 0, i32 3
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load { %Array* }*, { %Array* }** %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load { %Array* }*, { %Array* }** %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__10__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i64 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10
  store { %Array* }* %5, { %Array* }** %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__10__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i64 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10
  store { %Array* }* %5, { %Array* }** %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__10__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i64 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6
  %8 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i64 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8
  %10 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i64 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14
  store { %Array* }* %9, { %Array* }** %15
  store %Array* %11, %Array** %16
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i64 0, i32 0
  %20 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i64 0, i32 1
  store %Array* %3, %Array** %19
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20
  %21 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i64 0, i32 0
  %22 = load %Callable*, %Callable** %21
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__10__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i64 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6
  %8 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i64 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8
  %10 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i64 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14
  store { %Array* }* %9, { %Array* }** %15
  store %Array* %11, %Array** %16
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i64 0, i32 0
  %20 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i64 0, i32 1
  store %Array* %3, %Array** %19
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20
  %21 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i64 0, i32 0
  %22 = load %Callable*, %Callable** %21
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  ret void
}

define void @MemoryManagement__9__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %4, i64 0, i32 1
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__9__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i64 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %4, i64 0, i32 1
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___dd0d143d23734036a0aad12f8847948f_BoundCA__body(%Array* %operations) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i64 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %12, %Callable** %10
  store %Array* %operations, %Array** %11
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__11, [2 x void (%Tuple*, i64)*]* @MemoryManagement__10, %Tuple* %8)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %15)
  %18 = bitcast i8* %17 to %Callable**
  %19 = load %Callable*, %Callable** %18
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %operations, i64 1)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 -1)
  ret %Callable* %13
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____body(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____adj(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__11__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr { %Array* }, { %Array* }* %3, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__11__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr { %Array* }, { %Array* }* %3, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__11__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store %Array* %4, %Array** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__11__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store %Array* %4, %Array** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @MemoryManagement__10__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__5 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %11, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i64 %count-change)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %12 = add i64 %7, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__10__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__6 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %11, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i64 %count-change)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %12 = add i64 %7, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %0
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 1)
  %2 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %3 = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %nIndex to i32
  %6 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %5)
  %nStates = fptosi fp128 %6 to i64
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %nUnitaries = load i64, i64* %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 1)
  %8 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nStates, i64 %nUnitaries)
  %9 = sub i64 %8, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %24, %exiting__1 ]
  %10 = icmp sle i64 %idxOp, %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64 }*
  %13 = getelementptr { i64 }, { i64 }* %12, i64 0, i32 0
  store i64 %idxOp, i64* %13
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %11, %Tuple* %14)
  %15 = bitcast %Tuple* %14 to { %Callable* }*
  %16 = getelementptr { %Callable* }, { %Callable* }* %15, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @Microsoft__Quantum__Canon___09cbe9f437dc45fcb110f0d985d9e3ce_ControlledOnInt__body(i64 %idxOp, %Callable* %17)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, %Array* }*
  %21 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %20, i64 0, i32 1
  %23 = load %Array*, %Array** %2
  store %Array* %23, %Array** %21
  store %Array* %target, %Array** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %17, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  %25 = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 -1)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___09cbe9f437dc45fcb110f0d985d9e3ce_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, i64, %Callable* }*
  %2 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store i64 %numberState, i64* %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__24, [2 x void (%Tuple*, i64)*]* @MemoryManagement__13, %Tuple* %0)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %0
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 1)
  %2 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %3 = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i64 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %__qsVar0__nIndex__ to i32
  %6 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %5)
  %__qsVar1__nStates__ = fptosi fp128 %6 to i64
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 1)
  %8 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %9 = sub i64 %8, 1
  %10 = sub i64 %9, 0
  %11 = udiv i64 %10, 1
  %12 = mul i64 1, %11
  %13 = add i64 0, %12
  %14 = load %Range, %Range* @EmptyRange
  %15 = insertvalue %Range %14, i64 %13, 0
  %16 = insertvalue %Range %15, i64 -1, 1
  %17 = insertvalue %Range %16, i64 0, 2
  %18 = extractvalue %Range %17, 0
  %19 = extractvalue %Range %17, 1
  %20 = extractvalue %Range %17, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %21 = icmp sgt i64 %19, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %18, %preheader__1 ], [ %39, %exiting__1 ]
  %22 = icmp sle i64 %__qsVar4__idxOp__, %20
  %23 = icmp sge i64 %__qsVar4__idxOp__, %20
  %24 = select i1 %21, i1 %22, i1 %23
  br i1 %24, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { i64 }*
  %27 = getelementptr { i64 }, { i64 }* %26, i64 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %27
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { %Callable* }*
  %30 = getelementptr { %Callable* }, { %Callable* }* %29, i64 0, i32 0
  %31 = load %Callable*, %Callable** %30
  %32 = call %Callable* @Microsoft__Quantum__Canon___09cbe9f437dc45fcb110f0d985d9e3ce_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %31)
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %35 = bitcast %Tuple* %34 to { %Array*, %Array* }*
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 0
  %37 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 1
  %38 = load %Array*, %Array** %2
  store %Array* %38, %Array** %36
  store %Array* %target, %Array** %37
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %34, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %31, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %32, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %39 = add i64 %__qsVar4__idxOp__, %19
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  %40 = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  %4 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4
  %5 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  %8 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %9 = trunc i64 %nIndex to i32
  %10 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %9)
  %nStates = fptosi fp128 %10 to i64
  %11 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %nUnitaries = load i64, i64* %11
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 1)
  %12 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nStates, i64 %nUnitaries)
  %13 = sub i64 %12, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %33, %exiting__1 ]
  %14 = icmp sle i64 %idxOp, %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { i64 }*
  %17 = getelementptr { i64 }, { i64 }* %16, i64 0, i32 0
  store i64 %idxOp, i64* %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %15, %Tuple* %18)
  %19 = bitcast %Tuple* %18 to { %Callable* }*
  %20 = getelementptr { %Callable* }, { %Callable* }* %19, i64 0, i32 0
  %21 = load %Callable*, %Callable** %20
  %22 = call %Callable* @Microsoft__Quantum__Canon___09cbe9f437dc45fcb110f0d985d9e3ce_ControlledOnInt__body(i64 %idxOp, %Callable* %21)
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { %Array*, %Array* }* }*
  %26 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %25, i64 0, i32 1
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %29 = bitcast %Tuple* %28 to { %Array*, %Array* }*
  %30 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %29, i64 0, i32 0
  %31 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %29, i64 0, i32 1
  %32 = load %Array*, %Array** %5
  store %Array* %32, %Array** %30
  store %Array* %target, %Array** %31
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %26
  store { %Array*, %Array* }* %29, { %Array*, %Array* }** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %22, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  %34 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unitaryFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i64 -1)
  ret void
}

declare void @__quantum__rt__callable_make_controlled(%Callable*)

define void @Microsoft__Quantum__Canon___cc56b6c9b86649fc9f804dbc19820630_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  %4 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4
  %5 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  %8 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %9 = trunc i64 %__qsVar0__nIndex__ to i32
  %10 = call fp128 @llvm.powi.f128(fp128 0xL00000000000000004000000000000000, i32 %9)
  %__qsVar1__nStates__ = fptosi fp128 %10 to i64
  %11 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %11
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 1)
  %12 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %13 = sub i64 %12, 1
  %14 = sub i64 %13, 0
  %15 = udiv i64 %14, 1
  %16 = mul i64 1, %15
  %17 = add i64 0, %16
  %18 = load %Range, %Range* @EmptyRange
  %19 = insertvalue %Range %18, i64 %17, 0
  %20 = insertvalue %Range %19, i64 -1, 1
  %21 = insertvalue %Range %20, i64 0, 2
  %22 = extractvalue %Range %21, 0
  %23 = extractvalue %Range %21, 1
  %24 = extractvalue %Range %21, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %25 = icmp sgt i64 %23, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %22, %preheader__1 ], [ %47, %exiting__1 ]
  %26 = icmp sle i64 %__qsVar4__idxOp__, %24
  %27 = icmp sge i64 %__qsVar4__idxOp__, %24
  %28 = select i1 %25, i1 %26, i1 %27
  br i1 %28, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64 }*
  %31 = getelementptr { i64 }, { i64 }* %30, i64 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %31
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %29, %Tuple* %32)
  %33 = bitcast %Tuple* %32 to { %Callable* }*
  %34 = getelementptr { %Callable* }, { %Callable* }* %33, i64 0, i32 0
  %35 = load %Callable*, %Callable** %34
  %36 = call %Callable* @Microsoft__Quantum__Canon___09cbe9f437dc45fcb110f0d985d9e3ce_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %35)
  %37 = call %Callable* @__quantum__rt__callable_copy(%Callable* %36, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %37, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %37)
  call void @__quantum__rt__callable_make_controlled(%Callable* %37)
  %38 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %39 = bitcast %Tuple* %38 to { %Array*, { %Array*, %Array* }* }*
  %40 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %39, i64 0, i32 0
  %41 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %39, i64 0, i32 1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %43 = bitcast %Tuple* %42 to { %Array*, %Array* }*
  %44 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %43, i64 0, i32 0
  %45 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %43, i64 0, i32 1
  %46 = load %Array*, %Array** %5
  store %Array* %46, %Array** %44
  store %Array* %target, %Array** %45
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %40
  store { %Array*, %Array* }* %43, { %Array*, %Array* }** %41
  call void @__quantum__rt__callable_invoke(%Callable* %37, %Tuple* %38, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %35, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %37, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %37, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %38, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %47 = add i64 %__qsVar4__idxOp__, %23
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  %48 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__unitaryFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i64 -1)
  ret void
}

define %Range @Microsoft__Quantum__Arrays___da06c620e9e94ef198c11b5ef3335ba1_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Range %5
}

declare void @__quantum__qis__x__body(%Qubit*)

declare void @__quantum__qis__y__body(%Qubit*)

declare void @__quantum__qis__y__ctl(%Array*, %Qubit*)

declare void @__quantum__qis__z__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = load i2, i2* @PauliZ
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 0
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 1
  %9 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 2
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 3
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %11, %Callable** %7
  store double %tolerance, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %control, { %Array* }** %10
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__12, [2 x void (%Tuple*, i64)*]* @MemoryManagement__11, %Tuple* %5)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Qubit* }*
  %14 = getelementptr { %Qubit* }, { %Qubit* }* %13, i64 0, i32 0
  store %Qubit* %target, %Qubit** %14
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %15 = load i2, i2* @PauliX
  %16 = icmp eq i2 %pauli, %15
  br i1 %16, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 0
  %20 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 1
  %21 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 2
  %22 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 3
  %23 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 4
  %24 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %25 = load i2, i2* @PauliZ
  store %Callable* %24, %Callable** %19
  store double %tolerance, double* %20
  store %Array* %coefficients, %Array** %21
  store i2 %25, i2* %22
  store { %Array* }* %control, { %Array* }** %23
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__13, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %17)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__1, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i64 1)
  %26 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__body(%Callable* %26, %Callable* %op__1, %Qubit* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %27 = load i2, i2* @PauliY
  %28 = icmp eq i2 %pauli, %27
  br i1 %28, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %31 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 0
  %32 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 1
  %33 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 2
  %34 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 3
  %35 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 4
  %36 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %37 = load i2, i2* @PauliX
  store %Callable* %36, %Callable** %31
  store double %tolerance, double* %32
  store %Array* %coefficients, %Array** %33
  store i2 %37, i2* %34
  store { %Array* }* %control, { %Array* }** %35
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__14, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %29)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i64 1)
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %38)
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__body(%Callable* %38, %Callable* %op__2, %Qubit* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %38, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i64 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %39 = load i2, i2* @PauliI
  %40 = icmp eq i2 %pauli, %39
  br i1 %40, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %41 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @44, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %43 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %42)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i64 -1)
  %44 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @45, i32 0, i32 0))
  %45 = call %String* @__quantum__rt__string_concatenate(%String* %43, %String* %44)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__fail(%String* %45)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = load double, double* %1
  %6 = load %Array*, %Array** %2
  %7 = load { %Array* }*, { %Array* }** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = load double, double* %1
  %6 = load %Array*, %Array** %2
  %7 = load { %Array* }*, { %Array* }** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Lifted__PartialApplication__12__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__12__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__12__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__12__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @MemoryManagement__11__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = getelementptr { %Array* }, { %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__11__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = getelementptr { %Array* }, { %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Array* }*, { %Array* }** %4
  %10 = load %Qubit*, %Qubit** %5
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Array* }*, { %Array* }** %4
  %10 = load %Qubit*, %Qubit** %5
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Lifted__PartialApplication__13__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__13__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__13__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__13__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @MemoryManagement__12__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = getelementptr { %Array* }, { %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i64 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__12__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = getelementptr { %Array* }, { %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i64 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Qubit* }*
  %2 = getelementptr { %Qubit* }, { %Qubit* }* %1, i64 0, i32 0
  store %Qubit* %target, %Qubit** %2
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit* }*
  %5 = getelementptr { %Qubit* }, { %Qubit* }* %4, i64 0, i32 0
  store %Qubit* %target, %Qubit** %5
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %3, %Tuple* null)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Qubit* }*
  %9 = getelementptr { %Qubit* }, { %Qubit* }* %8, i64 0, i32 0
  store %Qubit* %target, %Qubit** %9
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define void @Lifted__PartialApplication__14__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__14__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__14__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__14__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 1)
  %2 = call i1 @Microsoft__Quantum__Arrays___5e87af5d2e1646488c14c0a7235ec414_IsEmpty__body(%Array* %qubits__1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @52, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %5 = trunc i64 %4 to i32
  %6 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %5)
  %7 = fptosi fp128 %6 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %7, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 1)
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 1)
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 1)
  %11 = sub i64 %4, 2
  %12 = load %Range, %Range* @EmptyRange
  %13 = insertvalue %Range %12, i64 0, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %11, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__1, %Range %15, i1 false)
  %17 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %16)
  %18 = sub i64 %4, 1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 %18)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = load %Qubit*, %Qubit** %20
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %17, %Qubit* %21)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %23 = icmp eq i64 %22, 2
  br i1 %23, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %25 = bitcast i8* %24 to double*
  %26 = load double, double* %25
  %27 = call double @Microsoft__Quantum__Math__AbsD__body(double %26)
  %28 = fcmp ogt double %27, %tolerance
  br i1 %28, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %30 = bitcast i8* %29 to i2*
  %31 = load i2, i2* @PauliI
  store i2 %31, i2* %30
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %33 = bitcast i8* %32 to double*
  %34 = load double, double* %33
  %theta = fmul double 1.000000e+00, %34
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %35 = call %Array* @Microsoft__Quantum__Arrays___b7fe6ba99ae747cfa62f35977884cbff_Most__body(%Array* %qubits__1)
  %36 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %35)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients0, { %Array* }* %36)
  %37 = getelementptr { %Array* }, { %Array* }* %36, i64 0, i32 0
  %38 = load %Array*, %Array** %37
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i64 -1)
  %39 = bitcast { %Array* }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %40 = getelementptr { %Array* }, { %Array* }* %17, i64 0, i32 0
  %41 = load %Array*, %Array** %40
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i64 -1)
  %42 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  %43 = bitcast { %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i64 -1)
  ret void
}

declare %String* @__quantum__rt__pauli_to_string(i2)

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = load i2, i2* @PauliZ
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 0
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 1
  %9 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 2
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 3
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %11, %Callable** %7
  store double %tolerance, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %control, { %Array* }** %10
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__15, [2 x void (%Tuple*, i64)*]* @MemoryManagement__11, %Tuple* %5)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 1)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr { %Qubit* }, { %Qubit* }* %14, i64 0, i32 0
  store %Qubit* %target, %Qubit** %15
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %16 = load i2, i2* @PauliX
  %17 = icmp eq i2 %pauli, %16
  br i1 %17, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %20 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 1
  %22 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 2
  %23 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 3
  %24 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 4
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %26 = load i2, i2* @PauliZ
  store %Callable* %25, %Callable** %20
  store double %tolerance, double* %21
  store %Array* %coefficients, %Array** %22
  store i2 %26, i2* %23
  store { %Array* }* %control, { %Array* }** %24
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__16, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %18)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar1__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i64 1)
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__adj(%Callable* %27, %Callable* %__qsVar1__op__, %Qubit* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %28 = load i2, i2* @PauliY
  %29 = icmp eq i2 %pauli, %28
  br i1 %29, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %32 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 0
  %33 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 1
  %34 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 2
  %35 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 3
  %36 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 4
  %37 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %38 = load i2, i2* @PauliX
  store %Callable* %37, %Callable** %32
  store double %tolerance, double* %33
  store %Array* %coefficients, %Array** %34
  store i2 %38, i2* %35
  store { %Array* }* %control, { %Array* }** %36
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__17, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %30)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar2__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i64 1)
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %39)
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__adj(%Callable* %39, %Callable* %__qsVar2__op__, %Qubit* %target)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %39, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %39, i64 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %40 = load i2, i2* @PauliI
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %42 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @46, i32 0, i32 0))
  %43 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i64 -1)
  %45 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @47, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__15__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__15__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__15__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__15__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__16__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__16__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__16__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__16__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %0, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Qubit* }*
  %3 = getelementptr { %Qubit* }, { %Qubit* }* %2, i64 0, i32 0
  store %Qubit* %target, %Qubit** %3
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr { %Qubit* }, { %Qubit* }* %6, i64 0, i32 0
  store %Qubit* %target, %Qubit** %7
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Qubit* }*
  %11 = getelementptr { %Qubit* }, { %Qubit* }* %10, i64 0, i32 0
  store %Qubit* %target, %Qubit** %11
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %0, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__17__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__17__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__17__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__17__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 1)
  %2 = call i1 @Microsoft__Quantum__Arrays___5e87af5d2e1646488c14c0a7235ec414_IsEmpty__body(%Array* %qubits__1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @53, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %5 = trunc i64 %4 to i32
  %6 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %5)
  %7 = fptosi fp128 %6 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %7, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 1)
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 1)
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %12 = icmp eq i64 %11, 2
  br i1 %12, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %14 = bitcast i8* %13 to double*
  %15 = load double, double* %14
  %16 = call double @Microsoft__Quantum__Math__AbsD__body(double %15)
  %17 = fcmp ogt double %16, %tolerance
  br i1 %17, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %19 = bitcast i8* %18 to i2*
  %20 = load i2, i2* @PauliI
  store i2 %20, i2* %19
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22
  %theta = fmul double 1.000000e+00, %23
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits__1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %24 = call %Array* @Microsoft__Quantum__Arrays___b7fe6ba99ae747cfa62f35977884cbff_Most__body(%Array* %qubits__1)
  %25 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %24)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %25)
  %26 = getelementptr { %Array* }, { %Array* }* %25, i64 0, i32 0
  %27 = load %Array*, %Array** %26
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i64 -1)
  %28 = bitcast { %Array* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %29 = sub i64 %4, 2
  %30 = load %Range, %Range* @EmptyRange
  %31 = insertvalue %Range %30, i64 0, 0
  %32 = insertvalue %Range %31, i64 1, 1
  %33 = insertvalue %Range %32, i64 %29, 2
  %34 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__1, %Range %33, i1 false)
  %35 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %34)
  %36 = sub i64 %4, 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 %36)
  %38 = bitcast i8* %37 to %Qubit**
  %39 = load %Qubit*, %Qubit** %38
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %35, %Qubit* %39)
  %40 = getelementptr { %Array* }, { %Array* }* %35, i64 0, i32 0
  %41 = load %Array*, %Array** %40
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  %42 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  %43 = bitcast { %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %pauli = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4
  %5 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  %8 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %target = load %Qubit*, %Qubit** %8
  %9 = load i2, i2* @PauliZ
  %10 = icmp eq i2 %pauli, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 0
  %14 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 1
  %15 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 2
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 3
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %17, %Callable** %13
  store double %tolerance, double* %14
  store %Array* %coefficients, %Array** %15
  store { %Array* }* %control, { %Array* }** %16
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__18, [2 x void (%Tuple*, i64)*]* @MemoryManagement__11, %Tuple* %11)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, %Qubit* }*
  %21 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %21
  store %Qubit* %target, %Qubit** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %23 = load i2, i2* @PauliX
  %24 = icmp eq i2 %pauli, %23
  br i1 %24, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %27 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 0
  %28 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 1
  %29 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 2
  %30 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 3
  %31 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 4
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %33 = load i2, i2* @PauliZ
  store %Callable* %32, %Callable** %27
  store double %tolerance, double* %28
  store %Array* %coefficients, %Array** %29
  store i2 %33, i2* %30
  store { %Array* }* %control, { %Array* }** %31
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__19, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %25)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__1, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i64 1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %35 = bitcast %Tuple* %34 to { %Callable*, %Callable*, %Qubit* }*
  %36 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 0
  %37 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 1
  %38 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 2
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %39, %Callable** %36
  store %Callable* %op__1, %Callable** %37
  store %Qubit* %target, %Qubit** %38
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %35)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %39, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %39, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op__1, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %40 = load i2, i2* @PauliY
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %44 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 0
  %45 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 1
  %46 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 2
  %47 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 3
  %48 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 4
  %49 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %50 = load i2, i2* @PauliX
  store %Callable* %49, %Callable** %44
  store double %tolerance, double* %45
  store %Array* %coefficients, %Array** %46
  store i2 %50, i2* %47
  store { %Array* }* %control, { %Array* }** %48
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__20, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %42)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i64 1)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %52 = bitcast %Tuple* %51 to { %Callable*, %Callable*, %Qubit* }*
  %53 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 0
  %54 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 1
  %55 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 2
  %56 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  store %Callable* %56, %Callable** %53
  store %Callable* %op__2, %Callable** %54
  store %Qubit* %target, %Qubit** %55
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %52)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %56, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %56, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op__2, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i64 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %57 = load i2, i2* @PauliI
  %58 = icmp eq i2 %pauli, %57
  br i1 %58, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { double, %Array*, { %Array* }* }*
  %61 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 0
  %62 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 1
  %63 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 2
  store double %tolerance, double* %61
  store %Array* %coefficients, %Array** %62
  store { %Array* }* %control, { %Array* }** %63
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %60)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i64 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %64 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @48, i32 0, i32 0))
  %65 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %66 = call %String* @__quantum__rt__string_concatenate(%String* %64, %String* %65)
  call void @__quantum__rt__string_update_reference_count(%String* %64, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %65, i64 -1)
  %67 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @49, i32 0, i32 0))
  %68 = call %String* @__quantum__rt__string_concatenate(%String* %66, %String* %67)
  call void @__quantum__rt__string_update_reference_count(%String* %66, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %67, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__fail(%String* %68)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__18__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__18__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__18__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__18__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__19__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__19__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__19__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__19__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %1 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 1)
  %2 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 1)
  %3 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 2
  %target = load %Qubit*, %Qubit** %3
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit* }*
  %6 = getelementptr { %Qubit* }, { %Qubit* }* %5, i64 0, i32 0
  store %Qubit* %target, %Qubit** %6
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %4, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i64 0, i32 1
  store %Array* %controlRegister, %Array** %10
  store %Qubit* %target, %Qubit** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr { %Qubit* }, { %Qubit* }* %14, i64 0, i32 0
  store %Qubit* %target, %Qubit** %15
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__20__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__20__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__20__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__20__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__1 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call i1 @Microsoft__Quantum__Arrays___5e87af5d2e1646488c14c0a7235ec414_IsEmpty__body(%Array* %qubits__1)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @54, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %9 = trunc i64 %8 to i32
  %10 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %9)
  %11 = fptosi fp128 %10 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %11, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 1)
  %12 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %13
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 1)
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %14
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }*, %Qubit* }*
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %16, i64 0, i32 0
  %18 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %16, i64 0, i32 1
  %19 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %16, i64 0, i32 2
  %20 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %16, i64 0, i32 3
  %21 = sub i64 %8, 2
  %22 = load %Range, %Range* @EmptyRange
  %23 = insertvalue %Range %22, i64 0, 0
  %24 = insertvalue %Range %23, i64 1, 1
  %25 = insertvalue %Range %24, i64 %21, 2
  %26 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__1, %Range %25, i1 false)
  %27 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %26)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i64 -1)
  %28 = sub i64 %8, 1
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 %28)
  %30 = bitcast i8* %29 to %Qubit**
  %31 = load %Qubit*, %Qubit** %30
  store double %tolerance, double* %17
  store %Array* %coefficients1, %Array** %18
  store { %Array* }* %27, { %Array* }** %19
  store %Qubit* %31, %Qubit** %20
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %16)
  %32 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %33 = icmp eq i64 %32, 2
  br i1 %33, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %35 = bitcast i8* %34 to double*
  %36 = load double, double* %35
  %37 = call double @Microsoft__Quantum__Math__AbsD__body(double %36)
  %38 = fcmp ogt double %37, %tolerance
  br i1 %38, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliI
  store i2 %41, i2* %40
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %43 = bitcast i8* %42 to double*
  %44 = load double, double* %43
  %theta = fmul double 1.000000e+00, %44
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { %Array*, double, %Array* }*
  %47 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %46, i64 0, i32 0
  %48 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %46, i64 0, i32 1
  %49 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %46, i64 0, i32 2
  store %Array* %paulis, %Array** %47
  store double %theta, double* %48
  store %Array* %qubits__1, %Array** %49
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %46)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %50 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %51 = bitcast %Tuple* %50 to { double, %Array*, { %Array* }* }*
  %52 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %51, i64 0, i32 0
  %53 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %51, i64 0, i32 1
  %54 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %51, i64 0, i32 2
  %55 = call %Array* @Microsoft__Quantum__Arrays___b7fe6ba99ae747cfa62f35977884cbff_Most__body(%Array* %qubits__1)
  %56 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %55)
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i64 -1)
  store double %tolerance, double* %52
  store %Array* %coefficients0, %Array** %53
  store { %Array* }* %56, { %Array* }** %54
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %51)
  %57 = getelementptr { %Array* }, { %Array* }* %56, i64 0, i32 0
  %58 = load %Array*, %Array** %57
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i64 -1)
  %59 = bitcast { %Array* }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %60 = getelementptr { %Array* }, { %Array* }* %27, i64 0, i32 0
  %61 = load %Array*, %Array** %60
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i64 -1)
  %62 = bitcast { %Array*, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i64 -1)
  %63 = bitcast { %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %63, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %pauli = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4
  %5 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  %8 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %target = load %Qubit*, %Qubit** %8
  %9 = load i2, i2* @PauliZ
  %10 = icmp eq i2 %pauli, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 0
  %14 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 1
  %15 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 2
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 3
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %17, %Callable** %13
  store double %tolerance, double* %14
  store %Array* %coefficients, %Array** %15
  store { %Array* }* %control, { %Array* }** %16
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__21, [2 x void (%Tuple*, i64)*]* @MemoryManagement__11, %Tuple* %11)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 1)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, %Qubit* }*
  %21 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %21
  store %Qubit* %target, %Qubit** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %23 = load i2, i2* @PauliX
  %24 = icmp eq i2 %pauli, %23
  br i1 %24, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %27 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 0
  %28 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 1
  %29 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 2
  %30 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 3
  %31 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 4
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %33 = load i2, i2* @PauliZ
  store %Callable* %32, %Callable** %27
  store double %tolerance, double* %28
  store %Array* %coefficients, %Array** %29
  store i2 %33, i2* %30
  store { %Array* }* %control, { %Array* }** %31
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__22, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %25)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar1__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i64 1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %35 = bitcast %Tuple* %34 to { %Callable*, %Callable*, %Qubit* }*
  %36 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 0
  %37 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 1
  %38 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 2
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %39, %Callable** %36
  store %Callable* %__qsVar1__op__, %Callable** %37
  store %Qubit* %target, %Qubit** %38
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %35)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %39, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %39, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %40 = load i2, i2* @PauliY
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %44 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 0
  %45 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 1
  %46 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 2
  %47 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 3
  %48 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 4
  %49 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %50 = load i2, i2* @PauliX
  store %Callable* %49, %Callable** %44
  store double %tolerance, double* %45
  store %Array* %coefficients, %Array** %46
  store i2 %50, i2* %47
  store { %Array* }* %control, { %Array* }** %48
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__23, [2 x void (%Tuple*, i64)*]* @MemoryManagement__12, %Tuple* %42)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar2__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i64 1)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %52 = bitcast %Tuple* %51 to { %Callable*, %Callable*, %Qubit* }*
  %53 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 0
  %54 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 1
  %55 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 2
  %56 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  store %Callable* %56, %Callable** %53
  store %Callable* %__qsVar2__op__, %Callable** %54
  store %Qubit* %target, %Qubit** %55
  call void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %52)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %56, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %56, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i64 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %57 = load i2, i2* @PauliI
  %58 = icmp eq i2 %pauli, %57
  br i1 %58, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { double, %Array*, { %Array* }* }*
  %61 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 0
  %62 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 1
  %63 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 2
  store double %tolerance, double* %61
  store %Array* %coefficients, %Array** %62
  store { %Array* }* %control, { %Array* }** %63
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %60)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i64 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %64 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @50, i32 0, i32 0))
  %65 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %66 = call %String* @__quantum__rt__string_concatenate(%String* %64, %String* %65)
  call void @__quantum__rt__string_update_reference_count(%String* %64, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %65, i64 -1)
  %67 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @51, i32 0, i32 0))
  %68 = call %String* @__quantum__rt__string_concatenate(%String* %66, %String* %67)
  call void @__quantum__rt__string_update_reference_count(%String* %66, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %67, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__fail(%String* %68)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__21__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__21__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr { %Qubit* }, { %Qubit* }* %7, i64 0, i32 0
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i64 0, i32 3
  store double %2, double* %12
  store %Array* %4, %Array** %13
  store { %Array* }* %6, { %Array* }** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__21__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__21__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  store double %7, double* %14
  store %Array* %9, %Array** %15
  store { %Array* }* %11, { %Array* }** %16
  store %Qubit* %4, %Qubit** %17
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i64 0, i32 1
  store %Array* %3, %Array** %20
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21
  %22 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %24, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__22__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__22__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__22__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__22__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___cba08966bf7645c897fab3499468a9ae_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %1 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 1)
  %2 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 1)
  %3 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 2
  %target = load %Qubit*, %Qubit** %3
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr { %Qubit* }, { %Qubit* }* %6, i64 0, i32 0
  store %Qubit* %target, %Qubit** %7
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i64 0, i32 0
  %12 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i64 0, i32 1
  store %Array* %controlRegister, %Array** %11
  store %Qubit* %target, %Qubit** %12
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Qubit* }*
  %16 = getelementptr { %Qubit* }, { %Qubit* }* %15, i64 0, i32 0
  store %Qubit* %target, %Qubit** %16
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__23__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__23__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr { %Qubit* }, { %Qubit* }* %9, i64 0, i32 0
  %11 = load %Qubit*, %Qubit** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 1
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 2
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 3
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i64 0, i32 4
  store double %2, double* %14
  store %Array* %4, %Array** %15
  store i2 %6, i2* %16
  store { %Array* }* %8, { %Array* }** %17
  store %Qubit* %11, %Qubit** %18
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__23__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__23__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  %20 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i64 0, i32 4
  store double %7, double* %16
  store %Array* %9, %Array** %17
  store i2 %11, i2* %18
  store { %Array* }* %13, { %Array* }** %19
  store %Qubit* %4, %Qubit** %20
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i64 0, i32 1
  store %Array* %3, %Array** %23
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__1 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call i1 @Microsoft__Quantum__Arrays___5e87af5d2e1646488c14c0a7235ec414_IsEmpty__body(%Array* %qubits__1)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @55, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__1)
  %9 = trunc i64 %8 to i32
  %10 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %9)
  %11 = fptosi fp128 %10 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___1fbae1df9a0a4b52878946b0ba446237_Padded__body(i64 %11, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 1)
  %12 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef2__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %13
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 1)
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %14
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 1)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %16 = icmp eq i64 %15, 2
  br i1 %16, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %18 = bitcast i8* %17 to double*
  %19 = load double, double* %18
  %20 = call double @Microsoft__Quantum__Math__AbsD__body(double %19)
  %21 = fcmp ogt double %20, %tolerance
  br i1 %21, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %23 = bitcast i8* %22 to i2*
  %24 = load i2, i2* @PauliI
  store i2 %24, i2* %23
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26
  %theta = fmul double 1.000000e+00, %27
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Array*, double, %Array* }*
  %30 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %29, i64 0, i32 0
  %31 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %29, i64 0, i32 1
  %32 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %29, i64 0, i32 2
  store %Array* %paulis, %Array** %30
  store double %theta, double* %31
  store %Array* %qubits__1, %Array** %32
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %29)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i64 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %33 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %34 = bitcast %Tuple* %33 to { double, %Array*, { %Array* }* }*
  %35 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %34, i64 0, i32 0
  %36 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %34, i64 0, i32 1
  %37 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %34, i64 0, i32 2
  %38 = call %Array* @Microsoft__Quantum__Arrays___b7fe6ba99ae747cfa62f35977884cbff_Most__body(%Array* %qubits__1)
  %39 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %38)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i64 -1)
  store double %tolerance, double* %35
  store %Array* %__qsVar1__coefficients0__, %Array** %36
  store { %Array* }* %39, { %Array* }** %37
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %34)
  %40 = getelementptr { %Array* }, { %Array* }* %39, i64 0, i32 0
  %41 = load %Array*, %Array** %40
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  %42 = bitcast { %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i64 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { double, %Array*, { %Array* }*, %Qubit* }*
  %45 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %44, i64 0, i32 0
  %46 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %44, i64 0, i32 1
  %47 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %44, i64 0, i32 2
  %48 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %44, i64 0, i32 3
  %49 = sub i64 %8, 2
  %50 = load %Range, %Range* @EmptyRange
  %51 = insertvalue %Range %50, i64 0, 0
  %52 = insertvalue %Range %51, i64 1, 1
  %53 = insertvalue %Range %52, i64 %49, 2
  %54 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__1, %Range %53, i1 false)
  %55 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i64 -1)
  %56 = sub i64 %8, 1
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__1, i64 %56)
  %58 = bitcast i8* %57 to %Qubit**
  %59 = load %Qubit*, %Qubit** %58
  store double %tolerance, double* %45
  store %Array* %__qsVar2__coefficients1__, %Array** %46
  store { %Array* }* %55, { %Array* }** %47
  store %Qubit* %59, %Qubit** %48
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %44)
  %60 = getelementptr { %Array* }, { %Array* }* %55, i64 0, i32 0
  %61 = load %Array*, %Array** %60
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits__1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i64 -1)
  %62 = bitcast { %Array*, %Array* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i64 -1)
  %63 = bitcast { %Array* }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %63, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i64 -1)
  ret void
}

define %Range @Microsoft__Quantum__Arrays___1eff936b82334703a21e7bb7caee5b0a_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Range %5
}

define i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rng) {
entry:
  %0 = extractvalue %Range %rng, 0
  %1 = extractvalue %Range %rng, 1
  %2 = extractvalue %Range %rng, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %3 = icmp sgt i64 %1, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %0, %preheader__1 ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %idx, %2
  %5 = icmp sge i64 %idx, %2
  %6 = select i1 %3, i1 %4, i1 %5
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  ret i1 false

exiting__1:                                       ; No predecessors!
  %7 = add i64 %idx, %1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret i1 true
}

define i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceCP____body(double %tolerance, %Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %coefficient = load { double, double }*, { double, double }** %13
  %14 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  %15 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %coefficient)
  %16 = fcmp ogt double %15, %tolerance
  br i1 %16, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  %17 = sub i64 %0, 1
  br label %header__3

continue__1:                                      ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %18 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__3 ]
  %21 = icmp sle i64 %20, %17
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  ret i1 true

header__4:                                        ; preds = %exiting__4, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %33, %exiting__4 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %27)
  %30 = bitcast i8* %29 to { double, double }**
  %31 = load { double, double }*, { double, double }** %30
  %32 = bitcast { double, double }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %33 = add i64 %27, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  ret i1 false
}

define i1 @Microsoft__Quantum__Arrays___5e87af5d2e1646488c14c0a7235ec414_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret i1 %1
}

define %Array* @Microsoft__Quantum__Arrays___b7fe6ba99ae747cfa62f35977884cbff_Most__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 2
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  %6 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %5, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Array* %6
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @56, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 1)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %controlSubregister)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Qubit* }*
  %13 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 1
  store %Array* %controlSubregister, %Array** %13
  store %Qubit* %targetRegister, %Qubit** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @57, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 1)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Qubit* }*
  %13 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %13
  store %Qubit* %targetRegister, %Qubit** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @58, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 1)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %controlSubregister)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 1
  store %Array* %controlSubregister, %Array** %22
  store %Qubit* %targetRegister, %Qubit** %23
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 1)
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Qubit* }* %21, { %Array*, %Qubit* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @59, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 1)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %22
  store %Qubit* %targetRegister, %Qubit** %23
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 1)
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Qubit* }* %21, { %Array*, %Qubit* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @60, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 1)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %controlSubregister)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  store %Array* %controlSubregister, %Array** %13
  store %Array* %targetRegister, %Array** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @61, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 1)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %13
  store %Array* %targetRegister, %Array** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @62, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 1)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %controlSubregister)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  store %Array* %controlSubregister, %Array** %22
  store %Array* %targetRegister, %Array** %23
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 1)
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Array* }* %21, { %Array*, %Array* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @63, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 1)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  store %Array* %__qsVar0__controlSubregister__, %Array** %22
  store %Array* %targetRegister, %Array** %23
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 1)
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Array* }* %21, { %Array*, %Array* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____body(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %8 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %9 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %9)
  %12 = bitcast i8* %11 to %Callable**
  %op = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr { %Array* }, { %Array* }* %14, i64 0, i32 0
  store %Array* %target, %Array** %15
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %9, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %17 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %18 = phi i64 [ 0, %exit__2 ], [ %23, %exiting__3 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %22 = load %Callable*, %Callable** %21
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %22, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %23 = add i64 %18, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____adj(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange
  %10 = insertvalue %Range %9, i64 %8, 0
  %11 = insertvalue %Range %10, i64 -1, 1
  %12 = insertvalue %Range %11, i64 0, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %12, i1 false)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %15 = sub i64 %14, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 1)
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %20, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %20)
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array* }*
  %23 = getelementptr { %Array* }, { %Array* }* %22, i64 0, i32 0
  store %Array* %target, %Array** %23
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %21, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %20, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %25 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %26 = phi i64 [ 0, %exit__2 ], [ %31, %exiting__3 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %26)
  %29 = bitcast i8* %28 to %Callable**
  %30 = load %Callable*, %Callable** %29
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %30, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %30, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %26, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  %32 = sub i64 %14, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %38, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %33)
  %36 = bitcast i8* %35 to %Callable**
  %37 = load %Callable*, %Callable** %36
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %37, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %37, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %38 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %operations = load %Array*, %Array** %1
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 1)
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %11 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %12)
  %15 = bitcast i8* %14 to %Callable**
  %op = load %Callable*, %Callable** %15
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %16 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %16, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %16)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %18 = bitcast %Tuple* %17 to { %Array*, %Array* }*
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %18, i64 0, i32 0
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %18, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %19
  store %Array* %target, %Array** %20
  call void @__quantum__rt__callable_invoke(%Callable* %16, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %16, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  %22 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %23)
  %26 = bitcast i8* %25 to %Callable**
  %27 = load %Callable*, %Callable** %26
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %27, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___6113c61f5c7242caac273d92937b558c___QsRef2__ApplyBoundCA____ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %operations = load %Array*, %Array** %1
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 1)
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %11 = sub i64 %2, 1
  %12 = load %Range, %Range* @EmptyRange
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 -1, 1
  %15 = insertvalue %Range %14, i64 0, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %15, i1 false)
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %16)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 %19)
  %22 = bitcast i8* %21 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %22
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 1)
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, %Array* }*
  %26 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %25, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %26
  store %Array* %target, %Array** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  %29 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %30 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %30)
  %33 = bitcast i8* %32 to %Callable**
  %34 = load %Callable*, %Callable** %33
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %34, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %34, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %30, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  %36 = sub i64 %17, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %42, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 %37)
  %40 = bitcast i8* %39 to %Callable**
  %41 = load %Callable*, %Callable** %40
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %41, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef2__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 0
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 1
  store i64 %nSteps, i64* %8
  store %Callable* %op, %Callable** %9
  %10 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 1
  store i64 %nSteps, i64* %14
  store %Callable* %op, %Callable** %15
  %16 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 0
  %21 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 1
  store i64 %nSteps, i64* %20
  store %Callable* %op, %Callable** %21
  %22 = fmul double %stepSizeInner, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 0
  %27 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 1
  store i64 %nSteps, i64* %26
  store %Callable* %op, %Callable** %27
  %28 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 0
  %33 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 1
  store i64 %nSteps, i64* %32
  store %Callable* %op, %Callable** %33
  %34 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____body(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 0
  %39 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 1
  store i64 %nSteps, i64* %38
  store %Callable* %op, %Callable** %39
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____body({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i64 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 0
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 1
  store i64 %nSteps, i64* %42
  store %Callable* %op, %Callable** %43
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____body({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define double @Microsoft__Quantum__Canon____QsRef2__TrotterStepSize____body(i64 %order) {
entry:
  %0 = sitofp i64 %order to double
  %1 = fsub double %0, 1.000000e+00
  %2 = fdiv double 1.000000e+00, %1
  %3 = call double @Microsoft__Quantum__Math__PowD__body(double 4.000000e+00, double %2)
  %4 = fsub double 4.000000e+00, %3
  %5 = fdiv double 1.000000e+00, %4
  ret double %5
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, double, %Array* }*
  %7 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %6, i64 0, i32 1
  %9 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %6, i64 0, i32 2
  %10 = fmul double %stepSize, 5.000000e-01
  store i64 %idx, i64* %7
  store double %10, double* %8
  store %Array* %target, %Array** %9
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %12 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx__1 = phi i64 [ %12, %preheader__1 ], [ %22, %exiting__2 ]
  %13 = icmp sle i64 %idx__1, 0
  %14 = icmp sge i64 %idx__1, 0
  %15 = select i1 false, i1 %13, i1 %14
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, double, %Array* }*
  %18 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 2
  %21 = fmul double %stepSize, 5.000000e-01
  store i64 %idx__1, i64* %18
  store double %21, double* %19
  store %Array* %target, %Array** %20
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %idx__1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, double, %Array* }*
  %7 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %6, i64 0, i32 0
  %8 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %6, i64 0, i32 1
  %9 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %6, i64 0, i32 2
  store i64 %idx, i64* %7
  store double %stepSize, double* %8
  store %Array* %target, %Array** %9
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef2__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 0
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 1
  store i64 %nSteps, i64* %8
  store %Callable* %op, %Callable** %9
  %10 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 1
  store i64 %nSteps, i64* %14
  store %Callable* %op, %Callable** %15
  %16 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 0
  %21 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 1
  store i64 %nSteps, i64* %20
  store %Callable* %op, %Callable** %21
  %22 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 0
  %27 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 1
  store i64 %nSteps, i64* %26
  store %Callable* %op, %Callable** %27
  %28 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 0
  %33 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 1
  store i64 %nSteps, i64* %32
  store %Callable* %op, %Callable** %33
  %34 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____adj(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 0
  %39 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 1
  store i64 %nSteps, i64* %38
  store %Callable* %op, %Callable** %39
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____adj({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i64 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 0
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 1
  store i64 %nSteps, i64* %42
  store %Callable* %op, %Callable** %43
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____adj({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 0, %3
  %5 = udiv i64 %4, -1
  %6 = mul i64 -1, %5
  %7 = add i64 %3, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = insertvalue %Range %9, i64 1, 1
  %11 = insertvalue %Range %10, i64 %3, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %12, %preheader__1 ], [ %26, %exiting__1 ]
  %16 = icmp sle i64 %__qsVar1__idx__, %14
  %17 = icmp sge i64 %__qsVar1__idx__, %14
  %18 = select i1 %15, i1 %16, i1 %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 2
  %25 = fmul double %stepSize, 5.000000e-01
  store i64 %__qsVar1__idx__, i64* %22
  store double %25, double* %23
  store %Array* %target, %Array** %24
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %__qsVar1__idx__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  %27 = sub i64 %nSteps, 1
  %28 = sub i64 %27, 0
  %29 = udiv i64 %28, 1
  %30 = mul i64 1, %29
  %31 = add i64 0, %30
  %32 = load %Range, %Range* @EmptyRange
  %33 = insertvalue %Range %32, i64 %31, 0
  %34 = insertvalue %Range %33, i64 -1, 1
  %35 = insertvalue %Range %34, i64 0, 2
  %36 = extractvalue %Range %35, 0
  %37 = extractvalue %Range %35, 1
  %38 = extractvalue %Range %35, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %39 = icmp sgt i64 %37, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %36, %preheader__2 ], [ %50, %exiting__2 ]
  %40 = icmp sle i64 %__qsVar0__idx__, %38
  %41 = icmp sge i64 %__qsVar0__idx__, %38
  %42 = select i1 %39, i1 %40, i1 %41
  br i1 %42, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %43 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %43, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %43)
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { i64, double, %Array* }*
  %46 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %45, i64 0, i32 0
  %47 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %45, i64 0, i32 1
  %48 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %45, i64 0, i32 2
  %49 = fmul double %stepSize, 5.000000e-01
  store i64 %__qsVar0__idx__, i64* %46
  store double %49, double* %47
  store %Array* %target, %Array** %48
  call void @__quantum__rt__callable_invoke(%Callable* %43, %Tuple* %44, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %43, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %44, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %50 = add i64 %__qsVar0__idx__, %37
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 %3, 0
  %5 = udiv i64 %4, 1
  %6 = mul i64 1, %5
  %7 = add i64 0, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %12, %preheader__1 ], [ %25, %exiting__1 ]
  %16 = icmp sle i64 %__qsVar0__idx__, %14
  %17 = icmp sge i64 %__qsVar0__idx__, %14
  %18 = select i1 %15, i1 %16, i1 %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 2
  store i64 %__qsVar0__idx__, i64* %22
  store double %stepSize, double* %23
  store %Array* %target, %Array** %24
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %19, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %25 = add i64 %__qsVar0__idx__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %order = load i64, i64* %1
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %stepSize = load double, double* %4
  %5 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %target = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 0
  %nSteps = load i64, i64* %6
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 1
  %op = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef2__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, { i64, %Callable* }*, double, %Array* }*
  %12 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 3
  %16 = sub i64 %order, 2
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, %Callable* }*
  %19 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 0
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 1
  store i64 %nSteps, i64* %19
  store %Callable* %op, %Callable** %20
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %21 = fmul double %stepSizeOuter, %stepSize
  store i64 %16, i64* %12
  store { i64, %Callable* }* %18, { i64, %Callable* }** %13
  store double %21, double* %14
  store %Array* %target, %Array** %15
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %11)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, { i64, %Callable* }*, double, %Array* }*
  %24 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 0
  %25 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 1
  %26 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 2
  %27 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 3
  %28 = sub i64 %order, 2
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, %Callable* }*
  %31 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 0
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 1
  store i64 %nSteps, i64* %31
  store %Callable* %op, %Callable** %32
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %33 = fmul double %stepSizeOuter, %stepSize
  store i64 %28, i64* %24
  store { i64, %Callable* }* %30, { i64, %Callable* }** %25
  store double %33, double* %26
  store %Array* %target, %Array** %27
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %23)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, { i64, %Callable* }*, double, %Array* }*
  %36 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 0
  %37 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 1
  %38 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 2
  %39 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 3
  %40 = sub i64 %order, 2
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Callable* }*
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 0
  %44 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 1
  store i64 %nSteps, i64* %43
  store %Callable* %op, %Callable** %44
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %45 = fmul double %stepSizeInner, %stepSize
  store i64 %40, i64* %36
  store { i64, %Callable* }* %42, { i64, %Callable* }** %37
  store double %45, double* %38
  store %Array* %target, %Array** %39
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %35)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, { i64, %Callable* }*, double, %Array* }*
  %48 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 0
  %49 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 1
  %50 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 2
  %51 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 3
  %52 = sub i64 %order, 2
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i64, %Callable* }*
  %55 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 0
  %56 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 1
  store i64 %nSteps, i64* %55
  store %Callable* %op, %Callable** %56
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %57 = fmul double %stepSizeOuter, %stepSize
  store i64 %52, i64* %48
  store { i64, %Callable* }* %54, { i64, %Callable* }** %49
  store double %57, double* %50
  store %Array* %target, %Array** %51
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %47)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { i64, %Callable* }*, double, %Array* }*
  %60 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 0
  %61 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 1
  %62 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 2
  %63 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 3
  %64 = sub i64 %order, 2
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { i64, %Callable* }*
  %67 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 0
  %68 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 1
  store i64 %nSteps, i64* %67
  store %Callable* %op, %Callable** %68
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %69 = fmul double %stepSizeOuter, %stepSize
  store i64 %64, i64* %60
  store { i64, %Callable* }* %66, { i64, %Callable* }** %61
  store double %69, double* %62
  store %Array* %target, %Array** %63
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %59)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 0
  %74 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 1
  %75 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 2
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Callable* }*
  %78 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 0
  %79 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 1
  store i64 %nSteps, i64* %78
  store %Callable* %op, %Callable** %79
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %73
  store double %stepSize, double* %74
  store %Array* %target, %Array** %75
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %72)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i64 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { { i64, %Callable* }*, double, %Array* }*
  %82 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 0
  %83 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 1
  %84 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 2
  %85 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %86 = bitcast %Tuple* %85 to { i64, %Callable* }*
  %87 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 0
  %88 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 1
  store i64 %nSteps, i64* %87
  store %Callable* %op, %Callable** %88
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  store { i64, %Callable* }* %86, { i64, %Callable* }** %82
  store double %stepSize, double* %83
  store %Array* %target, %Array** %84
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %81)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %9, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %11 = bitcast %Tuple* %10 to { %Array*, { i64, double, %Array* }* }*
  %12 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i64 0, i32 1
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, double, %Array* }*
  %16 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %15, i64 0, i32 2
  %19 = fmul double %stepSize, 5.000000e-01
  store i64 %idx, i64* %16
  store double %19, double* %17
  store %Array* %target, %Array** %18
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %12
  store { i64, double, %Array* }* %15, { i64, double, %Array* }** %13
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %9, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %21 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx__1 = phi i64 [ %21, %preheader__1 ], [ %36, %exiting__2 ]
  %22 = icmp sle i64 %idx__1, 0
  %23 = icmp sge i64 %idx__1, 0
  %24 = select i1 false, i1 %22, i1 %23
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %25, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %25)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, double, %Array* }* }*
  %28 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %27, i64 0, i32 0
  %29 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %27, i64 0, i32 1
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, double, %Array* }*
  %32 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %31, i64 0, i32 0
  %33 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %31, i64 0, i32 1
  %34 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %31, i64 0, i32 2
  %35 = fmul double %stepSize, 5.000000e-01
  store i64 %idx__1, i64* %32
  store double %35, double* %33
  store %Array* %target, %Array** %34
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %28
  store { i64, double, %Array* }* %31, { i64, double, %Array* }** %29
  call void @__quantum__rt__callable_invoke(%Callable* %25, %Tuple* %26, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %25, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %idx__1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %9, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %11 = bitcast %Tuple* %10 to { %Array*, { i64, double, %Array* }* }*
  %12 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i64 0, i32 1
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, double, %Array* }*
  %16 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %15, i64 0, i32 2
  store i64 %idx, i64* %16
  store double %stepSize, double* %17
  store %Array* %target, %Array** %18
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %12
  store { i64, double, %Array* }* %15, { i64, double, %Array* }** %13
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %9, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %order = load i64, i64* %1
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %stepSize = load double, double* %4
  %5 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %target = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 0
  %nSteps = load i64, i64* %6
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 1
  %op = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef2__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, { i64, %Callable* }*, double, %Array* }*
  %12 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 3
  %16 = sub i64 %order, 2
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, %Callable* }*
  %19 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 0
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 1
  store i64 %nSteps, i64* %19
  store %Callable* %op, %Callable** %20
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %21 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  store i64 %16, i64* %12
  store { i64, %Callable* }* %18, { i64, %Callable* }** %13
  store double %21, double* %14
  store %Array* %target, %Array** %15
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %11)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, { i64, %Callable* }*, double, %Array* }*
  %24 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 0
  %25 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 1
  %26 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 2
  %27 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 3
  %28 = sub i64 %order, 2
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, %Callable* }*
  %31 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 0
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 1
  store i64 %nSteps, i64* %31
  store %Callable* %op, %Callable** %32
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %33 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  store i64 %28, i64* %24
  store { i64, %Callable* }* %30, { i64, %Callable* }** %25
  store double %33, double* %26
  store %Array* %target, %Array** %27
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %23)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, { i64, %Callable* }*, double, %Array* }*
  %36 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 0
  %37 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 1
  %38 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 2
  %39 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 3
  %40 = sub i64 %order, 2
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Callable* }*
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 0
  %44 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 1
  store i64 %nSteps, i64* %43
  store %Callable* %op, %Callable** %44
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %45 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  store i64 %40, i64* %36
  store { i64, %Callable* }* %42, { i64, %Callable* }** %37
  store double %45, double* %38
  store %Array* %target, %Array** %39
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %35)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, { i64, %Callable* }*, double, %Array* }*
  %48 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 0
  %49 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 1
  %50 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 2
  %51 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 3
  %52 = sub i64 %order, 2
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i64, %Callable* }*
  %55 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 0
  %56 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 1
  store i64 %nSteps, i64* %55
  store %Callable* %op, %Callable** %56
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %57 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  store i64 %52, i64* %48
  store { i64, %Callable* }* %54, { i64, %Callable* }** %49
  store double %57, double* %50
  store %Array* %target, %Array** %51
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %47)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { i64, %Callable* }*, double, %Array* }*
  %60 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 0
  %61 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 1
  %62 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 2
  %63 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 3
  %64 = sub i64 %order, 2
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { i64, %Callable* }*
  %67 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 0
  %68 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 1
  store i64 %nSteps, i64* %67
  store %Callable* %op, %Callable** %68
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  %69 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  store i64 %64, i64* %60
  store { i64, %Callable* }* %66, { i64, %Callable* }** %61
  store double %69, double* %62
  store %Array* %target, %Array** %63
  call void @Microsoft__Quantum__Canon___8c16b16c8c524047b71ebbd5d7ac6b58___QsRef2__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %59)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i64 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 0
  %74 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 1
  %75 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 2
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Callable* }*
  %78 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 0
  %79 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 1
  store i64 %nSteps, i64* %78
  store %Callable* %op, %Callable** %79
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %73
  store double %stepSize, double* %74
  store %Array* %target, %Array** %75
  call void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %72)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i64 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { { i64, %Callable* }*, double, %Array* }*
  %82 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 0
  %83 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 1
  %84 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 2
  %85 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %86 = bitcast %Tuple* %85 to { i64, %Callable* }*
  %87 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 0
  %88 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 1
  store i64 %nSteps, i64* %87
  store %Callable* %op, %Callable** %88
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 1)
  store { i64, %Callable* }* %86, { i64, %Callable* }** %82
  store double %stepSize, double* %83
  store %Array* %target, %Array** %84
  call void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %81)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i64 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___f3dde0a8901e414d9e9496fa7bcc4d94___QsRef2__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 0, %7
  %9 = udiv i64 %8, -1
  %10 = mul i64 -1, %9
  %11 = add i64 %7, %10
  %12 = load %Range, %Range* @EmptyRange
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %7, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %16, %preheader__1 ], [ %34, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar1__idx__, %18
  %21 = icmp sge i64 %__qsVar1__idx__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { i64, double, %Array* }* }*
  %26 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 1
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, double, %Array* }*
  %30 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 0
  %31 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 1
  %32 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 2
  %33 = fmul double %stepSize, 5.000000e-01
  store i64 %__qsVar1__idx__, i64* %30
  store double %33, double* %31
  store %Array* %target, %Array** %32
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %26
  store { i64, double, %Array* }* %29, { i64, double, %Array* }** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %34 = add i64 %__qsVar1__idx__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  %35 = sub i64 %nSteps, 1
  %36 = sub i64 %35, 0
  %37 = udiv i64 %36, 1
  %38 = mul i64 1, %37
  %39 = add i64 0, %38
  %40 = load %Range, %Range* @EmptyRange
  %41 = insertvalue %Range %40, i64 %39, 0
  %42 = insertvalue %Range %41, i64 -1, 1
  %43 = insertvalue %Range %42, i64 0, 2
  %44 = extractvalue %Range %43, 0
  %45 = extractvalue %Range %43, 1
  %46 = extractvalue %Range %43, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %47 = icmp sgt i64 %45, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %44, %preheader__2 ], [ %62, %exiting__2 ]
  %48 = icmp sle i64 %__qsVar0__idx__, %46
  %49 = icmp sge i64 %__qsVar0__idx__, %46
  %50 = select i1 %47, i1 %48, i1 %49
  br i1 %50, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %51 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %51, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %51)
  call void @__quantum__rt__callable_make_controlled(%Callable* %51)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %53 = bitcast %Tuple* %52 to { %Array*, { i64, double, %Array* }* }*
  %54 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %53, i64 0, i32 0
  %55 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %53, i64 0, i32 1
  %56 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %57 = bitcast %Tuple* %56 to { i64, double, %Array* }*
  %58 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %57, i64 0, i32 0
  %59 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %57, i64 0, i32 1
  %60 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %57, i64 0, i32 2
  %61 = fmul double %stepSize, 5.000000e-01
  store i64 %__qsVar0__idx__, i64* %58
  store double %61, double* %59
  store %Array* %target, %Array** %60
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %54
  store { i64, double, %Array* }* %57, { i64, double, %Array* }** %55
  call void @__quantum__rt__callable_invoke(%Callable* %51, %Tuple* %52, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %51, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %51, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %62 = add i64 %__qsVar0__idx__, %45
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___007e0c43c9cb4bc5aa81474c596349b5___QsRef2__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 1)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 1)
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 %7, 0
  %9 = udiv i64 %8, 1
  %10 = mul i64 1, %9
  %11 = add i64 0, %10
  %12 = load %Range, %Range* @EmptyRange
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 -1, 1
  %15 = insertvalue %Range %14, i64 0, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %16, %preheader__1 ], [ %33, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar0__idx__, %18
  %21 = icmp sge i64 %__qsVar0__idx__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { i64, double, %Array* }* }*
  %26 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 1
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, double, %Array* }*
  %30 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 0
  %31 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 1
  %32 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 2
  store i64 %__qsVar0__idx__, i64* %30
  store double %stepSize, double* %31
  store %Array* %target, %Array** %32
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 1)
  store %Array* %__controlQubits__, %Array** %26
  store { i64, double, %Array* }* %29, { i64, double, %Array* }** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %23, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %__qsVar0__idx__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %op, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__24__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 1
  %9 = load %Array*, %Array** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Array* }*
  %12 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 3
  store i64 %2, i64* %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Array* %9, %Array** %15
  %16 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__24__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 1
  %9 = load %Array*, %Array** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Array* }*
  %12 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i64 0, i32 3
  store i64 %2, i64* %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Array* %9, %Array** %15
  %16 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__24__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Array* }*
  %16 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 2
  %19 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 3
  store i64 %7, i64* %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Array* %13, %Array** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { i64, %Callable*, %Array*, %Array* }* %15, { i64, %Callable*, %Array*, %Array* }** %23
  %24 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__24__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Array* }*
  %16 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 2
  %19 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i64 0, i32 3
  store i64 %7, i64* %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Array* %13, %Array** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { i64, %Callable*, %Array*, %Array* }* %15, { i64, %Callable*, %Array*, %Array* }** %23
  %24 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @MemoryManagement__13__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__13__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Lifted__PartialApplication__25__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 1
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 3
  store i64 %2, i64* %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__25__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 1
  %2 = load i64, i64* %1
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 1
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 3
  store i64 %2, i64* %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__25__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 1
  %13 = load %Qubit*, %Qubit** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 3
  store i64 %7, i64* %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Qubit* %13, %Qubit** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { i64, %Callable*, %Array*, %Qubit* }* %15, { i64, %Callable*, %Array*, %Qubit* }** %23
  %24 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__25__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %7 = load i64, i64* %6
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 1
  %13 = load %Qubit*, %Qubit** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 3
  store i64 %7, i64* %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Qubit* %13, %Qubit** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { i64, %Callable*, %Array*, %Qubit* }* %15, { i64, %Callable*, %Array*, %Qubit* }** %23
  %24 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @MemoryManagement__14__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__14__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__body(%Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__adj(%Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctl(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___0b9ce0fe11af4821850f2faee1efc7d8_NoOp__ctladj(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i64 -1)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___1d57446c99cd4ba6a8b127a1eb610ef8_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array*, %Callable* }*
  %2 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store %Array* %bits, %Array** %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__26, [2 x void (%Tuple*, i64)*]* @MemoryManagement__15, %Tuple* %0)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___c52e1f0fb7b2430e84ebf97ba8ac3fe7_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Lifted__PartialApplication__26__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 1
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 3
  store %Array* %2, %Array** %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__26__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i64 0, i32 1
  %9 = load %Qubit*, %Qubit** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 1
  %14 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 2
  %15 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i64 0, i32 3
  store %Array* %2, %Array** %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Qubit* %9, %Qubit** %15
  %16 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__26__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 1
  %13 = load %Qubit*, %Qubit** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 3
  store %Array* %7, %Array** %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Qubit* %13, %Qubit** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { %Array*, %Callable*, %Array*, %Qubit* }* %15, { %Array*, %Callable*, %Array*, %Qubit* }** %23
  %24 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__26__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 1
  %13 = load %Qubit*, %Qubit** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i64 0, i32 3
  store %Array* %7, %Array** %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Qubit* %13, %Qubit** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { %Array*, %Callable*, %Array*, %Qubit* }* %15, { %Array*, %Callable*, %Array*, %Qubit* }** %23
  %24 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @MemoryManagement__15__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__15__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___6927cfacebaf4244b40375fabbb77fd8_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array*, %Callable* }*
  %2 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store %Array* %bits, %Array** %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__27, [2 x void (%Tuple*, i64)*]* @MemoryManagement__16, %Tuple* %0)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___d591ca198a0145cfac3f458724ebf8b0_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__27__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 1
  %9 = load %Array*, %Array** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Array* }*
  %12 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 3
  store %Array* %2, %Array** %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Array* %9, %Array** %15
  %16 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__27__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %5, i64 0, i32 1
  %9 = load %Array*, %Array** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Array* }*
  %12 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i64 0, i32 3
  store %Array* %2, %Array** %12
  store %Callable* %4, %Callable** %13
  store %Array* %7, %Array** %14
  store %Array* %9, %Array** %15
  %16 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__27__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Array* }*
  %16 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 2
  %19 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 3
  store %Array* %7, %Array** %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Array* %13, %Array** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { %Array*, %Callable*, %Array*, %Array* }* %15, { %Array*, %Callable*, %Array*, %Array* }** %23
  %24 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__27__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 2
  %9 = load %Callable*, %Callable** %8
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Array* }*
  %16 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 2
  %19 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i64 0, i32 3
  store %Array* %7, %Array** %16
  store %Callable* %9, %Callable** %17
  store %Array* %11, %Array** %18
  store %Array* %13, %Array** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { %Array*, %Callable*, %Array*, %Array* }* %15, { %Array*, %Callable*, %Array*, %Array* }** %23
  %24 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @MemoryManagement__16__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__16__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i64 0, i32 2
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___378d9e6fd3cd47feb23f68a348476bf6_Compose__body(%Callable* %outer, %Callable* %inner) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outer, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %inner, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Callable*, %Callable* }*
  %2 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___318ca8f6570d4e08a137a15bcb135424___QsRef2__ComposedOutput__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store %Callable* %outer, %Callable** %3
  store %Callable* %inner, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__28, [2 x void (%Tuple*, i64)*]* @MemoryManagement__17, %Tuple* %0)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %outer, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %outer, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %inner, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %inner, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %outer, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %inner, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i64 -1)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___318ca8f6570d4e08a137a15bcb135424___QsRef2__ComposedOutput____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, double }*
  %1 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i64 0, i32 0
  %2 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i64 0, i32 1
  %3 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %1
  %5 = load %Callable*, %Callable** %2
  %6 = load double, double* %3
  %7 = call { double, double }* @Microsoft__Quantum__Canon___318ca8f6570d4e08a137a15bcb135424___QsRef2__ComposedOutput____body(%Callable* %4, %Callable* %5, double %6)
  %8 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %9 = getelementptr { { double, double }* }, { { double, double }* }* %8, i64 0, i32 0
  store { double, double }* %7, { double, double }** %9
  ret void
}

define void @Lifted__PartialApplication__28__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Callable*, %Callable** %1
  %3 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %3
  %5 = bitcast %Tuple* %arg-tuple to { double }*
  %6 = getelementptr { double }, { double }* %5, i64 0, i32 0
  %7 = load double, double* %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, double }* getelementptr ({ %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Callable*, double }*
  %10 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i64 0, i32 0
  %11 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i64 0, i32 1
  %12 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i64 0, i32 2
  store %Callable* %2, %Callable** %10
  store %Callable* %4, %Callable** %11
  store double %7, double* %12
  %13 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @MemoryManagement__17__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 2
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__17__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 %count-change)
  %5 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i64 0, i32 2
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___1d57446c99cd4ba6a8b127a1eb610ef8_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %3 = bitcast %Tuple* %2 to { %Array*, %Qubit* }*
  %4 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i64 0, i32 0
  %5 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i64 0, i32 1
  store %Array* %controlRegister, %Array** %4
  store %Qubit* %targetRegister, %Qubit** %5
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %1, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___1d57446c99cd4ba6a8b127a1eb610ef8_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Array*, %Qubit* }*
  %5 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 0
  %6 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 1
  store %Array* %controlRegister, %Array** %5
  store %Qubit* %targetRegister, %Qubit** %6
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %1, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___1d57446c99cd4ba6a8b127a1eb610ef8_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Qubit* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 1
  store %Array* %controlRegister, %Array** %14
  store %Qubit* %targetRegister, %Qubit** %15
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 1)
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___5bd481fed897443d82a9b1b65da92850_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___1d57446c99cd4ba6a8b127a1eb610ef8_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Qubit* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 1
  store %Array* %controlRegister, %Array** %14
  store %Qubit* %targetRegister, %Qubit** %15
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 1)
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___6927cfacebaf4244b40375fabbb77fd8_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %3 = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  store %Array* %controlRegister, %Array** %4
  store %Array* %targetRegister, %Array** %5
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %1, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___6927cfacebaf4244b40375fabbb77fd8_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Array*, %Array* }*
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 0
  %6 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 1
  store %Array* %controlRegister, %Array** %5
  store %Array* %targetRegister, %Array** %6
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %1, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___6927cfacebaf4244b40375fabbb77fd8_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Array* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 1
  store %Array* %controlRegister, %Array** %14
  store %Array* %targetRegister, %Array** %15
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 1)
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Canon___8a882df8557143ea94e72c33ff275d6a_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 1)
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 1)
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___6927cfacebaf4244b40375fabbb77fd8_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Array* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 1
  store %Array* %controlRegister, %Array** %14
  store %Array* %targetRegister, %Array** %15
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 1)
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %oracle, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %7, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 0
  %paulis = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %2 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 1
  %theta = load double, double* %2
  %3 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 0
  %7 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 1
  %8 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 2
  store %Array* %paulis, %Array** %6
  store double %theta, double* %7
  store %Array* %qubits, %Array** %8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 0
  %paulis = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %2 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 1
  %theta = load double, double* %2
  %3 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 0
  %7 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 1
  %8 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 2
  store %Array* %paulis, %Array** %6
  store double %theta, double* %7
  store %Array* %qubits, %Array** %8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define %Result* @Microsoft__Quantum__Intrinsic__Measure__body(%Array* %bases, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %0 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %bases, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret %Result* %0
}

define void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

declare void @__quantum__qis__h__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 0
  %control = load %Qubit*, %Qubit** %1
  %2 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 1
  %target = load %Qubit*, %Qubit** %2
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %control, %Qubit** %5
  %__controlQubits__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %3)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i64 1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__1, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__1, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__1, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

declare %Array* @__quantum__rt__array_concatenate(%Array*, %Array*)

define void @Microsoft__Quantum__Intrinsic__CNOT__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 0
  %control = load %Qubit*, %Qubit** %1
  %2 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 1
  %target = load %Qubit*, %Qubit** %2
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i64 0, i32 0
  %6 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i64 0, i32 1
  store %Qubit* %control, %Qubit** %5
  store %Qubit* %target, %Qubit** %6
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit) {
entry:
  %0 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit)
  %1 = load %Result*, %Result** @ResultOne
  %2 = call i1 @__quantum__rt__result_equal(%Result* %0, %Result* %1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__result_update_reference_count(%Result* %0, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__adj(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__s__adj(%Qubit*)

define void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__s__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

declare void @__quantum__qis__s__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__s__ctladj(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

declare void @__quantum__qis__s__ctladj(%Array*, %Qubit*)

define void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__y__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Y__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__y__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Y__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___9035a87fe93444128b0caf8bebcb3c54_Padded__body(i64 %nElementsTotal, { double, double }* %defaultElement, %Array* %inputArray) {
entry:
  %0 = bitcast { double, double }* %defaultElement to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %1 = sub i64 %nElementsInitial, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i64 1)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %9 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %10 = call %String* @__quantum__rt__string_create(i32 70, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @64, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %9, i1 true, %String* %10)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___d88ece3d98e04b479ab4d184bd28a359_ConstantArray__body(i64 %nElementsPad, { double, double }* %defaultElement)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %padArray)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i64 1)
  %20 = icmp sge i64 %nElementsTotal, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  %21 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__2
  %22 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %23 = phi %Array* [ %21, %condTrue__1 ], [ %22, %condFalse__1 ]
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  %24 = sub i64 %nElementsInitial, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %condContinue__1
  %25 = phi i64 [ 0, %condContinue__1 ], [ %31, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %25)
  %28 = bitcast i8* %27 to { double, double }**
  %29 = load { double, double }*, { double, double }** %28
  %30 = bitcast { double, double }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i64 -1)
  %32 = sub i64 %11, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %39, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %33)
  %36 = bitcast i8* %35 to { double, double }**
  %37 = load { double, double }*, { double, double }** %36
  %38 = bitcast { double, double }* %37 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %38, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %39 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i64 -1)
  %40 = sub i64 %11, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %41 = phi i64 [ 0, %exit__4 ], [ %47, %exiting__5 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %41)
  %44 = bitcast i8* %43 to { double, double }**
  %45 = load { double, double }*, { double, double }** %44
  %46 = bitcast { double, double }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %47 = add i64 %41, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i64 -1)
  ret %Array* %23
}

define %Array* @Microsoft__Quantum__Arrays___d88ece3d98e04b479ab4d184bd28a359_ConstantArray__body(i64 %length, { double, double }* %value) {
entry:
  %0 = bitcast { double, double }* %value to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %2 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %6 = bitcast %Tuple* %5 to { double, double }*
  %7 = getelementptr { double, double }, { double, double }* %6, i64 0, i32 0
  %8 = getelementptr { double, double }, { double, double }* %6, i64 0, i32 1
  store double 0.000000e+00, double* %7
  store double 0.000000e+00, double* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %10 = bitcast i8* %9 to { double, double }**
  store { double, double }* %6, { double, double }** %10
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %arr = alloca %Array*
  store %Array* %1, %Array** %arr
  %12 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %20 = sub i64 %length, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %21 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %21, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  %28 = sub i64 %length, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %i = phi i64 [ 0, %exit__3 ], [ %37, %exiting__4 ]
  %29 = icmp sle i64 %i, %28
  br i1 %29, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %30 = load %Array*, %Array** %arr
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i64 -1)
  %31 = call %Array* @__quantum__rt__array_copy(%Array* %30, i1 false)
  %32 = icmp ne %Array* %30, %31
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %i)
  %34 = bitcast i8* %33 to { double, double }**
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %35 = load { double, double }*, { double, double }** %34
  %36 = bitcast { double, double }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i64 -1)
  br i1 %32, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %body__4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i64 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %body__4
  store { double, double }* %value, { double, double }** %34
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i64 1)
  store %Array* %31, %Array** %arr
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %condContinue__1
  %37 = add i64 %i, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %38 = load %Array*, %Array** %arr
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  %39 = call i64 @__quantum__rt__array_get_size_1d(%Array* %38)
  %40 = sub i64 %39, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %41 = phi i64 [ 0, %exit__4 ], [ %47, %exiting__5 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %41)
  %44 = bitcast i8* %43 to { double, double }**
  %45 = load { double, double }*, { double, double }** %44
  %46 = bitcast { double, double }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %47 = add i64 %41, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i64 -1)
  %48 = sub i64 %length, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %49 = phi i64 [ 0, %exit__5 ], [ %55, %exiting__6 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %49)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = load { double, double }*, { double, double }** %52
  %54 = bitcast { double, double }* %53 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %55 = add i64 %49, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 -1)
  ret %Array* %38
}

define %Array* @Microsoft__Quantum__Arrays___d4730896642e402f935d1d53c266632d_ConstantArray__body(i64 %length, double %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to double*
  store double 0.000000e+00, double* %5
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %arr = alloca %Array*
  store %Array* %0, %Array** %arr
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 1)
  %7 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %i = phi i64 [ 0, %exit__1 ], [ %14, %exiting__2 ]
  %8 = icmp sle i64 %i, %7
  br i1 %8, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %9 = load %Array*, %Array** %arr
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i64 -1)
  %10 = call %Array* @__quantum__rt__array_copy(%Array* %9, i1 false)
  %11 = icmp ne %Array* %9, %10
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %i)
  %13 = bitcast i8* %12 to double*
  store double %value, double* %13
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  store %Array* %10, %Array** %arr
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %14 = add i64 %i, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %15 = load %Array*, %Array** %arr
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i64 -1)
  ret %Array* %15
}

define %Callable* @Microsoft__Quantum__Arrays___00faa319cec04c35b268acd7ae24be3c_ElementAt__body(i64 %index, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %8 = icmp sge i64 %index, 0
  %9 = icmp slt i64 %index, %0
  %10 = and i1 %8, %9
  %11 = call %String* @__quantum__rt__string_create(i32 21, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @66, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %14, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i64 1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to %Callable**
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %20, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i64 -1)
  ret %Callable* %14
}

define %Range @Microsoft__Quantum__Arrays___ffc4dcec5f8848fbb15ec0109005986d_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Range %5
}

define %Range @Microsoft__Quantum__Arrays___17a2b288a3d5467a97ba7d7d667e16ae_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange
  %10 = insertvalue %Range %9, i64 0, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  ret %Range %12
}

define void @Microsoft__Quantum__Arrays___00faa319cec04c35b268acd7ae24be3c_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr { i64, %Array* }, { i64, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Array* }, { i64, %Array* }* %0, i64 0, i32 1
  %3 = load i64, i64* %1
  %4 = load %Array*, %Array** %2
  %5 = call %Callable* @Microsoft__Quantum__Arrays___00faa319cec04c35b268acd7ae24be3c_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  store %Callable* %5, %Callable** %7
  ret void
}

define void @Lifted__PartialApplication__29__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr { i64 }, { i64 }* %0, i64 0, i32 0
  %2 = load i64, i64* %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i64 0, i32 1
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr { i64, %Array* }, { i64, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { i64, %Array* }, { i64, %Array* }* %7, i64 0, i32 1
  store i64 %2, i64* %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @MemoryManagement__18__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__7 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %11, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i64 %count-change)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %12 = add i64 %7, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__18__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__8 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %11, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i64 %count-change)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %12 = add i64 %7, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___fef367af39f04025a5a38bae6685a492_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %mapper, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %2 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %6 = bitcast %Tuple* %5 to { double, double }*
  %7 = getelementptr { double, double }, { double, double }* %6, i64 0, i32 0
  %8 = getelementptr { double, double }, { double, double }* %6, i64 0, i32 1
  store double 0.000000e+00, double* %7
  store double 0.000000e+00, double* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %10 = bitcast i8* %9 to { double, double }**
  store { double, double }* %6, { double, double }** %10
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %resultArray = alloca %Array*
  store %Array* %1, %Array** %resultArray
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %20 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %21 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %21, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 1)
  %28 = call %Range @Microsoft__Quantum__Arrays___ffc4dcec5f8848fbb15ec0109005986d_IndexRange__body(%Array* %array)
  %29 = extractvalue %Range %28, 0
  %30 = extractvalue %Range %28, 1
  %31 = extractvalue %Range %28, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__3
  %32 = icmp sgt i64 %30, 0
  br label %header__4

header__4:                                        ; preds = %exiting__4, %preheader__1
  %idxElement = phi i64 [ %29, %preheader__1 ], [ %54, %exiting__4 ]
  %33 = icmp sle i64 %idxElement, %31
  %34 = icmp sge i64 %idxElement, %31
  %35 = select i1 %32, i1 %33, i1 %34
  br i1 %35, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %36 = load %Array*, %Array** %resultArray
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i64 -1)
  %37 = call %Array* @__quantum__rt__array_copy(%Array* %36, i1 false)
  %38 = icmp ne %Array* %36, %37
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %40 = bitcast i8* %39 to double*
  %41 = load double, double* %40
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { double }*
  %44 = getelementptr { double }, { double }* %43, i64 0, i32 0
  store double %41, double* %44
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %42, %Tuple* %45)
  %46 = bitcast %Tuple* %45 to { { double, double }* }*
  %47 = getelementptr { { double, double }* }, { { double, double }* }* %46, i64 0, i32 0
  %48 = load { double, double }*, { double, double }** %47
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 %idxElement)
  %50 = bitcast i8* %49 to { double, double }**
  %51 = bitcast { double, double }* %48 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %51, i64 1)
  %52 = load { double, double }*, { double, double }** %50
  %53 = bitcast { double, double }* %52 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i64 -1)
  br i1 %38, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %body__4
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i64 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %body__4
  store { double, double }* %48, { double, double }** %50
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i64 1)
  store %Array* %37, %Array** %resultArray
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %condContinue__1
  %54 = add i64 %idxElement, %30
  br label %header__4

exit__4:                                          ; preds = %header__4
  %55 = load %Array*, %Array** %resultArray
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %mapper, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i64 -1)
  %56 = call i64 @__quantum__rt__array_get_size_1d(%Array* %55)
  %57 = sub i64 %56, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %64, %exiting__5 ]
  %59 = icmp sle i64 %58, %57
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 %58)
  %61 = bitcast i8* %60 to { double, double }**
  %62 = load { double, double }*, { double, double }** %61
  %63 = bitcast { double, double }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %64 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %55, i64 -1)
  %65 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %66 = phi i64 [ 0, %exit__5 ], [ %72, %exiting__6 ]
  %67 = icmp sle i64 %66, %65
  br i1 %67, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %66)
  %69 = bitcast i8* %68 to { double, double }**
  %70 = load { double, double }*, { double, double }** %69
  %71 = bitcast { double, double }* %70 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %72 = add i64 %66, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i64 -1)
  ret %Array* %55
}

define { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i64 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  store %Callable* %__Item1__, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__Item1__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i64 -1)
  ret { %Callable* }* %1
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0
  %1 = getelementptr { %Callable* }, { %Callable* }* %evolutionSet, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 1)
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  %4 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  %6 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 0
  %nTerms = load i64, i64* %8
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr { i64 }, { i64 }* %10, i64 0, i32 0
  store i64 %idx, i64* %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14
  %15 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %16, i64 0, i32 0
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 1)
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %16, i64 0, i32 1
  %20 = load %Array*, %Array** %19
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i64 1)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i64 1)
  %22 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  %24 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %26, i64 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27
  %29 = getelementptr { %Callable* }, { %Callable* }* %28, i64 0, i32 0
  %30 = load %Callable*, %Callable** %29
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { double, %Array* }*
  %33 = getelementptr { double, %Array* }, { double, %Array* }* %32, i64 0, i32 0
  %34 = getelementptr { double, %Array* }, { double, %Array* }* %32, i64 0, i32 1
  store double %stepsize, double* %33
  store %Array* %qubits, %Array** %34
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %30, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i64 -1)
  %35 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__adj({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %0
  %1 = getelementptr { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 1)
  %3 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  %4 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %4
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  %6 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %8
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr { i64 }, { i64 }* %10, i64 0, i32 0
  store i64 %idx, i64* %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i64 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14
  %15 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 0
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %16, i64 0, i32 0
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 1)
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %16, i64 0, i32 1
  %20 = load %Array*, %Array** %19
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i64 1)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i64 1)
  %22 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  %24 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %26, i64 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27
  %29 = getelementptr { %Callable* }, { %Callable* }* %28, i64 0, i32 0
  %30 = load %Callable*, %Callable** %29
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %30, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %31, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { double, %Array* }*
  %34 = getelementptr { double, %Array* }, { double, %Array* }* %33, i64 0, i32 0
  %35 = getelementptr { double, %Array* }, { double, %Array* }* %33, i64 0, i32 1
  store double %stepsize, double* %34
  store %Array* %qubits, %Array** %35
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %30, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i64 -1)
  %36 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %31, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %2
  %3 = getelementptr { %Callable* }, { %Callable* }* %evolutionSet, i64 0, i32 0
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 1)
  %5 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %6
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  %8 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %idx = load i64, i64* %10
  %11 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %stepsize = load double, double* %11
  %12 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %13 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 0
  %nTerms = load i64, i64* %13
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64 }*
  %16 = getelementptr { i64 }, { i64 }* %15, i64 0, i32 0
  store i64 %idx, i64* %16
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %14, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { { %Array*, %Array* }*, %Array* }* }*
  %19 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %18, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %19
  %20 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  %24 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i64 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 1)
  %27 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %28 = load %Array*, %Array** %27
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 1)
  %29 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %29, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %31, i64 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32
  %34 = getelementptr { %Callable* }, { %Callable* }* %33, i64 0, i32 0
  %35 = load %Callable*, %Callable** %34
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %38 = bitcast %Tuple* %37 to { %Array*, { double, %Array* }* }*
  %39 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 0
  %40 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 1
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array* }*
  %43 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 0
  %44 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 1
  store double %stepsize, double* %43
  store %Array* %qubits, %Array** %44
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 1)
  store %Array* %__controlQubits__, %Array** %39
  store { double, %Array* }* %42, { double, %Array* }** %40
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %35, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i64 -1)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %2
  %3 = getelementptr { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i64 0, i32 0
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 1)
  %5 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %6
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  %8 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %9 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %idx = load i64, i64* %10
  %11 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %stepsize = load double, double* %11
  %12 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  %13 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %13
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64 }*
  %16 = getelementptr { i64 }, { i64 }* %15, i64 0, i32 0
  store i64 %idx, i64* %16
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %14, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { { %Array*, %Array* }*, %Array* }* }*
  %19 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %18, i64 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %19
  %20 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 0
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 1)
  %24 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i64 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 1)
  %27 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 1
  %28 = load %Array*, %Array** %27
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 1)
  %29 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %29, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %31, i64 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32
  %34 = getelementptr { %Callable* }, { %Callable* }* %33, i64 0, i32 0
  %35 = load %Callable*, %Callable** %34
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %38 = bitcast %Tuple* %37 to { %Array*, { double, %Array* }* }*
  %39 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 0
  %40 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 1
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array* }*
  %43 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 0
  %44 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 1
  store double %stepsize, double* %43
  store %Array* %qubits, %Array** %44
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 1)
  store %Array* %__controlQubits__, %Array** %39
  store { double, %Array* }* %42, { double, %Array* }** %40
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %35, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i64 -1)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load i64, i64* %2
  %8 = load double, double* %3
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load i64, i64* %2
  %8 = load double, double* %3
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__30__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %6 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i64 0, i32 0
  %7 = load double, double* %6
  %8 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i64 0, i32 1
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8
  %10 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i64 0, i32 2
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %14 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 2
  %17 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 3
  %18 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 4
  store double %2, double* %14
  store i64 %4, i64* %15
  store double %7, double* %16
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %17
  store %Array* %11, %Array** %18
  %19 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__30__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %6 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i64 0, i32 0
  %7 = load double, double* %6
  %8 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i64 0, i32 1
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8
  %10 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i64 0, i32 2
  %11 = load %Array*, %Array** %10
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %14 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 2
  %17 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 3
  %18 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i64 0, i32 4
  store double %2, double* %14
  store i64 %4, i64* %15
  store double %7, double* %16
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %17
  store %Array* %11, %Array** %18
  %19 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__30__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i64 0, i32 0
  %11 = load double, double* %10
  %12 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i64 0, i32 1
  %13 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %12
  %14 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i64 0, i32 2
  %15 = load %Array*, %Array** %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %18 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 2
  %21 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 3
  %22 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 4
  store double %7, double* %18
  store i64 %9, i64* %19
  store double %11, double* %20
  store { { %Callable* }*, { i64, %Callable* }* }* %13, { { %Callable* }*, { i64, %Callable* }* }** %21
  store %Array* %15, %Array** %22
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %25 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i64 0, i32 1
  store %Array* %3, %Array** %25
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %26
  %27 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 0
  %28 = load %Callable*, %Callable** %27
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__30__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i64 0, i32 0
  %11 = load double, double* %10
  %12 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i64 0, i32 1
  %13 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %12
  %14 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i64 0, i32 2
  %15 = load %Array*, %Array** %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %18 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 2
  %21 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 3
  %22 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i64 0, i32 4
  store double %7, double* %18
  store i64 %9, i64* %19
  store double %11, double* %20
  store { { %Callable* }*, { i64, %Callable* }* }* %13, { { %Callable* }*, { i64, %Callable* }* }** %21
  store %Array* %15, %Array** %22
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %25 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i64 0, i32 1
  store %Array* %3, %Array** %25
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %26
  %27 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 0
  %28 = load %Callable*, %Callable** %27
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  ret void
}

define void @MemoryManagement__19__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__19__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  %3 = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %3, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i64 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 1
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %11 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %11)
  %12 = sitofp i64 %nTimeSlices to double
  %resizedTrotterStepSize = fdiv double %maxTime, %12
  %13 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %idxTimeSlice, %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array* }*
  %18 = getelementptr { %Array* }, { %Array* }* %17, i64 0, i32 0
  store %Array* %qubits, %Array** %18
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %3, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %trotterStepSize) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0
  %1 = getelementptr { %Callable* }, { %Callable* }* %evolutionSet, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 1)
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  %4 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %5
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  %6 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 0
  %nTerms = load i64, i64* %8
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %trotterForm = bitcast %Tuple* %9 to { i64, %Callable* }*
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i64 0, i32 0
  %11 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i64 0, i32 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %14 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %13, i64 0, i32 1
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__TrotterStepImpl, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %16, %Callable** %14
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %15
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__31, [2 x void (%Tuple*, i64)*]* @MemoryManagement__20, %Tuple* %12)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorSystemFunction, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 1)
  store i64 %nTerms, i64* %10
  store %Callable* %17, %Callable** %11
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %17, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %17, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Callable*, double }*
  %20 = getelementptr { %Callable*, double }, { %Callable*, double }* %19, i64 0, i32 0
  %21 = getelementptr { %Callable*, double }, { %Callable*, double }* %19, i64 0, i32 1
  %22 = call %Callable* @Microsoft__Quantum__Canon___b951346513364ba89719c60b99ad733f_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %trotterForm, i64 %trotterOrder)
  store %Callable* %22, %Callable** %20
  store double %trotterStepSize, double* %21
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__32, [2 x void (%Tuple*, i64)*]* @MemoryManagement__21, %Tuple* %18)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %17, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %17, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %17, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 -1)
  ret %Callable* %23
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  %3 = load %Callable*, %Callable** %2
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %3, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i64 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 1)
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %6, i64 0, i32 1
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %11 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %11)
  %12 = sitofp i64 %__qsVar0__nTimeSlices__ to double
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %12
  %13 = sub i64 %__qsVar0__nTimeSlices__, 1
  %14 = sub i64 %13, 0
  %15 = udiv i64 %14, 1
  %16 = mul i64 1, %15
  %17 = add i64 0, %16
  %18 = load %Range, %Range* @EmptyRange
  %19 = insertvalue %Range %18, i64 %17, 0
  %20 = insertvalue %Range %19, i64 -1, 1
  %21 = insertvalue %Range %20, i64 0, 2
  %22 = extractvalue %Range %21, 0
  %23 = extractvalue %Range %21, 1
  %24 = extractvalue %Range %21, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %25 = icmp sgt i64 %23, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %22, %preheader__1 ], [ %34, %exiting__1 ]
  %26 = icmp sle i64 %__qsVar2__idxTimeSlice__, %24
  %27 = icmp sge i64 %__qsVar2__idxTimeSlice__, %24
  %28 = select i1 %25, i1 %26, i1 %27
  br i1 %28, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %29 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %30 = call %Callable* @__quantum__rt__callable_copy(%Callable* %29, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %30, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %30)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Array* }*
  %33 = getelementptr { %Array* }, { %Array* }* %32, i64 0, i32 0
  store %Array* %qubits, %Array** %33
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %29, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %30, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %34 = add i64 %__qsVar2__idxTimeSlice__, %23
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %3, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %trotterStepSize = load double, double* %1
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %trotterOrder = load i64, i64* %2
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %maxTime = load double, double* %3
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 1)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %13, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i64 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 1)
  %16 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %qubits = load %Array*, %Array** %16
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %17 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %17)
  %18 = sitofp i64 %nTimeSlices to double
  %resizedTrotterStepSize = fdiv double %maxTime, %18
  %19 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %27, %exiting__1 ]
  %20 = icmp sle i64 %idxTimeSlice, %19
  br i1 %20, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %21 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %21, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %22, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %24 = bitcast %Tuple* %23 to { %Array*, %Array* }*
  %25 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %24, i64 0, i32 0
  %26 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %24, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %25
  store %Array* %qubits, %Array** %26
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %23, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %22, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %trotterStepSize = load double, double* %1
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %trotterOrder = load i64, i64* %2
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %maxTime = load double, double* %3
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 1)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  %10 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %13, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i64 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 1)
  %16 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %qubits = load %Array*, %Array** %16
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %17 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %17)
  %18 = sitofp i64 %__qsVar0__nTimeSlices__ to double
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %18
  %19 = sub i64 %__qsVar0__nTimeSlices__, 1
  %20 = sub i64 %19, 0
  %21 = udiv i64 %20, 1
  %22 = mul i64 1, %21
  %23 = add i64 0, %22
  %24 = load %Range, %Range* @EmptyRange
  %25 = insertvalue %Range %24, i64 %23, 0
  %26 = insertvalue %Range %25, i64 -1, 1
  %27 = insertvalue %Range %26, i64 0, 2
  %28 = extractvalue %Range %27, 0
  %29 = extractvalue %Range %27, 1
  %30 = extractvalue %Range %27, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %31 = icmp sgt i64 %29, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %28, %preheader__1 ], [ %41, %exiting__1 ]
  %32 = icmp sle i64 %__qsVar2__idxTimeSlice__, %30
  %33 = icmp sge i64 %__qsVar2__idxTimeSlice__, %30
  %34 = select i1 %31, i1 %32, i1 %33
  br i1 %34, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %35 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %38 = bitcast %Tuple* %37 to { %Array*, %Array* }*
  %39 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %38, i64 0, i32 0
  %40 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %38, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %39
  store %Array* %qubits, %Array** %40
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %35, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %36, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i64 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %41 = add i64 %__qsVar2__idxTimeSlice__, %29
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %6 = load i64, i64* %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__body({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %6 = load i64, i64* %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__adj({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__31__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 1
  %2 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %3 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %4 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %3, i64 0, i32 0
  %5 = load i64, i64* %4
  %6 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %3, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %3, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %12 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %2, { { %Callable* }*, { i64, %Callable* }* }** %12
  store i64 %5, i64* %13
  store double %7, double* %14
  store %Array* %9, %Array** %15
  %16 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__31__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 1
  %2 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %3 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %4 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %3, i64 0, i32 0
  %5 = load i64, i64* %4
  %6 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %3, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %3, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %12 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %2, { { %Callable* }*, { i64, %Callable* }* }** %12
  store i64 %5, i64* %13
  store double %7, double* %14
  store %Array* %9, %Array** %15
  %16 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__31__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, double, %Array* }*, { i64, double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 1
  %7 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %6
  %8 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %4, i64 0, i32 0
  %9 = load i64, i64* %8
  %10 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %4, i64 0, i32 1
  %11 = load double, double* %10
  %12 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %4, i64 0, i32 2
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %16 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 2
  %19 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %7, { { %Callable* }*, { i64, %Callable* }* }** %16
  store i64 %9, i64* %17
  store double %11, double* %18
  store %Array* %13, %Array** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %22 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %23
  %24 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__31__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, double, %Array* }*, { i64, double, %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 1
  %7 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %6
  %8 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %4, i64 0, i32 0
  %9 = load i64, i64* %8
  %10 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %4, i64 0, i32 1
  %11 = load double, double* %10
  %12 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %4, i64 0, i32 2
  %13 = load %Array*, %Array** %12
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %16 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 2
  %19 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %7, { { %Callable* }*, { i64, %Callable* }* }** %16
  store i64 %9, i64* %17
  store double %11, double* %18
  store %Array* %13, %Array** %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %22 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i64 0, i32 1
  store %Array* %3, %Array** %22
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %23
  %24 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i64 0, i32 0
  %25 = load %Callable*, %Callable** %24
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %26, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i64 -1)
  ret void
}

define void @MemoryManagement__20__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 1
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i64 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i64 %count-change)
  %10 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i64 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__20__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i64 0, i32 1
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  %8 = load %Callable*, %Callable** %7
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %8, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i64 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 %count-change)
  %10 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i64 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10
  %12 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %11, i64 0, i32 1
  %13 = load %Callable*, %Callable** %12
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %13, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i64 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Lifted__PartialApplication__32__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr { %Array* }, { %Array* }* %3, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr { double, %Array* }, { double, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { double, %Array* }, { double, %Array* }* %7, i64 0, i32 1
  store double %2, double* %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__32__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr { %Array* }, { %Array* }* %3, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr { double, %Array* }, { double, %Array* }* %7, i64 0, i32 0
  %9 = getelementptr { double, %Array* }, { double, %Array* }* %7, i64 0, i32 1
  store double %2, double* %8
  store %Array* %5, %Array** %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__32__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr { %Callable*, double }, { %Callable*, double }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 1
  store double %7, double* %10
  store %Array* %4, %Array** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { double, %Array* }* %9, { double, %Array* }** %15
  %16 = getelementptr { %Callable*, double }, { %Callable*, double }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__32__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr { %Callable*, double }, { %Callable*, double }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, %Array* }, { double, %Array* }* %9, i64 0, i32 1
  store double %7, double* %10
  store %Array* %4, %Array** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { double, %Array* }* %9, { double, %Array* }** %15
  %16 = getelementptr { %Callable*, double }, { %Callable*, double }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @MemoryManagement__21__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__21__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %nQubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = trunc i64 %nQubits to i32
  %10 = call fp128 @llvm.powi.f128(fp128 0xL0000000000000000C000000000000000, i32 %9)
  %11 = fptosi fp128 %10 to i64
  %12 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___9035a87fe93444128b0caf8bebcb3c54_Padded__body(i64 %11, { double, double }* %12, %Array* %coefficients)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 1)
  %22 = icmp sgt i64 %nQubits, 1
  %23 = sub i64 %nQubits, 1
  %24 = load %Range, %Range* @EmptyRange
  %25 = insertvalue %Range %24, i64 1, 0
  %26 = insertvalue %Range %25, i64 1, 1
  %27 = insertvalue %Range %26, i64 %23, 2
  %28 = load %Range, %Range* @EmptyRange
  %29 = insertvalue %Range %28, i64 1, 0
  %30 = insertvalue %Range %29, i64 1, 1
  %31 = insertvalue %Range %30, i64 0, 2
  %rngControl = select i1 %22, %Range %27, %Range %31
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Range, i64 }*
  %34 = getelementptr { %Range, i64 }, { %Range, i64 }* %33, i64 0, i32 0
  %35 = getelementptr { %Range, i64 }, { %Range, i64 }* %33, i64 0, i32 1
  store %Range %rngControl, %Range* %34
  store i64 0, i64* %35
  %plan = call %Array* @Microsoft__Quantum__Preparation____QsRef2__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficientsPadded, { %Range, i64 }* %33)
  %36 = call i64 @__quantum__rt__array_get_size_1d(%Array* %plan)
  %37 = sub i64 %36, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %43, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %38)
  %41 = bitcast i8* %40 to %Callable**
  %42 = load %Callable*, %Callable** %41
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %42, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %42, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %43 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i64 1)
  %unprepare = call %Callable* @Microsoft__Quantum__Canon___dd0d143d23734036a0aad12f8847948f_BoundCA__body(%Array* %plan)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unprepare, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i64 1)
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %45 = bitcast %Tuple* %44 to { %Callable*, %Callable* }*
  %46 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %45, i64 0, i32 0
  %47 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %45, i64 0, i32 1
  %48 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %49 = call %Callable* @__quantum__rt__callable_copy(%Callable* %unprepare, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %49, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %49)
  store %Callable* %48, %Callable** %46
  store %Callable* %49, %Callable** %47
  %50 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__33, [2 x void (%Tuple*, i64)*]* @MemoryManagement__22, %Tuple* %44)
  %51 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %52)
  %55 = bitcast i8* %54 to { double, double }**
  %56 = load { double, double }*, { double, double }** %55
  %57 = bitcast { double, double }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i64 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  %59 = sub i64 %13, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %66, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %60)
  %63 = bitcast i8* %62 to { double, double }**
  %64 = load { double, double }*, { double, double }** %63
  %65 = bitcast { double, double }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %65, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %66 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i64 -1)
  %67 = sub i64 %36, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %68 = phi i64 [ 0, %exit__5 ], [ %73, %exiting__6 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %68)
  %71 = bitcast i8* %70 to %Callable**
  %72 = load %Callable*, %Callable** %71
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %72, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %72, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %73 = add i64 %68, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %unprepare, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i64 -1)
  %74 = bitcast { double, double }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i64 -1)
  %75 = sub i64 %13, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %76 = phi i64 [ 0, %exit__6 ], [ %82, %exiting__7 ]
  %77 = icmp sle i64 %76, %75
  br i1 %77, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %76)
  %79 = bitcast i8* %78 to { double, double }**
  %80 = load { double, double }*, { double, double }** %79
  %81 = bitcast { double, double }* %80 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %82 = add i64 %76, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i64 -1)
  %83 = sub i64 %36, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %84 = phi i64 [ 0, %exit__7 ], [ %89, %exiting__8 ]
  %85 = icmp sle i64 %84, %83
  br i1 %85, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %84)
  %87 = bitcast i8* %86 to %Callable**
  %88 = load %Callable*, %Callable** %87
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %88, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %88, i64 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %89 = add i64 %84, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %plan, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %unprepare, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unprepare, i64 -1)
  ret %Callable* %50
}

define %Array* @Microsoft__Quantum__Preparation____QsRef2__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficients, { %Range, i64 }* %0) {
entry:
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %10 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 0
  %rngControl = load %Range, %Range* %10
  %11 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %11
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %plan = alloca %Array*
  store %Array* %12, %Array** %plan
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i64 1)
  %13 = call { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef2__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients)
  %14 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i64 0, i32 0
  %disentanglingY = load %Array*, %Array** %14
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i64 1)
  %15 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i64 0, i32 1
  %disentanglingZ = load %Array*, %Array** %15
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i64 1)
  %16 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i64 0, i32 2
  %newCoefficients = load %Array*, %Array** %16
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newCoefficients)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %19)
  %22 = bitcast i8* %21 to { double, double }**
  %23 = load { double, double }*, { double, double }** %22
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i64 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i64 1)
  %26 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingZ)
  br i1 %26, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 0)
  %29 = bitcast i8* %28 to %Callable**
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %32 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 0
  %33 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 1
  %34 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 2
  %35 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 3
  %36 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 4
  %37 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 5
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %39 = load i2, i2* @PauliZ
  store %Callable* %38, %Callable** %32
  store double %tolerance, double* %33
  store %Array* %disentanglingZ, %Array** %34
  store i2 %39, i2* %35
  store %Range %rngControl, %Range* %36
  store i64 %idxTarget, i64* %37
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__38, [2 x void (%Tuple*, i64)*]* @MemoryManagement__24, %Tuple* %30)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i64 1)
  store %Callable* %40, %Callable** %29
  %41 = call %Array* @__quantum__rt__array_concatenate(%Array* %12, %Array* %27)
  %42 = call i64 @__quantum__rt__array_get_size_1d(%Array* %41)
  %43 = sub i64 %42, 1
  br label %header__3

continue__1:                                      ; preds = %exit__6, %exit__2
  %44 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingY)
  br i1 %44, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %45 = load %Array*, %Array** %plan
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to %Callable**
  %49 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %50 = bitcast %Tuple* %49 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %51 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i64 0, i32 0
  %52 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i64 0, i32 1
  %53 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i64 0, i32 2
  %54 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i64 0, i32 3
  %55 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i64 0, i32 4
  %56 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i64 0, i32 5
  %57 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %58 = load i2, i2* @PauliY
  store %Callable* %57, %Callable** %51
  store double %tolerance, double* %52
  store %Array* %disentanglingY, %Array** %53
  store i2 %58, i2* %54
  store %Range %rngControl, %Range* %55
  store i64 %idxTarget, i64* %56
  %59 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__39, [2 x void (%Tuple*, i64)*]* @MemoryManagement__24, %Tuple* %49)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i64 1)
  store %Callable* %59, %Callable** %48
  %60 = call %Array* @__quantum__rt__array_concatenate(%Array* %45, %Array* %46)
  %61 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %62 = sub i64 %61, 1
  br label %header__7

continue__2:                                      ; preds = %exit__12, %continue__1
  %63 = call i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rngControl)
  br i1 %63, label %then0__3, label %test1__1

then0__3:                                         ; preds = %continue__2
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 0)
  %65 = bitcast i8* %64 to { double, double }**
  %66 = load { double, double }*, { double, double }** %65
  %67 = getelementptr { double, double }, { double, double }* %66, i64 0, i32 0
  %abs = load double, double* %67
  %68 = getelementptr { double, double }, { double, double }* %66, i64 0, i32 1
  %arg = load double, double* %68
  %69 = call double @Microsoft__Quantum__Math__AbsD__body(double %arg)
  %70 = fcmp ogt double %69, %tolerance
  br i1 %70, label %then0__4, label %continue__4

then0__4:                                         ; preds = %then0__3
  %71 = load %Array*, %Array** %plan
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to %Callable**
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { %Callable*, double, i64 }*
  %77 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %76, i64 0, i32 0
  %78 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %76, i64 0, i32 1
  %79 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %76, i64 0, i32 2
  %80 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep__, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %81 = fmul double -1.000000e+00, %arg
  store %Callable* %80, %Callable** %77
  store double %81, double* %78
  store i64 %idxTarget, i64* %79
  %82 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__40, [2 x void (%Tuple*, i64)*]* @MemoryManagement__25, %Tuple* %75)
  store %Callable* %82, %Callable** %74
  %83 = call %Array* @__quantum__rt__array_concatenate(%Array* %71, %Array* %72)
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %83)
  %85 = sub i64 %84, 1
  br label %header__13

continue__4:                                      ; preds = %exit__18, %then0__3
  br label %continue__3

test1__1:                                         ; preds = %continue__2
  %86 = call i1 @Microsoft__Quantum__Canon____QsRef2__AnyOutsideToleranceCP____body(double %tolerance, %Array* %newCoefficients)
  br i1 %86, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %87 = extractvalue %Range %rngControl, 0
  %88 = add i64 %87, 1
  %89 = extractvalue %Range %rngControl, 1
  %90 = extractvalue %Range %rngControl, 2
  %91 = load %Range, %Range* @EmptyRange
  %92 = insertvalue %Range %91, i64 %88, 0
  %93 = insertvalue %Range %92, i64 %89, 1
  %newControl = insertvalue %Range %93, i64 %90, 2
  %newTarget = extractvalue %Range %rngControl, 0
  %94 = load %Array*, %Array** %plan
  %95 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %96 = bitcast %Tuple* %95 to { %Range, i64 }*
  %97 = getelementptr { %Range, i64 }, { %Range, i64 }* %96, i64 0, i32 0
  %98 = getelementptr { %Range, i64 }, { %Range, i64 }* %96, i64 0, i32 1
  store %Range %newControl, %Range* %97
  store i64 %newTarget, i64* %98
  %99 = call %Array* @Microsoft__Quantum__Preparation____QsRef2__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %newCoefficients, { %Range, i64 }* %96)
  %100 = call %Array* @__quantum__rt__array_concatenate(%Array* %94, %Array* %99)
  %101 = call i64 @__quantum__rt__array_get_size_1d(%Array* %100)
  %102 = sub i64 %101, 1
  br label %header__19

continue__3:                                      ; preds = %exit__24, %test1__1, %continue__4
  %103 = load %Array*, %Array** %plan
  %104 = sub i64 %1, 1
  br label %header__25

header__3:                                        ; preds = %exiting__3, %then0__1
  %105 = phi i64 [ 0, %then0__1 ], [ %110, %exiting__3 ]
  %106 = icmp sle i64 %105, %43
  br i1 %106, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %105)
  %108 = bitcast i8* %107 to %Callable**
  %109 = load %Callable*, %Callable** %108
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %109, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %109, i64 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %110 = add i64 %105, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 1)
  %111 = sub i64 %42, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %112 = phi i64 [ 0, %exit__3 ], [ %117, %exiting__4 ]
  %113 = icmp sle i64 %112, %111
  br i1 %113, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %112)
  %115 = bitcast i8* %114 to %Callable**
  %116 = load %Callable*, %Callable** %115
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %116, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %116, i64 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %117 = add i64 %112, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i64 -1)
  store %Array* %41, %Array** %plan
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %118 = phi i64 [ 0, %exit__4 ], [ %123, %exiting__5 ]
  %119 = icmp sle i64 %118, 0
  br i1 %119, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %118)
  %121 = bitcast i8* %120 to %Callable**
  %122 = load %Callable*, %Callable** %121
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %122, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %122, i64 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %123 = add i64 %118, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i64 -1)
  %124 = sub i64 %42, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %125 = phi i64 [ 0, %exit__5 ], [ %130, %exiting__6 ]
  %126 = icmp sle i64 %125, %124
  br i1 %126, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %125)
  %128 = bitcast i8* %127 to %Callable**
  %129 = load %Callable*, %Callable** %128
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %129, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %129, i64 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %130 = add i64 %125, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i64 -1)
  br label %continue__1

header__7:                                        ; preds = %exiting__7, %then0__2
  %131 = phi i64 [ 0, %then0__2 ], [ %136, %exiting__7 ]
  %132 = icmp sle i64 %131, %62
  br i1 %132, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %131)
  %134 = bitcast i8* %133 to %Callable**
  %135 = load %Callable*, %Callable** %134
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %135, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %135, i64 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %136 = add i64 %131, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i64 1)
  %137 = sub i64 %61, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %138 = phi i64 [ 0, %exit__7 ], [ %143, %exiting__8 ]
  %139 = icmp sle i64 %138, %137
  br i1 %139, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %138)
  %141 = bitcast i8* %140 to %Callable**
  %142 = load %Callable*, %Callable** %141
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %142, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %142, i64 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %143 = add i64 %138, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i64 1)
  %144 = call i64 @__quantum__rt__array_get_size_1d(%Array* %45)
  %145 = sub i64 %144, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %146 = phi i64 [ 0, %exit__8 ], [ %151, %exiting__9 ]
  %147 = icmp sle i64 %146, %145
  br i1 %147, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %146)
  %149 = bitcast i8* %148 to %Callable**
  %150 = load %Callable*, %Callable** %149
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %150, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %150, i64 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %151 = add i64 %146, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i64 -1)
  store %Array* %60, %Array** %plan
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %152 = phi i64 [ 0, %exit__9 ], [ %157, %exiting__10 ]
  %153 = icmp sle i64 %152, 0
  br i1 %153, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 %152)
  %155 = bitcast i8* %154 to %Callable**
  %156 = load %Callable*, %Callable** %155
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %156, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i64 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %152, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i64 -1)
  %158 = sub i64 %61, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %159 = phi i64 [ 0, %exit__10 ], [ %164, %exiting__11 ]
  %160 = icmp sle i64 %159, %158
  br i1 %160, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %159)
  %162 = bitcast i8* %161 to %Callable**
  %163 = load %Callable*, %Callable** %162
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %163, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %163, i64 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %164 = add i64 %159, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i64 -1)
  %165 = sub i64 %144, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %166 = phi i64 [ 0, %exit__11 ], [ %171, %exiting__12 ]
  %167 = icmp sle i64 %166, %165
  br i1 %167, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %166)
  %169 = bitcast i8* %168 to %Callable**
  %170 = load %Callable*, %Callable** %169
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %170, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %170, i64 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %171 = add i64 %166, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i64 -1)
  br label %continue__2

header__13:                                       ; preds = %exiting__13, %then0__4
  %172 = phi i64 [ 0, %then0__4 ], [ %177, %exiting__13 ]
  %173 = icmp sle i64 %172, %85
  br i1 %173, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %172)
  %175 = bitcast i8* %174 to %Callable**
  %176 = load %Callable*, %Callable** %175
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %176, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %176, i64 1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %177 = add i64 %172, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i64 1)
  %178 = sub i64 %84, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %179 = phi i64 [ 0, %exit__13 ], [ %184, %exiting__14 ]
  %180 = icmp sle i64 %179, %178
  br i1 %180, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %179)
  %182 = bitcast i8* %181 to %Callable**
  %183 = load %Callable*, %Callable** %182
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %183, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %183, i64 1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %184 = add i64 %179, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i64 1)
  %185 = call i64 @__quantum__rt__array_get_size_1d(%Array* %71)
  %186 = sub i64 %185, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %187 = phi i64 [ 0, %exit__14 ], [ %192, %exiting__15 ]
  %188 = icmp sle i64 %187, %186
  br i1 %188, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %187)
  %190 = bitcast i8* %189 to %Callable**
  %191 = load %Callable*, %Callable** %190
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %191, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %191, i64 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %192 = add i64 %187, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i64 -1)
  store %Array* %83, %Array** %plan
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %193 = phi i64 [ 0, %exit__15 ], [ %198, %exiting__16 ]
  %194 = icmp sle i64 %193, 0
  br i1 %194, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %195 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 %193)
  %196 = bitcast i8* %195 to %Callable**
  %197 = load %Callable*, %Callable** %196
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %197, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %197, i64 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %198 = add i64 %193, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i64 -1)
  %199 = sub i64 %84, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %200 = phi i64 [ 0, %exit__16 ], [ %205, %exiting__17 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %200)
  %203 = bitcast i8* %202 to %Callable**
  %204 = load %Callable*, %Callable** %203
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %204, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %204, i64 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %205 = add i64 %200, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i64 -1)
  %206 = sub i64 %185, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %207 = phi i64 [ 0, %exit__17 ], [ %212, %exiting__18 ]
  %208 = icmp sle i64 %207, %206
  br i1 %208, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %207)
  %210 = bitcast i8* %209 to %Callable**
  %211 = load %Callable*, %Callable** %210
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %211, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %211, i64 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %212 = add i64 %207, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i64 -1)
  br label %continue__4

header__19:                                       ; preds = %exiting__19, %then1__1
  %213 = phi i64 [ 0, %then1__1 ], [ %218, %exiting__19 ]
  %214 = icmp sle i64 %213, %102
  br i1 %214, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %213)
  %216 = bitcast i8* %215 to %Callable**
  %217 = load %Callable*, %Callable** %216
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %217, i64 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %217, i64 1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %218 = add i64 %213, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i64 1)
  %219 = sub i64 %101, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %220 = phi i64 [ 0, %exit__19 ], [ %225, %exiting__20 ]
  %221 = icmp sle i64 %220, %219
  br i1 %221, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %222 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %220)
  %223 = bitcast i8* %222 to %Callable**
  %224 = load %Callable*, %Callable** %223
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %224, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %224, i64 1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %225 = add i64 %220, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i64 1)
  %226 = call i64 @__quantum__rt__array_get_size_1d(%Array* %94)
  %227 = sub i64 %226, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %228 = phi i64 [ 0, %exit__20 ], [ %233, %exiting__21 ]
  %229 = icmp sle i64 %228, %227
  br i1 %229, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %230 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 %228)
  %231 = bitcast i8* %230 to %Callable**
  %232 = load %Callable*, %Callable** %231
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %232, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %232, i64 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %233 = add i64 %228, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %94, i64 -1)
  store %Array* %100, %Array** %plan
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i64 -1)
  %234 = call i64 @__quantum__rt__array_get_size_1d(%Array* %99)
  %235 = sub i64 %234, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %236 = phi i64 [ 0, %exit__21 ], [ %241, %exiting__22 ]
  %237 = icmp sle i64 %236, %235
  br i1 %237, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %238 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %236)
  %239 = bitcast i8* %238 to %Callable**
  %240 = load %Callable*, %Callable** %239
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %240, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %240, i64 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %241 = add i64 %236, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i64 -1)
  %242 = sub i64 %101, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %243 = phi i64 [ 0, %exit__22 ], [ %248, %exiting__23 ]
  %244 = icmp sle i64 %243, %242
  br i1 %244, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %245 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %243)
  %246 = bitcast i8* %245 to %Callable**
  %247 = load %Callable*, %Callable** %246
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %247, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %247, i64 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %248 = add i64 %243, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i64 -1)
  %249 = sub i64 %226, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %250 = phi i64 [ 0, %exit__23 ], [ %255, %exiting__24 ]
  %251 = icmp sle i64 %250, %249
  br i1 %251, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %252 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 %250)
  %253 = bitcast i8* %252 to %Callable**
  %254 = load %Callable*, %Callable** %253
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %254, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %254, i64 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %255 = add i64 %250, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i64 -1)
  br label %continue__3

header__25:                                       ; preds = %exiting__25, %continue__3
  %256 = phi i64 [ 0, %continue__3 ], [ %262, %exiting__25 ]
  %257 = icmp sle i64 %256, %104
  br i1 %257, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %258 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %256)
  %259 = bitcast i8* %258 to { double, double }**
  %260 = load { double, double }*, { double, double }** %259
  %261 = bitcast { double, double }* %260 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %261, i64 -1)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %262 = add i64 %256, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  %263 = call i64 @__quantum__rt__array_get_size_1d(%Array* %103)
  %264 = sub i64 %263, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %265 = phi i64 [ 0, %exit__25 ], [ %270, %exiting__26 ]
  %266 = icmp sle i64 %265, %264
  br i1 %266, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %267 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 %265)
  %268 = bitcast i8* %267 to %Callable**
  %269 = load %Callable*, %Callable** %268
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %269, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %269, i64 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %270 = add i64 %265, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i64 -1)
  %271 = sub i64 %17, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %272 = phi i64 [ 0, %exit__26 ], [ %278, %exiting__27 ]
  %273 = icmp sle i64 %272, %271
  br i1 %273, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %274 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %272)
  %275 = bitcast i8* %274 to { double, double }**
  %276 = load { double, double }*, { double, double }** %275
  %277 = bitcast { double, double }* %276 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %277, i64 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %278 = add i64 %272, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i64 -1)
  %279 = sub i64 %17, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %280 = phi i64 [ 0, %exit__27 ], [ %286, %exiting__28 ]
  %281 = icmp sle i64 %280, %279
  br i1 %281, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %282 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %280)
  %283 = bitcast i8* %282 to { double, double }**
  %284 = load { double, double }*, { double, double }** %283
  %285 = bitcast { double, double }* %284 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %285, i64 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %286 = add i64 %280, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoefficients, i64 -1)
  %287 = bitcast { %Array*, %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %287, i64 -1)
  ret %Array* %103
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Callable*, %Callable** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____body(%Callable* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Callable*, %Callable** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____adj(%Callable* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctl(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctladj(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define void @Lifted__PartialApplication__33__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Callable*, %Callable** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Callable*, { %Array* }* }*
  %8 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %7, i64 0, i32 1
  store %Callable* %2, %Callable** %8
  store { %Array* }* %5, { %Array* }** %9
  %10 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__33__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 1
  %2 = load %Callable*, %Callable** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Callable*, { %Array* }* }*
  %8 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %7, i64 0, i32 1
  store %Callable* %2, %Callable** %8
  store { %Array* }* %5, { %Array* }** %9
  %10 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__33__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i64 0, i32 1
  %7 = load %Callable*, %Callable** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i64 0, i32 1
  store %Callable* %7, %Callable** %10
  store { %Array* }* %4, { %Array* }** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15
  %16 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__33__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i64 0, i32 1
  %7 = load %Callable*, %Callable** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i64 0, i32 1
  store %Callable* %7, %Callable** %10
  store { %Array* }* %4, { %Array* }** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15
  %16 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @MemoryManagement__22__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__22__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i64 0, i32 1
  %4 = load %Callable*, %Callable** %3
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %4, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, double }*
  %5 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %7, %Callable** %5
  store double 0.000000e+00, double* %6
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__34, [2 x void (%Tuple*, i64)*]* @MemoryManagement__23, %Tuple* %3)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___378d9e6fd3cd47feb23f68a348476bf6_Compose__body(%Callable* %8, %Callable* %9)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___fef367af39f04025a5a38bae6685a492_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i64 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficientsAsComplexPolar, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %9, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i64 -1)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Math__ComplexPolar__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr { double, double }, { double, double }* %0, i64 0, i32 0
  %2 = getelementptr { double, double }, { double, double }* %0, i64 0, i32 1
  %3 = load double, double* %1
  %4 = load double, double* %2
  %5 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %7 = getelementptr { { double, double }* }, { { double, double }* }* %6, i64 0, i32 0
  store { double, double }* %5, { double, double }** %7
  ret void
}

define void @Lifted__PartialApplication__34__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 1
  %5 = load double, double* %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 0
  %9 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 1
  store double %2, double* %8
  store double %5, double* %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @MemoryManagement__23__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__23__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr { %Callable*, double }, { %Callable*, double }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Math__AbsD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = call double @Microsoft__Quantum__Math__AbsD__body(double %2)
  %4 = bitcast %Tuple* %result-tuple to { double }*
  %5 = getelementptr { double }, { double }* %4, i64 0, i32 0
  store double %3, double* %5
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %11, %Tuple* null)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, double }*
  %5 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %7, %Callable** %5
  store double 0.000000e+00, double* %6
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__35, [2 x void (%Tuple*, i64)*]* @MemoryManagement__23, %Tuple* %3)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___378d9e6fd3cd47feb23f68a348476bf6_Compose__body(%Callable* %8, %Callable* %9)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___fef367af39f04025a5a38bae6685a492_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %__qsVar0__coefficientsAsComplexPolar__, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %8, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %9, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %10, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i64 -1)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__35__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 1
  %5 = load double, double* %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 0
  %9 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 1
  store double %2, double* %8
  store double %5, double* %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  %14 = call %Callable* @__quantum__rt__callable_copy(%Callable* %13, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %14, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %14)
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %11, %Tuple* null)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %14, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 0
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 1
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %11, %Callable** %9
  store double 0.000000e+00, double* %10
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__36, [2 x void (%Tuple*, i64)*]* @MemoryManagement__23, %Tuple* %7)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___378d9e6fd3cd47feb23f68a348476bf6_Compose__body(%Callable* %12, %Callable* %13)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___fef367af39f04025a5a38bae6685a492_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i64 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, %Array*, { %Array* }* }*
  %26 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 1
  %28 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 2
  store double %tolerance, double* %26
  store %Array* %coefficientsAsComplexPolar, %Array** %27
  store { %Array* }* %qubits, { %Array* }** %28
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  %29 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %14, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i64 -1)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__36__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 1
  %5 = load double, double* %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 0
  %9 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 1
  store double %2, double* %8
  store double %5, double* %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %12 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12
  %13 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %14 = load %Array*, %Array** %13
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 1)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %21
  store { %Array* }* %qubits, { %Array* }** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %17, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 0
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 1
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  store %Callable* %11, %Callable** %9
  store double 0.000000e+00, double* %10
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__37, [2 x void (%Tuple*, i64)*]* @MemoryManagement__23, %Tuple* %7)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, [2 x void (%Tuple*, i64)*]* null, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___378d9e6fd3cd47feb23f68a348476bf6_Compose__body(%Callable* %12, %Callable* %13)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___fef367af39f04025a5a38bae6685a492_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, %Array*, { %Array* }* }*
  %26 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 1
  %28 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 2
  store double %tolerance, double* %26
  store %Array* %__qsVar0__coefficientsAsComplexPolar__, %Array** %27
  store { %Array* }* %qubits, { %Array* }** %28
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  %29 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %13, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %14, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i64 -1)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %43, i64 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__37__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 1
  %5 = load double, double* %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 0
  %9 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 1
  store double %2, double* %8
  store double %5, double* %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %12 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12
  %13 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %14 = load %Array*, %Array** %13
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 1)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %21
  store { %Array* }* %qubits, { %Array* }** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %17, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____body(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = load i2, i2* @PauliI
  store i2 %2, i2* %1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6
  store %Qubit* %7, %Qubit** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %angle, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____adj(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = load i2, i2* @PauliI
  store i2 %2, i2* %1
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6
  store %Qubit* %7, %Qubit** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %angle, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctl(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %angle = load double, double* %1
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %register = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %5 = bitcast i8* %4 to i2*
  %6 = load i2, i2* @PauliI
  store i2 %6, i2* %5
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10
  store %Qubit* %11, %Qubit** %8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, double, %Array* }*
  %14 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 2
  store %Array* %paulis, %Array** %14
  store double %angle, double* %15
  store %Array* %qubits, %Array** %16
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %13)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctladj(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %angle = load double, double* %1
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %register = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %paulis = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %5 = bitcast i8* %4 to i2*
  %6 = load i2, i2* @PauliI
  store i2 %6, i2* %5
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 1)
  %qubits = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10
  store %Qubit* %11, %Qubit** %8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, double, %Array* }*
  %14 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 2
  store %Array* %paulis, %Array** %14
  store double %angle, double* %15
  store %Array* %qubits, %Array** %16
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %13)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____body(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr { %Array* }, { %Array* }* %4, i64 0, i32 0
  store %Array* %1, %Array** %5
  call void @__quantum__rt__callable_invoke(%Callable* %bareOp, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____adj(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %3, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  store %Array* %1, %Array** %6
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %4, %Tuple* null)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %3, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctl(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %bareOp = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 1)
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 0
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %9
  store %Array* %4, %Array** %10
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyToLittleEndian____ctladj(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %bareOp = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 1)
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 0
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 1
  store %Array* %__controlQubits__, %Array** %9
  store %Array* %4, %Array** %10
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %bareOp, i64 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %6, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i64 -1)
  ret void
}

define { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %a0, { double, double }* %a1) {
entry:
  %0 = bitcast { double, double }* %a0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 1)
  %1 = bitcast { double, double }* %a1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 1)
  %abs0 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a0)
  %abs1 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a1)
  %arg0 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a0)
  %arg1 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a1)
  %2 = fmul double %abs0, %abs0
  %3 = fmul double %abs1, %abs1
  %d = fadd double %2, %3
  %r = call double @__quantum__qis__sqrt__body(double %d)
  %4 = fadd double %arg0, %arg1
  %t = fmul double 5.000000e-01, %4
  %phi = fsub double %arg1, %arg0
  %5 = call double @__quantum__qis__arctan2__body(double %abs1, double %abs0)
  %theta = fmul double 2.000000e+00, %5
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, double, double }* getelementptr ({ { double, double }*, double, double }, { { double, double }*, double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { double, double }*, double, double }*
  %8 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i64 0, i32 0
  %9 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i64 0, i32 1
  %10 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i64 0, i32 2
  %11 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %r, double %t)
  store { double, double }* %11, { double, double }** %8
  store double %phi, double* %9
  store double %theta, double* %10
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i64 -1)
  ret { { double, double }*, double, double }* %7
}

define { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef2__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = udiv i64 %0, 2
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %9)
  %11 = sub i64 %9, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to double*
  store double 0.000000e+00, double* %15
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %disentanglingZ = alloca %Array*
  store %Array* %10, %Array** %disentanglingZ
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 1)
  %17 = udiv i64 %0, 2
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %17)
  %19 = sub i64 %17, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %24, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %20)
  %23 = bitcast i8* %22 to double*
  store double 0.000000e+00, double* %23
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %24 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %disentanglingY = alloca %Array*
  store %Array* %18, %Array** %disentanglingY
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i64 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 1)
  %25 = udiv i64 %0, 2
  %26 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %25)
  %27 = sub i64 %25, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %28 = phi i64 [ 0, %exit__3 ], [ %36, %exiting__4 ]
  %29 = icmp sle i64 %28, %27
  br i1 %29, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %31 = bitcast %Tuple* %30 to { double, double }*
  %32 = getelementptr { double, double }, { double, double }* %31, i64 0, i32 0
  %33 = getelementptr { double, double }, { double, double }* %31, i64 0, i32 1
  store double 0.000000e+00, double* %32
  store double 0.000000e+00, double* %33
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %28)
  %35 = bitcast i8* %34 to { double, double }**
  store { double, double }* %31, { double, double }** %35
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %36 = add i64 %28, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %newCoefficients = alloca %Array*
  store %Array* %26, %Array** %newCoefficients
  %37 = sub i64 %25, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %38 = phi i64 [ 0, %exit__4 ], [ %44, %exiting__5 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i64 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %44 = add i64 %38, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i64 1)
  %45 = sub i64 %25, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %46 = phi i64 [ 0, %exit__5 ], [ %52, %exiting__6 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i64 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %52 = add i64 %46, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i64 1)
  %53 = sub i64 %0, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__6
  br label %header__7

header__7:                                        ; preds = %exiting__7, %preheader__1
  %idxCoeff = phi i64 [ 0, %preheader__1 ], [ %92, %exiting__7 ]
  %54 = icmp sle i64 %idxCoeff, %53
  %55 = icmp sge i64 %idxCoeff, %53
  %56 = select i1 true, i1 %54, i1 %55
  br i1 %56, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %58 = bitcast i8* %57 to { double, double }**
  %59 = load { double, double }*, { double, double }** %58
  %60 = add i64 %idxCoeff, 1
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %60)
  %62 = bitcast i8* %61 to { double, double }**
  %63 = load { double, double }*, { double, double }** %62
  %64 = call { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %59, { double, double }* %63)
  %65 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %64, i64 0, i32 0
  %rt = load { double, double }*, { double, double }** %65
  %66 = bitcast { double, double }* %rt to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i64 1)
  %67 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %64, i64 0, i32 1
  %phi = load double, double* %67
  %68 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %64, i64 0, i32 2
  %theta = load double, double* %68
  %69 = load %Array*, %Array** %disentanglingZ
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i64 -1)
  %70 = call %Array* @__quantum__rt__array_copy(%Array* %69, i1 false)
  %71 = icmp ne %Array* %69, %70
  %72 = fmul double 5.000000e-01, %phi
  %73 = udiv i64 %idxCoeff, 2
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 %73)
  %75 = bitcast i8* %74 to double*
  store double %72, double* %75
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i64 1)
  store %Array* %70, %Array** %disentanglingZ
  %76 = load %Array*, %Array** %disentanglingY
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i64 -1)
  %77 = call %Array* @__quantum__rt__array_copy(%Array* %76, i1 false)
  %78 = icmp ne %Array* %76, %77
  %79 = fmul double 5.000000e-01, %theta
  %80 = udiv i64 %idxCoeff, 2
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 %80)
  %82 = bitcast i8* %81 to double*
  store double %79, double* %82
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i64 1)
  store %Array* %77, %Array** %disentanglingY
  %83 = load %Array*, %Array** %newCoefficients
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i64 -1)
  %84 = call %Array* @__quantum__rt__array_copy(%Array* %83, i1 false)
  %85 = icmp ne %Array* %83, %84
  %86 = udiv i64 %idxCoeff, 2
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %86)
  %88 = bitcast i8* %87 to { double, double }**
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i64 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i64 1)
  %89 = load { double, double }*, { double, double }** %88
  %90 = bitcast { double, double }* %89 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %90, i64 -1)
  br i1 %85, label %condContinue__1, label %condFalse__1

condFalse__1:                                     ; preds = %body__7
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i64 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %90, i64 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %body__7
  store { double, double }* %rt, { double, double }** %88
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %84, i64 1)
  store %Array* %84, %Array** %newCoefficients
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i64 -1)
  %91 = bitcast { { double, double }*, double, double }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %91, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %90, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i64 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %condContinue__1
  %92 = add i64 %idxCoeff, 2
  br label %header__7

exit__7:                                          ; preds = %header__7
  %93 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %94 = bitcast %Tuple* %93 to { %Array*, %Array*, %Array* }*
  %95 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i64 0, i32 0
  %96 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i64 0, i32 1
  %97 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %94, i64 0, i32 2
  %98 = load %Array*, %Array** %disentanglingY
  %99 = load %Array*, %Array** %disentanglingZ
  %100 = load %Array*, %Array** %newCoefficients
  store %Array* %98, %Array** %95
  store %Array* %99, %Array** %96
  store %Array* %100, %Array** %97
  %101 = sub i64 %0, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %102 = phi i64 [ 0, %exit__7 ], [ %108, %exiting__8 ]
  %103 = icmp sle i64 %102, %101
  br i1 %103, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %102)
  %105 = bitcast i8* %104 to { double, double }**
  %106 = load { double, double }*, { double, double }** %105
  %107 = bitcast { double, double }* %106 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %107, i64 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %108 = add i64 %102, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %99, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i64 -1)
  %109 = call i64 @__quantum__rt__array_get_size_1d(%Array* %100)
  %110 = sub i64 %109, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %111 = phi i64 [ 0, %exit__8 ], [ %117, %exiting__9 ]
  %112 = icmp sle i64 %111, %110
  br i1 %112, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %111)
  %114 = bitcast i8* %113 to { double, double }**
  %115 = load { double, double }*, { double, double }** %114
  %116 = bitcast { double, double }* %115 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i64 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %117 = add i64 %111, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i64 -1)
  %118 = sub i64 %25, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %119 = phi i64 [ 0, %exit__9 ], [ %125, %exiting__10 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %119)
  %122 = bitcast i8* %121 to { double, double }**
  %123 = load { double, double }*, { double, double }** %122
  %124 = bitcast { double, double }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %124, i64 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %125 = add i64 %119, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i64 -1)
  ret { %Array*, %Array*, %Array* }* %94
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____body(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____adj(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctl(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctladj(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__38__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 4
  %8 = load %Range, %Range* %7
  %9 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 5
  %10 = load i64, i64* %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 0
  %14 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 1
  store %Range %8, %Range* %13
  store i64 %10, i64* %14
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 2
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 3
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 4
  store double %2, double* %20
  store %Array* %4, %Array** %21
  store i2 %6, i2* %22
  store { %Range, i64 }* %12, { %Range, i64 }** %23
  store %Array* %17, %Array** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__38__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 4
  %8 = load %Range, %Range* %7
  %9 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 5
  %10 = load i64, i64* %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 0
  %14 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 1
  store %Range %8, %Range* %13
  store i64 %10, i64* %14
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 2
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 3
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 4
  store double %2, double* %20
  store %Array* %4, %Array** %21
  store i2 %6, i2* %22
  store { %Range, i64 }* %12, { %Range, i64 }** %23
  store %Array* %17, %Array** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__38__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 4
  %13 = load %Range, %Range* %12
  %14 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 5
  %15 = load i64, i64* %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 0
  %19 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 1
  store %Range %13, %Range* %18
  store i64 %15, i64* %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 3
  %26 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 4
  store double %7, double* %22
  store %Array* %9, %Array** %23
  store i2 %11, i2* %24
  store { %Range, i64 }* %17, { %Range, i64 }** %25
  store %Array* %4, %Array** %26
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 0
  %30 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 1
  store %Array* %3, %Array** %29
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30
  %31 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 0
  %32 = load %Callable*, %Callable** %31
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__38__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 4
  %13 = load %Range, %Range* %12
  %14 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 5
  %15 = load i64, i64* %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 0
  %19 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 1
  store %Range %13, %Range* %18
  store i64 %15, i64* %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 3
  %26 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 4
  store double %7, double* %22
  store %Array* %9, %Array** %23
  store i2 %11, i2* %24
  store { %Range, i64 }* %17, { %Range, i64 }** %25
  store %Array* %4, %Array** %26
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 0
  %30 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 1
  store %Array* %3, %Array** %29
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30
  %31 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 0
  %32 = load %Callable*, %Callable** %31
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i64 -1)
  ret void
}

define void @MemoryManagement__24__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__24__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Lifted__PartialApplication__39__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 4
  %8 = load %Range, %Range* %7
  %9 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 5
  %10 = load i64, i64* %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 0
  %14 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 1
  store %Range %8, %Range* %13
  store i64 %10, i64* %14
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 2
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 3
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 4
  store double %2, double* %20
  store %Array* %4, %Array** %21
  store i2 %6, i2* %22
  store { %Range, i64 }* %12, { %Range, i64 }** %23
  store %Array* %17, %Array** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__39__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 4
  %8 = load %Range, %Range* %7
  %9 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 5
  %10 = load i64, i64* %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 0
  %14 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 1
  store %Range %8, %Range* %13
  store i64 %10, i64* %14
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 2
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 3
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 4
  store double %2, double* %20
  store %Array* %4, %Array** %21
  store i2 %6, i2* %22
  store { %Range, i64 }* %12, { %Range, i64 }** %23
  store %Array* %17, %Array** %24
  %25 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %27, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__39__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 4
  %13 = load %Range, %Range* %12
  %14 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 5
  %15 = load i64, i64* %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 0
  %19 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 1
  store %Range %13, %Range* %18
  store i64 %15, i64* %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 3
  %26 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 4
  store double %7, double* %22
  store %Array* %9, %Array** %23
  store i2 %11, i2* %24
  store { %Range, i64 }* %17, { %Range, i64 }** %25
  store %Array* %4, %Array** %26
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 0
  %30 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 1
  store %Array* %3, %Array** %29
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30
  %31 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 0
  %32 = load %Callable*, %Callable** %31
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__39__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 4
  %13 = load %Range, %Range* %12
  %14 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 5
  %15 = load i64, i64* %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 0
  %19 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 1
  store %Range %13, %Range* %18
  store i64 %15, i64* %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 3
  %26 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 4
  store double %7, double* %22
  store %Array* %9, %Array** %23
  store i2 %11, i2* %24
  store { %Range, i64 }* %17, { %Range, i64 }** %25
  store %Array* %4, %Array** %26
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 0
  %30 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 1
  store %Array* %3, %Array** %29
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30
  %31 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 0
  %32 = load %Callable*, %Callable** %31
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %33, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %4 = load double, double* %1
  %5 = load i64, i64* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____body(double %4, i64 %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %4 = load double, double* %1
  %5 = load i64, i64* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____adj(double %4, i64 %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctl(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef2__ApplyGlobalRotationStep____ctladj(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__40__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 2
  store double %2, double* %10
  store i64 %4, i64* %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__40__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 2
  store double %2, double* %10
  store i64 %4, i64* %11
  store %Array* %7, %Array** %12
  %13 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %15, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__40__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 2
  store double %7, double* %12
  store i64 %9, i64* %13
  store %Array* %4, %Array** %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 1
  store %Array* %3, %Array** %17
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18
  %19 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__40__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 2
  store double %7, double* %12
  store i64 %9, i64* %13
  store %Array* %4, %Array** %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 1
  store %Array* %3, %Array** %17
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18
  %19 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %21, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i64 -1)
  ret void
}

define void @MemoryManagement__25__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__25__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11
  %12 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }* }*
  %17 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 1
  %19 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 2
  store double 0.000000e+00, double* %17
  store %Array* %coefficients, %Array** %18
  store { %Array* }* %qubits, { %Array* }** %19
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  %20 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i64 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11
  %12 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 1)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }* }*
  %17 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 1
  %19 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 2
  store double 0.000000e+00, double* %17
  store %Array* %coefficients, %Array** %18
  store { %Array* }* %qubits, { %Array* }** %19
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  %20 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i64 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____body(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %1 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 0
  %rngControl = load %Range, %Range* %1
  %2 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %3)
  %4 = getelementptr { %Array* }, { %Array* }* %actualControl, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %actualControl, %Qubit* %9)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %1 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 0
  %rngControl = load %Range, %Range* %1
  %2 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %3)
  %4 = getelementptr { %Array* }, { %Array* }* %__qsVar0__actualControl__, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 1)
  %6 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %__qsVar0__actualControl__, %Qubit* %9)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %disentangling = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 1)
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %axis = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4
  %6 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %register = load %Array*, %Array** %6
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %7 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 0
  %rngControl = load %Range, %Range* %7
  %8 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 1
  %idxTarget = load i64, i64* %8
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr { %Array* }, { %Array* }* %actualControl, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 0
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 1
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 2
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 3
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 4
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21
  store double %tolerance, double* %15
  store %Array* %disentangling, %Array** %16
  store i2 %axis, i2* %17
  store { %Array* }* %actualControl, { %Array* }** %18
  store %Qubit* %22, %Qubit** %19
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef2__ApplyMultiplexStep____ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %disentangling = load %Array*, %Array** %2
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 1)
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %axis = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4
  %6 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %register = load %Array*, %Array** %6
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 1)
  %7 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 0
  %rngControl = load %Range, %Range* %7
  %8 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 1
  %idxTarget = load i64, i64* %8
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr { %Array* }, { %Array* }* %__qsVar0__actualControl__, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 1)
  %12 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 0
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 1
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 2
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 3
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 4
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21
  store double %tolerance, double* %15
  store %Array* %disentangling, %Array** %16
  store i2 %axis, i2* %17
  store { %Array* }* %__qsVar0__actualControl__, { %Array* }** %18
  store %Qubit* %22, %Qubit** %19
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i64 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Lifted__PartialApplication__41__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, { %Array* }* }*
  %8 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store { %Array* }* %5, { %Array* }** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__41__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, { %Array* }* }*
  %8 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store { %Array* }* %5, { %Array* }** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__41__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store { %Array* }* %4, { %Array* }** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__41__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store { %Array* }* %4, { %Array* }** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @MemoryManagement__26__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %entry
  %7 = phi i64 [ 0, %entry ], [ %13, %exiting__9 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { double, double }**
  %11 = load { double, double }*, { double, double }** %10
  %12 = bitcast { double, double }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 %count-change)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %13 = add i64 %7, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__26__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %entry
  %7 = phi i64 [ 0, %entry ], [ %13, %exiting__10 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { double, double }**
  %11 = load { double, double }*, { double, double }** %10
  %12 = bitcast { double, double }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i64 %count-change)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %13 = add i64 %7, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 1
  %10 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 2
  store double 0.000000e+00, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %qubits, { %Array* }** %10
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 1)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 1)
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 1
  %10 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 2
  store double 0.000000e+00, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %qubits, { %Array* }** %10
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i64 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Lifted__PartialApplication__42__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, { %Array* }* }*
  %8 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store { %Array* }* %5, { %Array* }** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__42__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, { %Array* }* }*
  %8 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  store { %Array* }* %5, { %Array* }** %9
  %10 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %12, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__42__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store { %Array* }* %4, { %Array* }** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @Lifted__PartialApplication__42__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  store { %Array* }* %4, { %Array* }** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { %Array* }* }* }*
  %14 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %13, i64 0, i32 1
  store %Array* %3, %Array** %14
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %15
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %17 = load %Callable*, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i64 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i64 -1)
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %18, i64 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i64 -1)
  ret void
}

define void @MemoryManagement__27__RefCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 0, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

define void @MemoryManagement__27__AliasCount(%Tuple* %capture-tuple, i64 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %2 = load %Callable*, %Callable** %1
  call void @__quantum__rt__callable_memory_management(i32 1, %Callable* %2, i64 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i64 %count-change)
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i64 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i64 %count-change)
  ret void
}

attributes #0 = { "EntryPoint" }
attributes #1 = { nounwind readnone speculatable willreturn }
