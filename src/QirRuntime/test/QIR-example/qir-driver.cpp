// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include <assert.h>
#include <bitset>
#include <iostream>
#include <memory>
#include <string>
#include <unordered_set>

#include "CoreTypes.hpp"
#include "QuantumApi_I.hpp"
#include "SimFactory.hpp"
#include "SimulatorStub.hpp"
#include "context.hpp"
#include "qirTypes.hpp"
#include "quantum__rt.hpp"

#define CATCH_CONFIG_MAIN // This tells Catch to provide a main() - only do this in one cpp file
#include "catch.hpp"

// Used by a couple test simulators. Catch's REQUIRE macro doesn't deal well with static class members so making it
// into a global constant.
constexpr int RELEASED = -1;

using namespace Microsoft::Quantum;
using namespace std;

// Can manually add calls to DebugLog in the ll files for debugging.
extern "C" void DebugLog(int64_t value)
{
    std::cout << value << std::endl;
}
extern "C" void DebugLogPtr(char* value)
{
    std::cout << (const void*)value << std::endl;
}

/*
Forward declared `extern "C"` methods below are implemented in the *.ll files. Most of the files are generated by Q#
compiler, in which case the corresponding *.qs file was used as a source. Some files might have been authored manually
or manually edited.

To update the *.ll files to a newer version:
- enlist and build qsharp-compiler
- find <location1>\qsc.exe and <location2>\QirCore.qs, <location2>\QirTarget.qs built files
- [if different] copy QirCore.qs and QirTarget.qs into the "compiler" folder
- run: qsc.exe build --qir s --build-exe --input name.qs compiler\qircore.qs compiler\qirtarget.qs --proj name
- the generated file name.ll will be placed into `s` folder
*/

// The function runs a VQE algorithm with hard-coded values for the hamiltonian terms and input state.
// The result should be the ground state energy of Hydrogen, approx. -1.13.
// The Q# source code can be found in msr-quarc/StandaloneVQE on the branch guenp/non-standalone.
extern "C" double Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE__body(); // NOLINT
TEST_CASE("QIR: Run QIR example", "[qir]")
{
    // Create a full state simulator and link it to the QIR context scope
    unique_ptr<ISimulator> qapi = CreateFullstateSimulator();
    QirContextScope qirctx(qapi.get());

    double res = Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE__body();
    REQUIRE(res == 0.0);
}
